+ cd /testbed
+ git checkout 5ecc39749a98c7ec3fc63b8cbaa82de5eb17c173 tests/test_slots.py
+ git apply -v -
Checking patch tests/test_slots.py...
Applied patch tests/test_slots.py cleanly.
+ python -m pytest tests/test_slots.py
============================= test session starts ==============================
platform linux -- Python 3.9.17, pytest-8.4.1, pluggy-1.6.0
rootdir: /testbed
configfile: pyproject.toml
plugins: hypothesis-6.91.0, mypy-plugins-3.2.0
collected 33 items

tests/test_slots.py ............s.s................FF                    [100%]

=================================== FAILURES ===================================
__________________ test_slots_unpickle_after_attr_removed[A] ___________________

cls = <class 'tests.test_slots.A'>

    @pytest.mark.parametrize("cls", [A])
    def test_slots_unpickle_after_attr_removed(cls):
        """
        We don't assign attributes we don't have anymore if the class has
        removed it.
        """
        a = cls(1, 2, 3)
        a_pickled = pickle.dumps(a)
        a_unpickled = pickle.loads(a_pickled)
        assert a_unpickled == a
    
        @attr.s(slots=True)
        class NEW_A:
            x = attr.ib()
            c = attr.ib()
    
        with mock.patch(f"{__name__}.A", NEW_A):
            new_a = pickle.loads(a_pickled)
            assert new_a.x == 1
>           assert new_a.c == 3
E           assert 2 == 3
E            +  where 2 = NEW_A(x=1, c=2).c

tests/test_slots.py:776: AssertionError
___________________ test_slots_unpickle_after_attr_added[A] ____________________

cls = <class 'tests.test_slots.A'>

    @pytest.mark.parametrize("cls", [A])
    def test_slots_unpickle_after_attr_added(cls):
        """
        We don't assign attribute we haven't had before if the class has one added.
        """
        a = cls(1, 2, 3)
        a_pickled = pickle.dumps(a)
        a_unpickled = pickle.loads(a_pickled)
        assert a_unpickled == a
    
        @attr.s(slots=True)
        class NEW_A:
            x = attr.ib()
            b = attr.ib()
            d = attr.ib()
            c = attr.ib()
    
        with mock.patch(f"{__name__}.A", NEW_A):
            new_a = pickle.loads(a_pickled)
            assert new_a.x == 1
            assert new_a.b == 2
>           assert new_a.c == 3
E           AttributeError: c

tests/test_slots.py:801: AttributeError
=========================== short test summary info ============================
SKIPPED [1] tests/test_slots.py:481: can't break CodeType.replace() via monkeypatch
SKIPPED [1] tests/test_slots.py:528: slots without weakref_slot should only work on PyPy
FAILED tests/test_slots.py::test_slots_unpickle_after_attr_removed[A] - asser...
FAILED tests/test_slots.py::test_slots_unpickle_after_attr_added[A] - Attribu...
=================== 2 failed, 29 passed, 2 skipped in 0.23s ====================
+ rc=1
+ echo OMNIGRIL_EXIT_CODE=1
+ git checkout 5ecc39749a98c7ec3fc63b8cbaa82de5eb17c173 tests/test_slots.py
OMNIGRIL_EXIT_CODE=1
