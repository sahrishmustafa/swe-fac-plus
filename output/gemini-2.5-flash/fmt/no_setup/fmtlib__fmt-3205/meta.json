{
    "task_id": "fmtlib__fmt-3205",
    "setup_info": {
        "repo_path": "github/_cache/fmtlib__fmt-3205_2025-07-04_18-38-48",
        "repo_cache_path": "github/_cache/fmtlib/fmt_cache"
    },
    "task_info": {
        "repo": "fmtlib/fmt",
        "pull_number": 3205,
        "instance_id": "fmtlib__fmt-3205",
        "issue_numbers": [
            "3189"
        ],
        "base_commit": "91c024ed3322793cf0fddd81fc1a83c22eb61709",
        "patch": "diff --git a/CMakeLists.txt b/CMakeLists.txt\n--- a/CMakeLists.txt\n+++ b/CMakeLists.txt\n@@ -1,4 +1,4 @@\n-cmake_minimum_required(VERSION 3.1...3.18)\n+cmake_minimum_required(VERSION 3.8...3.18)\n \n # Fallback for using newer policies on CMake <3.12.\n if(${CMAKE_VERSION} VERSION_LESS 3.12)\n@@ -122,17 +122,9 @@ endif ()\n set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}\n   \"${CMAKE_CURRENT_SOURCE_DIR}/support/cmake\")\n \n-include(cxx14)\n+include(CheckCXXCompilerFlag)\n include(JoinPaths)\n \n-list(FIND CMAKE_CXX_COMPILE_FEATURES \"cxx_variadic_templates\" index)\n-if (${index} GREATER -1)\n-  # Use cxx_variadic_templates instead of more appropriate cxx_std_11 for\n-  # compatibility with older CMake versions.\n-  set(FMT_REQUIRED_FEATURES cxx_variadic_templates)\n-endif ()\n-message(STATUS \"Required features: ${FMT_REQUIRED_FEATURES}\")\n-\n if (FMT_MASTER_PROJECT AND NOT DEFINED CMAKE_CXX_VISIBILITY_PRESET)\n   set_verbose(CMAKE_CXX_VISIBILITY_PRESET hidden CACHE STRING\n               \"Preset for the export of private symbols\")\n@@ -239,7 +231,7 @@ if (FMT_MODULE)\n   enable_module(fmt)\n endif ()\n \n-target_compile_features(fmt INTERFACE ${FMT_REQUIRED_FEATURES})\n+target_compile_features(fmt PUBLIC cxx_std_11)\n \n target_include_directories(fmt ${FMT_SYSTEM_HEADERS_ATTRIBUTE} PUBLIC\n   $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>\n@@ -270,7 +262,7 @@ add_library(fmt-header-only INTERFACE)\n add_library(fmt::fmt-header-only ALIAS fmt-header-only)\n \n target_compile_definitions(fmt-header-only INTERFACE FMT_HEADER_ONLY=1)\n-target_compile_features(fmt-header-only INTERFACE ${FMT_REQUIRED_FEATURES})\n+target_compile_features(fmt-header-only INTERFACE cxx_std_11)\n \n target_include_directories(fmt-header-only ${FMT_SYSTEM_HEADERS_ATTRIBUTE} INTERFACE\n   $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>\n",
        "test_patch": "diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt\n--- a/test/CMakeLists.txt\n+++ b/test/CMakeLists.txt\n@@ -109,7 +109,7 @@ if (FMT_MODULE)\n   # If module support is present the module tests require a\n   # test-only module to be built from {fmt}\n   add_library(test-module OBJECT ${CMAKE_SOURCE_DIR}/src/fmt.cc)\n-  target_compile_features(test-module PUBLIC ${FMT_REQUIRED_FEATURES})\n+  target_compile_features(test-module PUBLIC cxx_std_11)\n   target_include_directories(test-module PUBLIC\n     $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>)\n   enable_module(test-module)\ndiff --git a/test/add-subdirectory-test/CMakeLists.txt b/test/add-subdirectory-test/CMakeLists.txt\n--- a/test/add-subdirectory-test/CMakeLists.txt\n+++ b/test/add-subdirectory-test/CMakeLists.txt\n@@ -1,4 +1,4 @@\n-cmake_minimum_required(VERSION 3.1...3.18)\n+cmake_minimum_required(VERSION 3.8...3.18)\n \n project(fmt-test CXX)\n \ndiff --git a/test/compile-error-test/CMakeLists.txt b/test/compile-error-test/CMakeLists.txt\n--- a/test/compile-error-test/CMakeLists.txt\n+++ b/test/compile-error-test/CMakeLists.txt\n@@ -1,6 +1,6 @@\n # Test if compile errors are produced where necessary.\n \n-cmake_minimum_required(VERSION 3.1...3.18)\n+cmake_minimum_required(VERSION 3.8...3.18)\n project(compile-error-test CXX)\n \n set(fmt_headers \"\n@@ -64,7 +64,7 @@ function (run_tests)\n   \")\n \n   file(WRITE \"${CMAKE_CURRENT_BINARY_DIR}/test/CMakeLists.txt\" \"\n-    cmake_minimum_required(VERSION 3.1...3.18)\n+    cmake_minimum_required(VERSION 3.8...3.18)\n     project(tests CXX)\n     add_subdirectory(${FMT_DIR} fmt)\n     ${cmake_targets}\ndiff --git a/test/find-package-test/CMakeLists.txt b/test/find-package-test/CMakeLists.txt\n--- a/test/find-package-test/CMakeLists.txt\n+++ b/test/find-package-test/CMakeLists.txt\n@@ -1,4 +1,4 @@\n-cmake_minimum_required(VERSION 3.1...3.18)\n+cmake_minimum_required(VERSION 3.8...3.18)\n \n project(fmt-test)\n \ndiff --git a/test/fuzzing/CMakeLists.txt b/test/fuzzing/CMakeLists.txt\n--- a/test/fuzzing/CMakeLists.txt\n+++ b/test/fuzzing/CMakeLists.txt\n@@ -22,7 +22,7 @@ function(add_fuzzer source)\n   if (FMT_FUZZ_LDFLAGS)\n     target_link_libraries(${name} PRIVATE ${FMT_FUZZ_LDFLAGS})\n   endif ()\n-  target_compile_features(${name} PRIVATE cxx_generic_lambdas)\n+  target_compile_features(${name} PRIVATE cxx_std_14)\n endfunction()\n \n foreach (source chrono-duration.cc chrono-timepoint.cc float.cc named-arg.cc one-arg.cc two-args.cc)\ndiff --git a/test/gtest/CMakeLists.txt b/test/gtest/CMakeLists.txt\n--- a/test/gtest/CMakeLists.txt\n+++ b/test/gtest/CMakeLists.txt\n@@ -9,6 +9,7 @@ add_library(gtest STATIC\n   gmock-gtest-all.cc gmock/gmock.h gtest/gtest.h gtest/gtest-spi.h)\n target_compile_definitions(gtest PUBLIC GTEST_HAS_STD_WSTRING=1)\n target_include_directories(gtest SYSTEM PUBLIC .)\n+target_compile_features(gtest PUBLIC cxx_std_11)\n \n find_package(Threads)\n if (Threads_FOUND)\n@@ -17,9 +18,10 @@ else ()\n   target_compile_definitions(gtest PUBLIC GTEST_HAS_PTHREAD=0)\n endif ()\n \n-# Workaround GTest bug https://github.com/google/googletest/issues/705.\n-fmt_check_cxx_compiler_flag(\n-  -fno-delete-null-pointer-checks HAVE_FNO_DELETE_NULL_POINTER_CHECKS)\n+# Workaround GTest bug https://github.com/google/googletest/issues/705\n+if (NOT MSVC)\n+  check_cxx_compiler_flag(-fno-delete-null-pointer-checks HAVE_FNO_DELETE_NULL_POINTER_CHECKS)\n+endif ()\n if (HAVE_FNO_DELETE_NULL_POINTER_CHECKS)\n   target_compile_options(gtest PUBLIC -fno-delete-null-pointer-checks)\n endif ()\ndiff --git a/test/static-export-test/CMakeLists.txt b/test/static-export-test/CMakeLists.txt\n--- a/test/static-export-test/CMakeLists.txt\n+++ b/test/static-export-test/CMakeLists.txt\n@@ -1,4 +1,4 @@\n-cmake_minimum_required(VERSION 3.1...3.18)\n+cmake_minimum_required(VERSION 3.8...3.18)\n \n project(fmt-link CXX)\n \n",
        "problem_statement": "Hardcoding `CMAKE_CXX_STANDARD` breaks source-consuming downstream projects using `target_compile_features`\nhttps://github.com/fmtlib/fmt/blob/a935ac3e60306f9220ed983eac97cb44a492171c/support/cmake/cxx14.cmake#L10-L12\r\n\r\nFor project consuming the latest release of fmt via `add_subdirectory` like seen [here](https://github.com/zakinadhif/Fyshx/blob/8a5cb8517589c24f9452ff110c962177b5e99261/CMakeLists.txt#L15-L19) who also use the modern `target_compile_features`-based approach to enable a specific language standard like C++17 have their builds broken by the above snippet. The above snippet can result in their requested language standard being overridden by the default language standard used in fmt unless they're careful to set `CMAKE_CXX_STANDARD` themselves before including fmt.\r\n\r\nI see this is likely the case because the library claims to support CMake versions all the way back to 3.1, well before `target_compile_features` was added. Can the minimum version be raised to use `target_compile_features` or can we at least add some extra CMake code to us the modern language specification functions when possible? \n",
        "hints_text": "`target_compile_features` is available in CMake 3.1.3: https://cmake.org/cmake/help/v3.1/command/target_compile_features.html. A PR to bump the minimum required version and  replace `CMAKE_CXX_STANDARD` with something target-based would be welcome.\nThe `cxx_std_xx` properties weren\u2019t added until version 3.8. We\u2019d have to make a more substantial minimum version increase. Is that okay?\nhttps://cmake.org/cmake/help/latest/prop_tgt/CXX_STANDARD.html#prop_tgt:CXX_STANDARD\r\n\r\nThe value `17` for `CXX_STANDARD` also isn't supported until CMake 3.8. \nI suggest replacing `CMAKE_CXX_STANDARD` with `FMT_CXX_STANDARD` and using this variable to set the targets' `CXX_STANDARD` property. This way we don't need to bump cmake all the way to 3.8 (c++17 can be supported conditionally).\nWhat platforms are you supporting that are still limited to CMake version 3.1? That's quite old at this point. It may be worth it to let such users stick to the current release so that we can improve the experience for the majority of users who are using ~3.10 or newer.\r\n\r\nHere's a convenient table showing what platforms ship what version of CMake:\r\n\r\nhttps://alexreinking.com/blog/how-to-use-cmake-without-the-agonizing-pain-part-1.html\r\n\r\nIn short, the oldest version still in regular use is CMake 3.16 on Ubuntu 20.04 LTS but if you want to go back to Ubuntu 18.04 LTS which is nearing EOL, that still has CMake 3.10. \nIt's more about the question whether we need to bump the version rather than supporting some specific platform. Anyway, 3.8 is quite old version so it's probably OK to bump it if it makes things significantly simpler.",
        "created_at": "2022-11-25T17:05:43Z",
        "version": "9.1"
    }
}