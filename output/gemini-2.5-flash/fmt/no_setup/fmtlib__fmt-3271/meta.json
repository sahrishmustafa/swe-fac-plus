{
    "task_id": "fmtlib__fmt-3271",
    "setup_info": {
        "repo_path": "github/_cache/fmtlib__fmt-3271_2025-07-04_18-38-48",
        "repo_cache_path": "github/_cache/fmtlib/fmt_cache"
    },
    "task_info": {
        "repo": "fmtlib/fmt",
        "pull_number": 3271,
        "instance_id": "fmtlib__fmt-3271",
        "issue_numbers": [
            "2959"
        ],
        "base_commit": "bfc0924eacaa3c6163eb872c8948098565464192",
        "patch": "diff --git a/include/fmt/chrono.h b/include/fmt/chrono.h\n--- a/include/fmt/chrono.h\n+++ b/include/fmt/chrono.h\n@@ -664,6 +664,30 @@ enum class numeric_system {\n   alternative\n };\n \n+// Glibc extensions for formatting numeric values.\n+enum class pad_type {\n+  unspecified,\n+  // Do not pad a numeric result string.\n+  none,\n+  // Pad a numeric result string with zeros even if the conversion specifier\n+  // character uses space-padding by default.\n+  zero,\n+  // Pad a numeric result string with spaces.\n+  space,\n+};\n+\n+template <typename OutputIt>\n+auto write_padding(OutputIt out, pad_type pad, int width) -> OutputIt {\n+  if (pad == pad_type::none) return out;\n+  return std::fill_n(out, width, pad == pad_type::space ? ' ' : '0');\n+}\n+\n+template <typename OutputIt>\n+auto write_padding(OutputIt out, pad_type pad) -> OutputIt {\n+  if (pad != pad_type::none) *out++ = pad == pad_type::space ? ' ' : '0';\n+  return out;\n+}\n+\n // Parses a put_time-like format string and invokes handler actions.\n template <typename Char, typename Handler>\n FMT_CONSTEXPR const Char* parse_chrono_format(const Char* begin,\n@@ -672,6 +696,7 @@ FMT_CONSTEXPR const Char* parse_chrono_format(const Char* begin,\n   if (begin == end || *begin == '}') return begin;\n   if (*begin != '%') FMT_THROW(format_error(\"invalid format\"));\n   auto ptr = begin;\n+  pad_type pad = pad_type::unspecified;\n   while (ptr != end) {\n     auto c = *ptr;\n     if (c == '}') break;\n@@ -682,6 +707,22 @@ FMT_CONSTEXPR const Char* parse_chrono_format(const Char* begin,\n     if (begin != ptr) handler.on_text(begin, ptr);\n     ++ptr;  // consume '%'\n     if (ptr == end) FMT_THROW(format_error(\"invalid format\"));\n+    c = *ptr;\n+    switch (c) {\n+    case '_':\n+      pad = pad_type::space;\n+      ++ptr;\n+      break;\n+    case '-':\n+      pad = pad_type::none;\n+      ++ptr;\n+      break;\n+    case '0':\n+      pad = pad_type::zero;\n+      ++ptr;\n+      break;\n+    }\n+    if (ptr == end) FMT_THROW(format_error(\"invalid format\"));\n     c = *ptr++;\n     switch (c) {\n     case '%':\n@@ -758,16 +799,16 @@ FMT_CONSTEXPR const Char* parse_chrono_format(const Char* begin,\n       break;\n     // Hour, minute, second:\n     case 'H':\n-      handler.on_24_hour(numeric_system::standard);\n+      handler.on_24_hour(numeric_system::standard, pad);\n       break;\n     case 'I':\n-      handler.on_12_hour(numeric_system::standard);\n+      handler.on_12_hour(numeric_system::standard, pad);\n       break;\n     case 'M':\n-      handler.on_minute(numeric_system::standard);\n+      handler.on_minute(numeric_system::standard, pad);\n       break;\n     case 'S':\n-      handler.on_second(numeric_system::standard);\n+      handler.on_second(numeric_system::standard, pad);\n       break;\n     // Other:\n     case 'c':\n@@ -872,16 +913,16 @@ FMT_CONSTEXPR const Char* parse_chrono_format(const Char* begin,\n         handler.on_dec1_weekday(numeric_system::alternative);\n         break;\n       case 'H':\n-        handler.on_24_hour(numeric_system::alternative);\n+        handler.on_24_hour(numeric_system::alternative, pad);\n         break;\n       case 'I':\n-        handler.on_12_hour(numeric_system::alternative);\n+        handler.on_12_hour(numeric_system::alternative, pad);\n         break;\n       case 'M':\n-        handler.on_minute(numeric_system::alternative);\n+        handler.on_minute(numeric_system::alternative, pad);\n         break;\n       case 'S':\n-        handler.on_second(numeric_system::alternative);\n+        handler.on_second(numeric_system::alternative, pad);\n         break;\n       case 'z':\n         handler.on_utc_offset(numeric_system::alternative);\n@@ -965,10 +1006,10 @@ struct tm_format_checker : null_chrono_spec_handler<tm_format_checker> {\n   FMT_CONSTEXPR void on_day_of_year() {}\n   FMT_CONSTEXPR void on_day_of_month(numeric_system) {}\n   FMT_CONSTEXPR void on_day_of_month_space(numeric_system) {}\n-  FMT_CONSTEXPR void on_24_hour(numeric_system) {}\n-  FMT_CONSTEXPR void on_12_hour(numeric_system) {}\n-  FMT_CONSTEXPR void on_minute(numeric_system) {}\n-  FMT_CONSTEXPR void on_second(numeric_system) {}\n+  FMT_CONSTEXPR void on_24_hour(numeric_system, pad_type) {}\n+  FMT_CONSTEXPR void on_12_hour(numeric_system, pad_type) {}\n+  FMT_CONSTEXPR void on_minute(numeric_system, pad_type) {}\n+  FMT_CONSTEXPR void on_second(numeric_system, pad_type) {}\n   FMT_CONSTEXPR void on_datetime(numeric_system) {}\n   FMT_CONSTEXPR void on_loc_date(numeric_system) {}\n   FMT_CONSTEXPR void on_loc_time(numeric_system) {}\n@@ -1238,6 +1279,17 @@ class tm_writer {\n     *out_++ = *d++;\n     *out_++ = *d;\n   }\n+  void write2(int value, pad_type pad) {\n+    unsigned int v = to_unsigned(value) % 100;\n+    if (v >= 10) {\n+      const char* d = digits2(v);\n+      *out_++ = *d++;\n+      *out_++ = *d;\n+    } else {\n+      out_ = detail::write_padding(out_, pad);\n+      *out_++ = static_cast<char>('0' + v);\n+    }\n+  }\n \n   void write_year_extended(long long year) {\n     // At least 4 characters.\n@@ -1514,23 +1566,25 @@ class tm_writer {\n     }\n   }\n \n-  void on_24_hour(numeric_system ns) {\n-    if (is_classic_ || ns == numeric_system::standard) return write2(tm_hour());\n+  void on_24_hour(numeric_system ns, pad_type pad) {\n+    if (is_classic_ || ns == numeric_system::standard)\n+      return write2(tm_hour(), pad);\n     format_localized('H', 'O');\n   }\n-  void on_12_hour(numeric_system ns) {\n+  void on_12_hour(numeric_system ns, pad_type pad) {\n     if (is_classic_ || ns == numeric_system::standard)\n-      return write2(tm_hour12());\n+      return write2(tm_hour12(), pad);\n     format_localized('I', 'O');\n   }\n-  void on_minute(numeric_system ns) {\n-    if (is_classic_ || ns == numeric_system::standard) return write2(tm_min());\n+  void on_minute(numeric_system ns, pad_type pad) {\n+    if (is_classic_ || ns == numeric_system::standard)\n+      return write2(tm_min(), pad);\n     format_localized('M', 'O');\n   }\n \n-  void on_second(numeric_system ns) {\n+  void on_second(numeric_system ns, pad_type pad) {\n     if (is_classic_ || ns == numeric_system::standard) {\n-      write2(tm_sec());\n+      write2(tm_sec(), pad);\n       if (subsecs_) {\n         if (std::is_floating_point<typename Duration::rep>::value) {\n           auto buf = memory_buffer();\n@@ -1594,10 +1648,10 @@ struct chrono_format_checker : null_chrono_spec_handler<chrono_format_checker> {\n \n   template <typename Char>\n   FMT_CONSTEXPR void on_text(const Char*, const Char*) {}\n-  FMT_CONSTEXPR void on_24_hour(numeric_system) {}\n-  FMT_CONSTEXPR void on_12_hour(numeric_system) {}\n-  FMT_CONSTEXPR void on_minute(numeric_system) {}\n-  FMT_CONSTEXPR void on_second(numeric_system) {}\n+  FMT_CONSTEXPR void on_24_hour(numeric_system, pad_type) {}\n+  FMT_CONSTEXPR void on_12_hour(numeric_system, pad_type) {}\n+  FMT_CONSTEXPR void on_minute(numeric_system, pad_type) {}\n+  FMT_CONSTEXPR void on_second(numeric_system, pad_type) {}\n   FMT_CONSTEXPR void on_12_hour_time() {}\n   FMT_CONSTEXPR void on_24_hour_time() {}\n   FMT_CONSTEXPR void on_iso_time() {}\n@@ -1819,13 +1873,15 @@ struct chrono_formatter {\n     }\n   }\n \n-  void write(Rep value, int width) {\n+  void write(Rep value, int width, pad_type pad = pad_type::unspecified) {\n     write_sign();\n     if (isnan(value)) return write_nan();\n     uint32_or_64_or_128_t<int> n =\n         to_unsigned(to_nonnegative_int(value, max_value<int>()));\n     int num_digits = detail::count_digits(n);\n-    if (width > num_digits) out = std::fill_n(out, width - num_digits, '0');\n+    if (width > num_digits) {\n+      out = detail::write_padding(out, pad, width - num_digits);\n+    }\n     out = format_decimal<char_type>(out, n, num_digits).end;\n   }\n \n@@ -1874,34 +1930,34 @@ struct chrono_formatter {\n   void on_day_of_month(numeric_system) {}\n   void on_day_of_month_space(numeric_system) {}\n \n-  void on_24_hour(numeric_system ns) {\n+  void on_24_hour(numeric_system ns, pad_type pad) {\n     if (handle_nan_inf()) return;\n \n-    if (ns == numeric_system::standard) return write(hour(), 2);\n+    if (ns == numeric_system::standard) return write(hour(), 2, pad);\n     auto time = tm();\n     time.tm_hour = to_nonnegative_int(hour(), 24);\n-    format_tm(time, &tm_writer_type::on_24_hour, ns);\n+    format_tm(time, &tm_writer_type::on_24_hour, ns, pad);\n   }\n \n-  void on_12_hour(numeric_system ns) {\n+  void on_12_hour(numeric_system ns, pad_type pad) {\n     if (handle_nan_inf()) return;\n \n-    if (ns == numeric_system::standard) return write(hour12(), 2);\n+    if (ns == numeric_system::standard) return write(hour12(), 2, pad);\n     auto time = tm();\n     time.tm_hour = to_nonnegative_int(hour12(), 12);\n-    format_tm(time, &tm_writer_type::on_12_hour, ns);\n+    format_tm(time, &tm_writer_type::on_12_hour, ns, pad);\n   }\n \n-  void on_minute(numeric_system ns) {\n+  void on_minute(numeric_system ns, pad_type pad) {\n     if (handle_nan_inf()) return;\n \n-    if (ns == numeric_system::standard) return write(minute(), 2);\n+    if (ns == numeric_system::standard) return write(minute(), 2, pad);\n     auto time = tm();\n     time.tm_min = to_nonnegative_int(minute(), 60);\n-    format_tm(time, &tm_writer_type::on_minute, ns);\n+    format_tm(time, &tm_writer_type::on_minute, ns, pad);\n   }\n \n-  void on_second(numeric_system ns) {\n+  void on_second(numeric_system ns, pad_type pad) {\n     if (handle_nan_inf()) return;\n \n     if (ns == numeric_system::standard) {\n@@ -1910,10 +1966,12 @@ struct chrono_formatter {\n         write_floating_seconds(buf, std::chrono::duration<rep, Period>(val),\n                                precision);\n         if (negative) *out++ = '-';\n-        if (buf.size() < 2 || buf[1] == '.') *out++ = '0';\n+        if (buf.size() < 2 || buf[1] == '.') {\n+          out = detail::write_padding(out, pad);\n+        }\n         out = std::copy(buf.begin(), buf.end(), out);\n       } else {\n-        write(second(), 2);\n+        write(second(), 2, pad);\n         write_fractional_seconds<char_type>(\n             out, std::chrono::duration<rep, Period>(val), precision);\n       }\n@@ -1921,7 +1979,7 @@ struct chrono_formatter {\n     }\n     auto time = tm();\n     time.tm_sec = to_nonnegative_int(second(), 60);\n-    format_tm(time, &tm_writer_type::on_second, ns);\n+    format_tm(time, &tm_writer_type::on_second, ns, pad);\n   }\n \n   void on_12_hour_time() {\n@@ -1945,7 +2003,7 @@ struct chrono_formatter {\n     on_24_hour_time();\n     *out++ = ':';\n     if (handle_nan_inf()) return;\n-    on_second(numeric_system::standard);\n+    on_second(numeric_system::standard, pad_type::unspecified);\n   }\n \n   void on_am_pm() {\n",
        "test_patch": "diff --git a/test/chrono-test.cc b/test/chrono-test.cc\n--- a/test/chrono-test.cc\n+++ b/test/chrono-test.cc\n@@ -919,3 +919,56 @@ TEST(chrono_test, timestamps_sub_seconds) {\n     EXPECT_EQ(\"00.250\", fmt::format(\"{:%S}\", epoch + d));\n   }\n }\n+\n+TEST(chrono_test, glibc_extensions) {\n+  EXPECT_THROW_MSG((void)fmt::format(runtime(\"{:%0}\"), std::chrono::seconds()),\n+                   fmt::format_error, \"invalid format\");\n+  EXPECT_THROW_MSG((void)fmt::format(runtime(\"{:%_}\"), std::chrono::seconds()),\n+                   fmt::format_error, \"invalid format\");\n+  EXPECT_THROW_MSG((void)fmt::format(runtime(\"{:%-}\"), std::chrono::seconds()),\n+                   fmt::format_error, \"invalid format\");\n+\n+  {\n+    const auto d = std::chrono::hours(1) + std::chrono::minutes(2) +\n+                   std::chrono::seconds(3);\n+\n+    EXPECT_EQ(fmt::format(\"{:%I,%H,%M,%S}\", d), \"01,01,02,03\");\n+    EXPECT_EQ(fmt::format(\"{:%0I,%0H,%0M,%0S}\", d), \"01,01,02,03\");\n+    EXPECT_EQ(fmt::format(\"{:%_I,%_H,%_M,%_S}\", d), \" 1, 1, 2, 3\");\n+    EXPECT_EQ(fmt::format(\"{:%-I,%-H,%-M,%-S}\", d), \"1,1,2,3\");\n+\n+    EXPECT_EQ(fmt::format(\"{:%OI,%OH,%OM,%OS}\", d), \"01,01,02,03\");\n+    EXPECT_EQ(fmt::format(\"{:%0OI,%0OH,%0OM,%0OS}\", d), \"01,01,02,03\");\n+    EXPECT_EQ(fmt::format(\"{:%_OI,%_OH,%_OM,%_OS}\", d), \" 1, 1, 2, 3\");\n+    EXPECT_EQ(fmt::format(\"{:%-OI,%-OH,%-OM,%-OS}\", d), \"1,1,2,3\");\n+  }\n+\n+  {\n+    const auto tm = make_tm(1970, 1, 1, 1, 2, 3);\n+    EXPECT_EQ(fmt::format(\"{:%I,%H,%M,%S}\", tm), \"01,01,02,03\");\n+    EXPECT_EQ(fmt::format(\"{:%0I,%0H,%0M,%0S}\", tm), \"01,01,02,03\");\n+    EXPECT_EQ(fmt::format(\"{:%_I,%_H,%_M,%_S}\", tm), \" 1, 1, 2, 3\");\n+    EXPECT_EQ(fmt::format(\"{:%-I,%-H,%-M,%-S}\", tm), \"1,1,2,3\");\n+\n+    EXPECT_EQ(fmt::format(\"{:%OI,%OH,%OM,%OS}\", tm), \"01,01,02,03\");\n+    EXPECT_EQ(fmt::format(\"{:%0OI,%0OH,%0OM,%0OS}\", tm), \"01,01,02,03\");\n+    EXPECT_EQ(fmt::format(\"{:%_OI,%_OH,%_OM,%_OS}\", tm), \" 1, 1, 2, 3\");\n+    EXPECT_EQ(fmt::format(\"{:%-OI,%-OH,%-OM,%-OS}\", tm), \"1,1,2,3\");\n+  }\n+\n+  {\n+    const auto d = std::chrono::seconds(3) + std::chrono::milliseconds(140);\n+    EXPECT_EQ(fmt::format(\"{:%S}\", d), \"03.140\");\n+    EXPECT_EQ(fmt::format(\"{:%0S}\", d), \"03.140\");\n+    EXPECT_EQ(fmt::format(\"{:%_S}\", d), \" 3.140\");\n+    EXPECT_EQ(fmt::format(\"{:%-S}\", d), \"3.140\");\n+  }\n+\n+  {\n+    const auto d = std::chrono::duration<double>(3.14);\n+    EXPECT_EQ(fmt::format(\"{:%S}\", d), \"03.140000\");\n+    EXPECT_EQ(fmt::format(\"{:%0S}\", d), \"03.140000\");\n+    EXPECT_EQ(fmt::format(\"{:%_S}\", d), \" 3.140000\");\n+    EXPECT_EQ(fmt::format(\"{:%-S}\", d), \"3.140000\");\n+  }\n+}\n",
        "problem_statement": "Support strftime `-` extension\n<!--\r\nPlease make sure that the problem reproduces on the current master before\r\nsubmitting an issue.\r\nIf possible please provide a repro on Compiler Explorer:\r\nhttps://godbolt.org/z/fxccbh53W.\r\n-->\r\nWith `strftime` a single digit 12-hour hour can be formatted to not have a leading zero using `%-I`. This seems to not be possible with `fmt::format`.\r\n```\r\n#include <iostream>\r\n#include <fmt/chrono.h>\r\n\r\nint main() {\r\n    std::cout << \"%-I:%M using strftime:\" << std::endl;\r\n    std::time_t t_ = std::time(nullptr);\r\n    char mbstr[100];\r\n    if (std::strftime(mbstr, sizeof(mbstr), \"%-I:%M\", std::localtime(&t_))) {\r\n        std::cout << mbstr << std::endl;\r\n    }\r\n\r\n    std::cout << \"%-I:%M using fmt::format:\" << std::endl;\r\n    const auto t = std::chrono::system_clock::to_time_t(std::chrono::system_clock::now());\r\n    const auto time_str = fmt::format(\"{:%-I:%M}\", fmt::localtime(t));\r\n    // terminate called after throwing an instance of 'fmt::v8::format_error'\r\n    //   what():  invalid format\r\n    std::cout << time_str << std::endl;\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\nThere are probably more instances where `strftime` parity is not quite met. It would great if it was, or if any user error could be pointed out :)\n",
        "hints_text": "I don't see `%-I` documented in https://man7.org/linux/man-pages/man3/strftime.3.html. Is it some kind of an extension?\nOn the man page you linked:\r\n> Glibc notes\r\n       Glibc provides some extensions for conversion specifications.\r\n       (These extensions are not specified in POSIX.1-2001, but a few\r\n       other systems provide similar features.)  Between the '%'\r\n       character and the conversion specifier character, an optional\r\n       flag and field width may be specified.  (These precede the E or O\r\n       modifiers, if present.)\r\n\r\n       The following flag characters are permitted:\r\n\r\n       _      (underscore) Pad a numeric result string with spaces.\r\n\r\n       -      (dash) Do not pad a numeric result string\r\n\r\nso I'd suppose it is a glibc extension. Does that preclude it?\n{fmt} supports only standard specifiers at the moment but a PR to add `-` would be welcome.\nHi @vitaut \r\nI've started working on this but have some questions about differing behavior I'm seeing between platforms (some of tests are failing on Windows only). Does {fmt} have an IRC development channel or something of the sort?\nThere is no IRC, we usually discuss such issues on github.",
        "created_at": "2023-01-13T09:21:19Z",
        "version": "9.1"
    }
}