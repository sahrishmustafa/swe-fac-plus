{
    "task_id": "fmtlib__fmt-2317",
    "setup_info": {
        "repo_path": "github/_cache/fmtlib__fmt-2317_2025-07-04_18-38-48",
        "repo_cache_path": "github/_cache/fmtlib/fmt_cache"
    },
    "task_info": {
        "repo": "fmtlib/fmt",
        "pull_number": 2317,
        "instance_id": "fmtlib__fmt-2317",
        "issue_numbers": [
            "2308"
        ],
        "base_commit": "7612f18dc8e0112e64e0845a1ebe9da6cfb8a123",
        "patch": "diff --git a/include/fmt/format.h b/include/fmt/format.h\n--- a/include/fmt/format.h\n+++ b/include/fmt/format.h\n@@ -1304,14 +1304,14 @@ constexpr OutputIt write_padded(OutputIt out,\n   return write_padded<align>(out, specs, size, size, f);\n }\n \n-template <typename Char, typename OutputIt>\n+template <align::type align = align::left, typename Char, typename OutputIt>\n FMT_CONSTEXPR OutputIt write_bytes(OutputIt out, string_view bytes,\n                                    const basic_format_specs<Char>& specs) {\n-  return write_padded(out, specs, bytes.size(),\n-                      [bytes](reserve_iterator<OutputIt> it) {\n-                        const char* data = bytes.data();\n-                        return copy_str<Char>(data, data + bytes.size(), it);\n-                      });\n+  return write_padded<align>(\n+      out, specs, bytes.size(), [bytes](reserve_iterator<OutputIt> it) {\n+        const char* data = bytes.data();\n+        return copy_str<Char>(data, data + bytes.size(), it);\n+      });\n }\n \n template <typename Char, typename OutputIt, typename UIntPtr>\n@@ -1793,7 +1793,8 @@ OutputIt write(OutputIt out, T value, basic_format_specs<Char> specs,\n   if (fspecs.format == float_format::hex) {\n     if (fspecs.sign) buffer.push_back(data::signs[fspecs.sign]);\n     snprintf_float(promote_float(value), specs.precision, fspecs, buffer);\n-    return write_bytes(out, {buffer.data(), buffer.size()}, specs);\n+    return write_bytes<align::right>(out, {buffer.data(), buffer.size()},\n+                                     specs);\n   }\n   int precision = specs.precision >= 0 || !specs.type ? specs.precision : 6;\n   if (fspecs.format == float_format::exp) {\n",
        "test_patch": "diff --git a/test/format-test.cc b/test/format-test.cc\n--- a/test/format-test.cc\n+++ b/test/format-test.cc\n@@ -1215,6 +1215,8 @@ TEST(format_test, format_double) {\n   EXPECT_EQ(\"392.650000\", fmt::format(\"{:f}\", 392.65));\n   EXPECT_EQ(\"392.650000\", fmt::format(\"{:F}\", 392.65));\n   EXPECT_EQ(\"42\", fmt::format(\"{:L}\", 42.0));\n+  EXPECT_EQ(\"    0x1.0cccccccccccdp+2\", fmt::format(\"{:24a}\", 4.2));\n+  EXPECT_EQ(\"0x1.0cccccccccccdp+2    \", fmt::format(\"{:<24a}\", 4.2));\n   char buffer[buffer_size];\n   safe_sprintf(buffer, \"%e\", 392.65);\n   EXPECT_EQ(buffer, fmt::format(\"{0:e}\", 392.65));\n",
        "problem_statement": "Hex float default alignment\nFrom the documentation (emphasis mine):\r\n<!--StartFragment-->\r\nOption | Meaning\r\n-- | --\r\n'&lt;' | Forces the field to be left-aligned within the available space (this is the default for most objects).\r\n'&gt;' | Forces the field to be right-aligned within the available space (***this is the default for numbers***).\r\n'^' | Forces the field to be centered within the available space.\r\n\r\n<!--EndFragment-->\r\n\r\n```\r\nfmt::print(\"'{:16f}'\\n\", 4.2f); // output: '        4.200000'\r\nfmt::print(\"'{:16a}'\\n\", 4.2f); // output: '0x1.0cccccp+2   '\r\n```\r\n\r\nhttps://godbolt.org/z/Mf4nzdncs\n",
        "hints_text": "",
        "created_at": "2021-05-27T18:21:50Z",
        "version": "7.1"
    }
}