{
    "task_id": "fmtlib__fmt-3214",
    "setup_info": {
        "repo_path": "github/_cache/fmtlib__fmt-3214_2025-07-04_18-38-48",
        "repo_cache_path": "github/_cache/fmtlib/fmt_cache"
    },
    "task_info": {
        "repo": "fmtlib/fmt",
        "pull_number": 3214,
        "instance_id": "fmtlib__fmt-3214",
        "issue_numbers": [
            "3105",
            "3105"
        ],
        "base_commit": "74c51ff37e4c3a75d7a1532e3d96b64cbbe47263",
        "patch": "diff --git a/include/fmt/core.h b/include/fmt/core.h\n--- a/include/fmt/core.h\n+++ b/include/fmt/core.h\n@@ -2984,7 +2984,7 @@ class format_string_checker {\n #if FMT_USE_NONTYPE_TEMPLATE_ARGS\n     auto index = get_arg_index_by_name<Args...>(id);\n     if (index == invalid_arg_index) on_error(\"named argument is not found\");\n-    return context_.check_arg_id(index), index;\n+    return index;\n #else\n     (void)id;\n     on_error(\"compile-time checks for named arguments require C++20 support\");\n",
        "test_patch": "diff --git a/test/format-test.cc b/test/format-test.cc\n--- a/test/format-test.cc\n+++ b/test/format-test.cc\n@@ -1907,6 +1907,7 @@ TEST(format_test, compile_time_string) {\n   EXPECT_EQ(\"\", fmt::format(FMT_STRING(\"\")));\n   EXPECT_EQ(\"\", fmt::format(FMT_STRING(\"\"), \"arg\"_a = 42));\n   EXPECT_EQ(\"42\", fmt::format(FMT_STRING(\"{answer}\"), \"answer\"_a = Answer()));\n+  EXPECT_EQ(\"1 2\", fmt::format(FMT_STRING(\"{} {two}\"), 1, \"two\"_a = 2));\n #endif\n \n   (void)static_with_null;\n",
        "problem_statement": "Compile-time error when mixing named argument with automatic indexing\nMinimal reproducer ([godbolt](https://godbolt.org/z/bxYGbn9cE)):\r\n```\r\nfmt::print(\"{} {a}\", 1, \"a\"_a = 2);\r\n```\r\n\r\nI believe this is supposed to compile, but it causes:\r\n```\r\non_error(\"cannot switch from automatic to manual argument indexing\");\r\n```\r\n\r\nAre the named arguments considered as \"indexed\", or is it a bug?\r\n\r\nIt works with `fmt::runtime`, so if nothing else, there is a problem with consistency between compile-time and runtime checking.\nCompile-time error when mixing named argument with automatic indexing\nMinimal reproducer ([godbolt](https://godbolt.org/z/bxYGbn9cE)):\r\n```\r\nfmt::print(\"{} {a}\", 1, \"a\"_a = 2);\r\n```\r\n\r\nI believe this is supposed to compile, but it causes:\r\n```\r\non_error(\"cannot switch from automatic to manual argument indexing\");\r\n```\r\n\r\nAre the named arguments considered as \"indexed\", or is it a bug?\r\n\r\nIt works with `fmt::runtime`, so if nothing else, there is a problem with consistency between compile-time and runtime checking.\n",
        "hints_text": "Good catch, thanks. We should make the diagnostic consistent but in the meantime you can use manual indexing as a workaround:\r\n\r\n```\r\nfmt::print(\"{0} {a}\", 1, \"a\"_a = 2);\r\n```\nThanks, I know it works with indexed parameters.\r\n\r\nLet me add some more details about the use-case: I encountered the issue when I tried to enable compile-time checks for logging in our company, where we already have many messages in code. Changing them to indexed would not practical, nor very nice to the user of such API. The named argument is used to log \"strerror\", similarly as was common with printf, i.e. original `%m` is replaced by fmt `{m}`. This is achieved by adding a named argument `\"m\"_a` as the last argument after what user provides in a log function. I also have a similar implementation [in open-source here](https://github.com/rbrich/xcikit/blob/eaab9305ef61d23d88bdb43a6292c964df6ad3ff/src/xci/core/log.h#L65).\r\n\r\nIt would be nice if such a logging function could have the format checked in compile-time, but I understand that the named argument support is still somewhat experimental.\nGood catch, thanks. We should make the diagnostic consistent but in the meantime you can use manual indexing as a workaround:\r\n\r\n```\r\nfmt::print(\"{0} {a}\", 1, \"a\"_a = 2);\r\n```\nThanks, I know it works with indexed parameters.\r\n\r\nLet me add some more details about the use-case: I encountered the issue when I tried to enable compile-time checks for logging in our company, where we already have many messages in code. Changing them to indexed would not practical, nor very nice to the user of such API. The named argument is used to log \"strerror\", similarly as was common with printf, i.e. original `%m` is replaced by fmt `{m}`. This is achieved by adding a named argument `\"m\"_a` as the last argument after what user provides in a log function. I also have a similar implementation [in open-source here](https://github.com/rbrich/xcikit/blob/eaab9305ef61d23d88bdb43a6292c964df6ad3ff/src/xci/core/log.h#L65).\r\n\r\nIt would be nice if such a logging function could have the format checked in compile-time, but I understand that the named argument support is still somewhat experimental.",
        "created_at": "2022-11-30T13:15:50Z",
        "version": "9.1"
    }
}