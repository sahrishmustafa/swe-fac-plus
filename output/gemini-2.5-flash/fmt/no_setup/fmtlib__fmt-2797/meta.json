{
    "task_id": "fmtlib__fmt-2797",
    "setup_info": {
        "repo_path": "github/_cache/fmtlib__fmt-2797_2025-07-04_18-38-48",
        "repo_cache_path": "github/_cache/fmtlib/fmt_cache"
    },
    "task_info": {
        "repo": "fmtlib/fmt",
        "pull_number": 2797,
        "instance_id": "fmtlib__fmt-2797",
        "issue_numbers": [
            "2796"
        ],
        "base_commit": "0cef1f819e9811209a6b110ae37fe65e70aa79b0",
        "patch": "diff --git a/include/fmt/os.h b/include/fmt/os.h\n--- a/include/fmt/os.h\n+++ b/include/fmt/os.h\n@@ -282,7 +282,7 @@ class buffered_file {\n // closing the file multiple times will cause a crash on Windows rather\n // than an exception. You can get standard behavior by overriding the\n // invalid parameter handler with _set_invalid_parameter_handler.\n-class file {\n+class FMT_API file {\n  private:\n   int fd_;  // File descriptor.\n \n@@ -304,7 +304,7 @@ class file {\n   file() noexcept : fd_(-1) {}\n \n   // Opens a file and constructs a file object representing this file.\n-  FMT_API file(cstring_view path, int oflag);\n+  file(cstring_view path, int oflag);\n \n  public:\n   file(const file&) = delete;\n@@ -321,43 +321,43 @@ class file {\n   }\n \n   // Destroys the object closing the file it represents if any.\n-  FMT_API ~file() noexcept;\n+  ~file() noexcept;\n \n   // Returns the file descriptor.\n   int descriptor() const noexcept { return fd_; }\n \n   // Closes the file.\n-  FMT_API void close();\n+  void close();\n \n   // Returns the file size. The size has signed type for consistency with\n   // stat::st_size.\n-  FMT_API long long size() const;\n+  long long size() const;\n \n   // Attempts to read count bytes from the file into the specified buffer.\n-  FMT_API size_t read(void* buffer, size_t count);\n+  size_t read(void* buffer, size_t count);\n \n   // Attempts to write count bytes from the specified buffer to the file.\n-  FMT_API size_t write(const void* buffer, size_t count);\n+  size_t write(const void* buffer, size_t count);\n \n   // Duplicates a file descriptor with the dup function and returns\n   // the duplicate as a file object.\n-  FMT_API static file dup(int fd);\n+  static file dup(int fd);\n \n   // Makes fd be the copy of this file descriptor, closing fd first if\n   // necessary.\n-  FMT_API void dup2(int fd);\n+  void dup2(int fd);\n \n   // Makes fd be the copy of this file descriptor, closing fd first if\n   // necessary.\n-  FMT_API void dup2(int fd, std::error_code& ec) noexcept;\n+  void dup2(int fd, std::error_code& ec) noexcept;\n \n   // Creates a pipe setting up read_end and write_end file objects for reading\n   // and writing respectively.\n-  FMT_API static void pipe(file& read_end, file& write_end);\n+  static void pipe(file& read_end, file& write_end);\n \n   // Creates a buffered_file object associated with this file and detaches\n   // this file object from the file.\n-  FMT_API buffered_file fdopen(const char* mode);\n+  buffered_file fdopen(const char* mode);\n };\n \n // Returns the memory page size.\n",
        "test_patch": "diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt\n--- a/test/CMakeLists.txt\n+++ b/test/CMakeLists.txt\n@@ -4,7 +4,7 @@ set(TEST_MAIN_SRC test-main.cc gtest-extra.cc gtest-extra.h util.cc)\n add_library(test-main STATIC ${TEST_MAIN_SRC})\n target_include_directories(test-main PUBLIC\n   $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>)\n-target_link_libraries(test-main gtest)\n+target_link_libraries(test-main gtest fmt)\n \n include(CheckCXXCompilerFlag)\n \n",
        "problem_statement": "Warning C4251: class 'fmt::v8::file' needs to have dll-interface\nI get the following warning with fmt 8.1.1 (or latest commit) on MSCV 2019 (when compiling as a shared lib):\r\n\r\n```\r\nC:\\Users\\dalbo\\vgc\\third\\fmt\\include\\fmt\\os.h:414: warning: C4251: 'fmt::v8::ostream::file_': class 'fmt::v8::file' needs to have dll-interface to be used by clients of class 'fmt::v8::ostream'\r\nC:\\Users\\dalbo\\vgc\\third\\fmt\\include\\fmt/os.h(287): note: see declaration of 'fmt::v8::file'\r\n```\r\n\r\nThe [class `file`](https://github.com/fmtlib/fmt/blob/0cef1f819e9811209a6b110ae37fe65e70aa79b0/include/fmt/os.h#L285) indeed isn't declared with `FMT_API`, although all its non-inline member functions are. The warning goes away if I add  `FMT_API` to the whole class, and remove all the seperate per-function `FMT_API`.\r\n\r\nWas there a good reason for not exporting the whole class, or should I make a PR exporting the whole class?\r\n\n",
        "hints_text": "Note: I don't have the warning with 7.1.3, but have the warning with 8.0.0, so something seems to have changed between those two versions causing the warning.\nOh, I see what has changed: it's the class `ostream` which is exported with `FMT_API` since 8.0.0.\nThis is the commit making the change, which apparently missed adding FMT_API to `file` too: https://github.com/fmtlib/fmt/commit/13e652939b222249073281e507848e3db9fa3e65\nCould you submit a PR to add FMT_API where necessary?",
        "created_at": "2022-03-05T16:23:35Z",
        "version": "8.1"
    }
}