Alignment of floating-point numbers is incorrect if the output is localized and the integer part is zero
Consider the following code (https://godbolt.org/z/f7czaGcdG):
```
#include <locale>
#include <fmt/printf.h>

int main(int argc, char* argv[]) {
    std::locale::global(std::locale("en_US.UTF-8"));

    fmt::print("     X = {:19.3Lf}\n", -119.921);
    fmt::print("     Y = {:19.3Lf}\n", 2'194.139);
    fmt::print("     Z = {:19.3Lf}\n", -57.639);
    fmt::print("    VX = {:19.3Lf}\n", -5.980);
    fmt::print("    VY = {:19.3Lf}\n", -2.119);
    fmt::print("    VZ = {:19.3Lf}\n", 0.295);
}
```
The last number will be misaligned in the output:
```
     X =           -119.921
     Y =          2,194.139
     Z =            -57.639
    VX =             -5.980
    VY =             -2.119
    VZ =               0.295
```
If you change the last number to `1.295`, the alignment will be correct. It is also correct if you remove `L`.
