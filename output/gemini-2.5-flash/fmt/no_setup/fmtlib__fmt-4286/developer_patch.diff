diff --git a/include/fmt/format.h b/include/fmt/format.h
--- a/include/fmt/format.h
+++ b/include/fmt/format.h
@@ -3654,6 +3654,17 @@ void vformat_to(buffer<Char>& buf, basic_string_view<Char> fmt,
   parse_format_string(
       fmt, format_handler<Char>{parse_context<Char>(fmt), {out, args, loc}});
 }
+
+template <typename Char>
+void basic_specs_copy_fill(basic_specs& dst, const basic_specs& src) {
+  if (src.fill_size() == 1 && const_check(!std::is_same<Char, char>::value)) {
+    Char fill = src.fill_unit<Char>();
+    dst.set_fill(basic_string_view<Char>(&fill, 1));
+    return;
+  }
+  dst.set_fill(basic_string_view<char>(src.fill<char>(), src.fill_size()));
+}
+
 }  // namespace detail
 
 FMT_BEGIN_EXPORT
@@ -3960,8 +3971,7 @@ template <typename T, typename Char = char> struct nested_formatter {
     write(basic_appender<Char>(buf));
     auto specs = format_specs();
     specs.width = width_;
-    specs.set_fill(
-        basic_string_view<Char>(specs_.fill<Char>(), specs_.fill_size()));
+    detail::basic_specs_copy_fill<Char>(specs, specs_);
     specs.set_align(specs_.align());
     return detail::write<Char>(
         ctx.out(), basic_string_view<Char>(buf.data(), buf.size()), specs);
diff --git a/include/fmt/std.h b/include/fmt/std.h
--- a/include/fmt/std.h
+++ b/include/fmt/std.h
@@ -184,7 +184,8 @@ FMT_END_NAMESPACE
 FMT_BEGIN_NAMESPACE
 FMT_EXPORT
 template <std::size_t N, typename Char>
-struct formatter<std::bitset<N>, Char> : nested_formatter<string_view> {
+struct formatter<std::bitset<N>, Char>
+    : nested_formatter<basic_string_view<Char>, Char> {
  private:
   // Functor because C++11 doesn't support generic lambdas.
   struct writer {
@@ -204,7 +205,7 @@ struct formatter<std::bitset<N>, Char> : nested_formatter<string_view> {
   template <typename FormatContext>
   auto format(const std::bitset<N>& bs, FormatContext& ctx) const
       -> decltype(ctx.out()) {
-    return write_padded(ctx, writer{bs});
+    return this->write_padded(ctx, writer{bs});
   }
 };
 
@@ -695,9 +696,7 @@ template <typename T, typename Char> struct formatter<std::complex<T>, Char> {
 
     auto outer_specs = format_specs();
     outer_specs.width = specs.width;
-    auto fill = specs.template fill<Char>();
-    if (fill)
-      outer_specs.set_fill(basic_string_view<Char>(fill, specs.fill_size()));
+    detail::basic_specs_copy_fill<Char>(outer_specs, specs);
     outer_specs.set_align(specs.align());
 
     specs.width = 0;
