{
    "task_id": "fmtlib__fmt-3754",
    "setup_info": {
        "repo_path": "github/_cache/fmtlib__fmt-3754_2025-07-04_18-38-48",
        "repo_cache_path": "github/_cache/fmtlib/fmt_cache"
    },
    "task_info": {
        "repo": "fmtlib/fmt",
        "pull_number": 3754,
        "instance_id": "fmtlib__fmt-3754",
        "issue_numbers": [
            "3745"
        ],
        "base_commit": "afa85e46c3fd34c377a46672b57f8a50caa5b38a",
        "patch": "diff --git a/include/fmt/core.h b/include/fmt/core.h\n--- a/include/fmt/core.h\n+++ b/include/fmt/core.h\n@@ -105,9 +105,12 @@\n #  define FMT_CONSTEXPR\n #endif\n \n-#if ((FMT_CPLUSPLUS >= 202002L) &&                            \\\n-     (!defined(_GLIBCXX_RELEASE) || _GLIBCXX_RELEASE > 9)) || \\\n-    (FMT_CPLUSPLUS >= 201709L && FMT_GCC_VERSION >= 1002)\n+#if (FMT_CPLUSPLUS >= 202002L ||                                \\\n+     (FMT_CPLUSPLUS >= 201709L && FMT_GCC_VERSION >= 1002)) &&  \\\n+    ((!defined(_GLIBCXX_RELEASE) || _GLIBCXX_RELEASE >= 10) &&  \\\n+     (!defined(_LIBCPP_VERSION) || _LIBCPP_VERSION >= 10000) && \\\n+     (!FMT_MSC_VERSION || FMT_MSC_VERSION >= 1928)) &&          \\\n+    defined(__cpp_lib_is_constant_evaluated)\n #  define FMT_CONSTEXPR20 constexpr\n #else\n #  define FMT_CONSTEXPR20\n",
        "test_patch": "diff --git a/test/compile-test.cc b/test/compile-test.cc\n--- a/test/compile-test.cc\n+++ b/test/compile-test.cc\n@@ -280,15 +280,18 @@ TEST(compile_test, compile_format_string_literal) {\n #endif\n \n // MSVS 2019 19.29.30145.0 - Support C++20 and OK.\n-// MSVS 2022 19.32.31332.0 - compile-test.cc(362,3): fatal error C1001: Internal\n-// compiler error.\n+// MSVS 2022 19.32.31332.0, 19.37.32826.1 - compile-test.cc(362,3): fatal error\n+// C1001: Internal compiler error.\n //  (compiler file\n //  'D:\\a\\_work\\1\\s\\src\\vctools\\Compiler\\CxxFE\\sl\\p1\\c\\constexpr\\constexpr.cpp',\n //  line 8635)\n-#if ((FMT_CPLUSPLUS >= 202002L) &&                           \\\n-     (!defined(_GLIBCXX_RELEASE) || _GLIBCXX_RELEASE > 9) && \\\n-     (!FMT_MSC_VERSION || FMT_MSC_VERSION < 1930)) ||        \\\n-    (FMT_CPLUSPLUS >= 201709L && FMT_GCC_VERSION >= 1002)\n+#if (FMT_CPLUSPLUS >= 202002L ||                                \\\n+     (FMT_CPLUSPLUS >= 201709L && FMT_GCC_VERSION >= 1002)) &&  \\\n+    ((!defined(_GLIBCXX_RELEASE) || _GLIBCXX_RELEASE >= 10) &&  \\\n+     (!defined(_LIBCPP_VERSION) || _LIBCPP_VERSION >= 10000) && \\\n+     (!FMT_MSC_VERSION ||                                       \\\n+      (FMT_MSC_VERSION >= 1928 && FMT_MSC_VERSION < 1930))) &&  \\\n+    defined(__cpp_lib_is_constant_evaluated)\n template <size_t max_string_length, typename Char = char> struct test_string {\n   template <typename T> constexpr bool operator==(const T& rhs) const noexcept {\n     return fmt::basic_string_view<Char>(rhs).compare(buffer) == 0;\n",
        "problem_statement": "`isfinite` declared `constexpr` for c++20\n`std::isfinite` is not declared `constexpr` before `c++23`, but `fmt::isfinite` is declared `constexpr` for `c++20`\r\n(https://en.cppreference.com/w/cpp/numeric/math/isfinite).\r\n\r\nhttps://github.com/fmtlib/fmt/blob/master/include/fmt/core.h#L108:\r\n```\r\n#if ((FMT_CPLUSPLUS >= 202002L) &&                            \\\r\n     (!defined(_GLIBCXX_RELEASE) || _GLIBCXX_RELEASE > 9)) || \\\r\n    (FMT_CPLUSPLUS >= 201709L && FMT_GCC_VERSION >= 1002)\r\n#  define FMT_CONSTEXPR20 constexpr\r\n#else\r\n#  define FMT_CONSTEXPR20\r\n#endif\r\n```\r\n\r\nhttps://github.com/fmtlib/fmt/blob/master/include/fmt/format.h#L2753:\r\n```\r\ntemplate <typename T, FMT_ENABLE_IF(std::is_floating_point<T>::value&&\r\n                                        has_isfinite<T>::value)>\r\nFMT_CONSTEXPR20 bool isfinite(T value) {\r\n  constexpr T inf = T(std::numeric_limits<double>::infinity());\r\n  if (is_constant_evaluated())\r\n    return !detail::isnan(value) && value < inf && value > -inf;\r\n  return std::isfinite(value);\r\n}\r\n```\r\n\r\nResulting compilation error:\r\n```\r\nexternal/fmtlib/test/format-test.cc:94:24: error: constexpr variable 'result' must be initialized by a constant expression\r\n  FMT_CONSTEXPR20 auto result = isfinite(Float(limits::infinity()));\r\n                       ^        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nexternal/fmtlib/test/format-test.cc:103:3: note: in instantiation of function template specialization 'check_isfinite<double>' requested here\r\n  check_isfinite<double>();\r\n  ^\r\nexternal/fmtlib/include/fmt/format.h:2751:10: note: non-constexpr function 'isfinite<double>' cannot be used in a constant expression\r\n  return std::isfinite(value);\r\n         ^\r\nexternal/fmtlib/test/format-test.cc:94:33: note: in call to 'isfinite(INF)'\r\n  FMT_CONSTEXPR20 auto result = isfinite(Float(limits::infinity()));\r\n                                ^\r\nexternal/libcxx/include/math.h:439:1: note: declared here\r\nisfinite(_A1 __lcpp_x) _NOEXCEPT\r\n^\r\n1 error generated.\r\n22:46:14 ninja failed with: exit status 1\r\n```\r\n\r\nCompiler version (Android :shrug: )\r\n```\r\nAndroid (11039501, +pgo, +bolt, +lto, +mlgo, based on r498229b) clang version 17.0.4 (https://android.googlesource.com/toolchain/llvm-project e34ed7d63863b45858e74126edaa738e75887800)\r\nTarget: x86_64-unknown-linux-gnu\r\nThread model: posix\r\nInstalledDir: /usr/local/google/home/henrichataing/Projects/android/aosp-master/prebuilts/clang/host/linux-x86/clang-r498229b/bin\r\n```\n",
        "hints_text": "Locally fixed by defining\r\n```\r\n#if (FMT_CPLUSPLUS >= 202302L)\r\n#  define FMT_CONSTEXPR23 constexpr\r\n#else\r\n#  define FMT_CONSTEXPR23\r\n#endif\r\n```\r\nand using this define in the declaration of `isfinite`\r\n```\r\ntemplate <typename T, FMT_ENABLE_IF(std::is_floating_point<T>::value&&\r\n                                        has_isfinite<T>::value)>\r\nFMT_CONSTEXPR23 bool isfinite(T value) {\r\n  constexpr T inf = T(std::numeric_limits<double>::infinity());\r\n  if (is_constant_evaluated())\r\n    return !detail::isnan(value) && value < inf && value > -inf;\r\n  return std::isfinite(value);\r\n}\r\n```\r\n\r\nI can propose a patch if you are happy with this solution.\n> I can propose a patch if you are happy with this solution.\r\n\r\nPlease do.\nWhich version of ``libc++`` or ``libstdc++`` are you using?\r\n\r\n``std::isfinite`` is only used in non-constexpr contexts.\r\n\r\nIn a constexpr context, the condition and code must be executed:\r\n```c++\r\nif (is_constant_evaluated())\r\n  return !detail::isnan(value) && value < inf && value > -inf;\r\n```\r\n\nWhen using Clang-17 and libc++-17 in c++20 mode, compilation and tests pass without errors:\r\n\r\nhttps://github.com/phprus/fmt/actions/runs/7149828208/job/19472458664\r\nhttps://github.com/phprus/fmt/actions/runs/7149828208/job/19472458718\nWill confirm the details on monday, but from my knowledge: the code is compiled with `std=gnu++20` but the library supports `c++17` only\nTurns out the standard library does not provide `std::is_constant_evaluated`, or at least it is not in context, thus making the function implementation non constexpr compatible. \r\nThat's the what we get for having different versions for the compiler and stl  :crying_cat_face: ",
        "created_at": "2023-12-13T13:07:36Z",
        "version": "10.1"
    }
}