{
    "task_id": "fmtlib__fmt-1171",
    "setup_info": {
        "repo_path": "github/_cache/fmtlib__fmt-1171_2025-07-07_22-11-05",
        "repo_cache_path": "github/_cache/fmtlib/fmt_cache"
    },
    "task_info": {
        "repo": "fmtlib/fmt",
        "pull_number": 1171,
        "instance_id": "fmtlib__fmt-1171",
        "issue_numbers": [
            "1169"
        ],
        "base_commit": "87fbc6f7566e4d3266bd3a2cd69f6c90e1aefa5d",
        "patch": "diff --git a/include/fmt/prepare.h b/include/fmt/prepare.h\n--- a/include/fmt/prepare.h\n+++ b/include/fmt/prepare.h\n@@ -217,7 +217,8 @@ class prepared_format {\n   std::basic_string<char_type> format(const Args&... args) const {\n     basic_memory_buffer<char_type> buffer;\n     typedef back_insert_range<internal::buffer<char_type>> range;\n-    this->vformat_to(range(buffer), make_args_checked(format_, args...));\n+    this->vformat_to(range(buffer), basic_format_args<context>{\n+                                        make_args_checked(format_, args...)});\n     return to_string(buffer);\n   }\n \n@@ -226,7 +227,8 @@ class prepared_format {\n       std::back_insert_iterator<Container> out, const Args&... args) const {\n     internal::container_buffer<Container> buffer(internal::get_container(out));\n     typedef back_insert_range<internal::buffer<char_type>> range;\n-    this->vformat_to(range(buffer), make_args_checked(format_, args...));\n+    this->vformat_to(range(buffer), basic_format_args<context>{\n+                                        make_args_checked(format_, args...)});\n     return out;\n   }\n \n@@ -242,18 +244,20 @@ class prepared_format {\n   inline typename buffer_context<char_type>::iterator format_to(\n       basic_memory_buffer<char_type, SIZE>& buf, const Args&... args) const {\n     typedef back_insert_range<internal::buffer<char_type>> range;\n-    return this->vformat_to(range(buf), make_args_checked(format_, args...));\n+    return this->vformat_to(\n+        range(buf),\n+        basic_format_args<context>{make_args_checked(format_, args...)});\n   }\n \n  private:\n   typedef buffer_context<char_type> context;\n \n-  template <typename Range>\n-  typename context::iterator vformat_to(Range out,\n-                                        basic_format_args<context> args) const {\n+  template <typename Range, typename Context>\n+  auto vformat_to(Range out, basic_format_args<Context> args) const ->\n+      typename Context::iterator {\n     const auto format_view = internal::to_string_view(format_);\n     basic_parse_context<char_type> parse_ctx(format_view);\n-    context ctx(out.begin(), args);\n+    Context ctx(out.begin(), args);\n \n     const auto& parts = parts_provider_.parts();\n     for (auto part_it = parts.begin(); part_it != parts.end(); ++part_it) {\n",
        "test_patch": "diff --git a/test/prepare-test.cc b/test/prepare-test.cc\n--- a/test/prepare-test.cc\n+++ b/test/prepare-test.cc\n@@ -475,7 +475,7 @@ TEST(PrepareTest, CopyPreparedFormat_InternalStringViewsAreNotInvalidated) {\n   }\n }\n \n-TEST(PepareTest, ReusedPreparedFormatType) {\n+TEST(PrepareTest, ReusedPreparedFormatType) {\n   typedef fmt::prepared_format<std::string, int>::type prepared_format;\n \n   prepared_format prepared = fmt::prepare<prepared_format>(\"The {} is {}.\");\n@@ -637,3 +637,58 @@ TEST(PrepareTest, PassUserTypeFormat) {\n   const auto prepared = fmt::prepare<int>(user_format(\"test {}\"));\n   EXPECT_EQ(\"test 42\", prepared.format(42));\n }\n+\n+TEST(PrepareTest, FormatToArrayOfChars) {\n+  char buffer[32] = {0};\n+  const auto prepared = fmt::prepare<int>(\"4{}\");\n+  prepared.format_to(buffer, 2);\n+  EXPECT_EQ(std::string(\"42\"), buffer);\n+  wchar_t wbuffer[32] = {0};\n+  const auto wprepared = fmt::prepare<int>(L\"4{}\");\n+  wprepared.format_to(wbuffer, 2);\n+  EXPECT_EQ(std::wstring(L\"42\"), wbuffer);\n+}\n+\n+TEST(PrepareTest, FormatToIterator) {\n+  std::string s(2, ' ');\n+  const auto prepared = fmt::prepare<int>(\"4{}\");\n+  prepared.format_to(s.begin(), 2);\n+  EXPECT_EQ(\"42\", s);\n+  std::wstring ws(2, L' ');\n+  const auto wprepared = fmt::prepare<int>(L\"4{}\");\n+  wprepared.format_to(ws.begin(), 2);\n+  EXPECT_EQ(L\"42\", ws);\n+}\n+\n+TEST(PrepareTest, FormatToBackInserter) {\n+  std::string s;\n+  const auto prepared = fmt::prepare<int>(\"4{}\");\n+  prepared.format_to(std::back_inserter(s), 2);\n+  EXPECT_EQ(\"42\", s);\n+  std::wstring ws;\n+  const auto wprepared = fmt::prepare<int>(L\"4{}\");\n+  wprepared.format_to(std::back_inserter(ws), 2);\n+  EXPECT_EQ(L\"42\", ws);\n+}\n+\n+TEST(PrepareTest, FormatToBasicMemoryBuffer) {\n+  fmt::basic_memory_buffer<char, 100> buffer;\n+  const auto prepared = fmt::prepare<int>(\"4{}\");\n+  prepared.format_to(buffer, 2);\n+  EXPECT_EQ(\"42\", to_string(buffer));\n+  fmt::basic_memory_buffer<wchar_t, 100> wbuffer;\n+  const auto wprepared = fmt::prepare<int>(L\"4{}\");\n+  wprepared.format_to(wbuffer, 2);\n+  EXPECT_EQ(L\"42\", to_string(wbuffer));\n+}\n+\n+TEST(PrepareTest, FormatToMemoryBuffer) {\n+  fmt::memory_buffer buffer;\n+  const auto prepared = fmt::prepare<int>(\"4{}\");\n+  prepared.format_to(buffer, 2);\n+  EXPECT_EQ(\"42\", to_string(buffer));\n+  fmt::wmemory_buffer wbuffer;\n+  const auto wprepared = fmt::prepare<int>(L\"4{}\");\n+  wprepared.format_to(wbuffer, 2);\n+  EXPECT_EQ(L\"42\", to_string(wbuffer));\n+}\n",
        "problem_statement": "fmt::prepare fails to compile formatting to an array of chars\nIt's reproducible by such a simple code:\r\n```cpp\r\n#include <fmt/prepare.h>\r\n\r\nint main()\r\n{\r\n    char buffer[32];\r\n    auto prepared = fmt::prepare<int>(\"12{}\");\r\n    auto formatted = prepared.format_to(buffer, 3);\r\n}\r\n```\r\n\r\nSee an [example](https://gcc.godbolt.org/#g:!((g:!((g:!((h:codeEditor,i:(j:1,lang:c%2B%2B,source:'%23include+%3Cfmt/prepare.h%3E%0A%0Aint+main()%0A%7B%0A++++char+buffer%5B32%5D%3B%0A++++auto+prepared+%3D+fmt::prepare%3Cint%3E(%2212%7B%7D%22)%3B%0A++++auto+formatted+%3D+prepared.format_to(buffer,+3)%3B%0A%7D%0A'),l:'5',n:'0',o:'C%2B%2B+source+%231',t:'0')),k:34.12334812716754,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:clang800,filters:(b:'0',binary:'1',commentOnly:'0',demangle:'0',directives:'0',execute:'1',intel:'0',libraryCode:'1',trim:'1'),lang:c%2B%2B,libs:!((name:boost,ver:'168'),(name:fmt,ver:trunk)),options:'-std%3Dgnu%2B%2B17+-O2',source:1),l:'5',n:'0',o:'x86-64+clang+8.0.0+(Editor+%231,+Compiler+%231)+C%2B%2B',t:'0')),k:28.69276284992644,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:output,i:(compiler:1,editor:1,wrap:'1'),l:'5',n:'0',o:'%231+with+x86-64+clang+8.0.0',t:'0')),k:37.183889022906065,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4)\n",
        "hints_text": "",
        "created_at": "2019-05-21T19:10:58Z",
        "version": "5.3"
    }
}