{
    "task_id": "fmtlib__fmt-1663",
    "setup_info": {
        "repo_path": "github/_cache/fmtlib__fmt-1663_2025-07-04_18-45-21",
        "repo_cache_path": "github/_cache/fmtlib/fmt_cache"
    },
    "task_info": {
        "repo": "fmtlib/fmt",
        "pull_number": 1663,
        "instance_id": "fmtlib__fmt-1663",
        "issue_numbers": [
            "1655"
        ],
        "base_commit": "8d9d528bf52c60864802844e8acf16db09dae19a",
        "patch": "diff --git a/include/fmt/core.h b/include/fmt/core.h\n--- a/include/fmt/core.h\n+++ b/include/fmt/core.h\n@@ -629,6 +629,7 @@ using wparse_context FMT_DEPRECATED_ALIAS = basic_format_parse_context<wchar_t>;\n \n template <typename Context> class basic_format_arg;\n template <typename Context> class basic_format_args;\n+template <typename Context> class dynamic_format_arg_store;\n \n // A formatter for objects of type T.\n template <typename T, typename Char = char, typename Enable = void>\n@@ -1131,6 +1132,7 @@ template <typename Context> class basic_format_arg {\n \n   friend class basic_format_args<Context>;\n   friend class internal::arg_map<Context>;\n+  friend class dynamic_format_arg_store<Context>;\n \n   using char_type = typename Context::char_type;\n \n@@ -1269,10 +1271,14 @@ inline basic_format_arg<Context> make_arg(const T& value) {\n }\n \n template <typename T> struct is_reference_wrapper : std::false_type {};\n-\n template <typename T>\n struct is_reference_wrapper<std::reference_wrapper<T>> : std::true_type {};\n \n+template <typename T> const T& unwrap(const T& v) { return v; }\n+template <typename T> const T& unwrap(const std::reference_wrapper<T>& v) {\n+  return static_cast<const T&>(v);\n+}\n+\n class dynamic_arg_list {\n   // Workaround for clang's -Wweak-vtables. Unlike for regular classes, for\n   // templates it doesn't complain about inability to deduce single translation\n@@ -1419,6 +1425,50 @@ inline format_arg_store<Context, Args...> make_format_args(\n   return {args...};\n }\n \n+namespace internal {\n+template <typename Char> struct named_arg_base {\n+  const Char* name;\n+\n+  // Serialized value<context>.\n+  mutable char data[sizeof(basic_format_arg<buffer_context<Char>>)];\n+\n+  named_arg_base(const Char* nm) : name(nm) {}\n+\n+  template <typename Context> basic_format_arg<Context> deserialize() const {\n+    basic_format_arg<Context> arg;\n+    std::memcpy(&arg, data, sizeof(basic_format_arg<Context>));\n+    return arg;\n+  }\n+};\n+\n+struct view {};\n+\n+template <typename T, typename Char>\n+struct named_arg : view, named_arg_base<Char> {\n+  const T& value;\n+\n+  named_arg(const Char* name, const T& val)\n+      : named_arg_base<Char>(name), value(val) {}\n+};\n+\n+}  // namespace internal\n+\n+/**\n+  \\rst\n+  Returns a named argument to be used in a formatting function. It should only\n+  be used in a call to a formatting function.\n+\n+  **Example**::\n+\n+    fmt::print(\"Elapsed time: {s:.2f} seconds\", fmt::arg(\"s\", 1.23));\n+  \\endrst\n+ */\n+template <typename Char, typename T>\n+inline internal::named_arg<T, Char> arg(const Char* name, const T& arg) {\n+  static_assert(!internal::is_named_arg<T>(), \"nested named arguments\");\n+  return {name, arg};\n+}\n+\n /**\n   \\rst\n   A dynamic version of `fmt::format_arg_store<>`.\n@@ -1449,8 +1499,7 @@ class dynamic_format_arg_store\n                 std::is_same<T, internal::std_string_view<char_type>>::value ||\n                 (mapped_type != internal::type::cstring_type &&\n                  mapped_type != internal::type::string_type &&\n-                 mapped_type != internal::type::custom_type &&\n-                 mapped_type != internal::type::named_arg_type))\n+                 mapped_type != internal::type::custom_type))\n     };\n   };\n \n@@ -1460,6 +1509,7 @@ class dynamic_format_arg_store\n \n   // Storage of basic_format_arg must be contiguous.\n   std::vector<basic_format_arg<Context>> data_;\n+  std::vector<internal::named_arg_info<char_type>> named_info_;\n \n   // Storage of arguments not fitting into basic_format_arg must grow\n   // without relocation because items in data_ refer to it.\n@@ -1468,13 +1518,38 @@ class dynamic_format_arg_store\n   friend class basic_format_args<Context>;\n \n   unsigned long long get_types() const {\n-    return internal::is_unpacked_bit | data_.size();\n+    return internal::is_unpacked_bit | data_.size() |\n+           (named_info_.empty() ? 0ULL\n+                                : static_cast<unsigned long long>(\n+                                      internal::has_named_args_bit));\n+  }\n+\n+  const basic_format_arg<Context>* data() const {\n+    return named_info_.empty() ? data_.data() : data_.data() + 1;\n   }\n \n   template <typename T> void emplace_arg(const T& arg) {\n     data_.emplace_back(internal::make_arg<Context>(arg));\n   }\n \n+  template <typename T>\n+  void emplace_arg(const internal::named_arg<T, char_type>& arg) {\n+    if (named_info_.empty()) {\n+      constexpr const internal::named_arg_info<char_type>* zero_ptr{nullptr};\n+      data_.insert(data_.begin(), {zero_ptr, 0});\n+    }\n+    data_.emplace_back(\n+        internal::make_arg<Context>(internal::unwrap(arg.value)));\n+    auto pop_one = [](std::vector<basic_format_arg<Context>>* data) {\n+      data->pop_back();\n+    };\n+    std::unique_ptr<std::vector<basic_format_arg<Context>>, decltype(pop_one)>\n+        guard{&data_, pop_one};\n+    named_info_.push_back({arg.name, static_cast<int>(data_.size() - 2u)});\n+    data_[0].value_.named_args = {named_info_.data(), named_info_.size()};\n+    guard.release();\n+  }\n+\n  public:\n   /**\n     \\rst\n@@ -1500,19 +1575,54 @@ class dynamic_format_arg_store\n     if (internal::const_check(need_copy<T>::value))\n       emplace_arg(dynamic_args_.push<stored_type<T>>(arg));\n     else\n-      emplace_arg(arg);\n+      emplace_arg(internal::unwrap(arg));\n   }\n \n   /**\n+    \\rst\n     Adds a reference to the argument into the dynamic store for later passing to\n-    a formating function.\n+    a formating function. Supports named arguments wrapped in\n+    std::reference_wrapper (via std::ref()/std::cref()).\n+\n+    **Example**::\n+      fmt::dynamic_format_arg_store<fmt::format_context> store;\n+      char str[] = \"1234567890\";\n+      store.push_back(std::cref(str));\n+      int a1_val{42};\n+      auto a1 = fmt::arg(\"a1_\", a1_val);\n+      store.push_back(std::cref(a1));\n+\n+      // Changing str affects the output but only for string and custom types.\n+      str[0] = 'X';\n+\n+      std::string result = fmt::vformat(\"{} and {a1_}\");\n+      assert(result == \"X234567890 and 42\");\n+    \\endrst\n   */\n   template <typename T> void push_back(std::reference_wrapper<T> arg) {\n     static_assert(\n-        need_copy<T>::value,\n+        internal::is_named_arg<typename std::remove_cv<T>::type>::value ||\n+            need_copy<T>::value,\n         \"objects of built-in types and string views are always copied\");\n     emplace_arg(arg.get());\n   }\n+\n+  /**\n+    Adds named argument into the dynamic store for later passing to a formating\n+    function. std::reference_wrapper is supported to avoid copying of the\n+    argument.\n+  */\n+  template <typename T>\n+  void push_back(const internal::named_arg<T, char_type>& arg) {\n+    const char_type* arg_name =\n+        dynamic_args_.push<std::basic_string<char_type>>(arg.name).c_str();\n+    if (internal::const_check(need_copy<T>::value)) {\n+      emplace_arg(\n+          fmt::arg(arg_name, dynamic_args_.push<stored_type<T>>(arg.value)));\n+    } else {\n+      emplace_arg(fmt::arg(arg_name, arg.value));\n+    }\n+  }\n };\n \n /**\n@@ -1597,7 +1707,7 @@ template <typename Context> class basic_format_args {\n    \\endrst\n    */\n   FMT_INLINE basic_format_args(const dynamic_format_arg_store<Context>& store)\n-      : basic_format_args(store.get_types(), store.data_.data()) {}\n+      : basic_format_args(store.get_types(), store.data()) {}\n \n   /**\n    \\rst\n@@ -1659,31 +1769,6 @@ template <typename Container>\n struct is_contiguous_back_insert_iterator<std::back_insert_iterator<Container>>\n     : is_contiguous<Container> {};\n \n-template <typename Char> struct named_arg_base {\n-  const Char* name;\n-\n-  // Serialized value<context>.\n-  mutable char data[sizeof(basic_format_arg<buffer_context<Char>>)];\n-\n-  named_arg_base(const Char* nm) : name(nm) {}\n-\n-  template <typename Context> basic_format_arg<Context> deserialize() const {\n-    basic_format_arg<Context> arg;\n-    std::memcpy(&arg, data, sizeof(basic_format_arg<Context>));\n-    return arg;\n-  }\n-};\n-\n-struct view {};\n-\n-template <typename T, typename Char>\n-struct named_arg : view, named_arg_base<Char> {\n-  const T& value;\n-\n-  named_arg(const Char* name, const T& val)\n-      : named_arg_base<Char>(name), value(val) {}\n-};\n-\n // Reports a compile-time error if S is not a valid format string.\n template <typename..., typename S, FMT_ENABLE_IF(!is_compile_string<S>::value)>\n FMT_INLINE void check_format_string(const S&) {\n@@ -1727,22 +1812,6 @@ inline void vprint_mojibake(std::FILE*, string_view, format_args) {}\n #endif\n }  // namespace internal\n \n-/**\n-  \\rst\n-  Returns a named argument to be used in a formatting function. It should only\n-  be used in a call to a formatting function.\n-\n-  **Example**::\n-\n-    fmt::print(\"Elapsed time: {s:.2f} seconds\", fmt::arg(\"s\", 1.23));\n-  \\endrst\n- */\n-template <typename Char, typename T>\n-inline internal::named_arg<T, Char> arg(const Char* name, const T& arg) {\n-  static_assert(!internal::is_named_arg<T>(), \"nested named arguments\");\n-  return {name, arg};\n-}\n-\n /** Formats a string and writes the output to ``out``. */\n // GCC 8 and earlier cannot handle std::back_insert_iterator<Container> with\n // vformat_to<ArgFormatter>(...) overload, so SFINAE on iterator type instead.\n",
        "test_patch": "diff --git a/test/core-test.cc b/test/core-test.cc\n--- a/test/core-test.cc\n+++ b/test/core-test.cc\n@@ -456,6 +456,66 @@ TEST(FormatDynArgsTest, CustomFormat) {\n   EXPECT_EQ(\"cust=0 and cust=1 and cust=3\", result);\n }\n \n+TEST(FormatDynArgsTest, NamedInt) {\n+  fmt::dynamic_format_arg_store<fmt::format_context> store;\n+  store.push_back(fmt::arg(\"a1\", 42));\n+  std::string result = fmt::vformat(\"{a1}\", store);\n+  EXPECT_EQ(\"42\", result);\n+}\n+\n+TEST(FormatDynArgsTest, NamedStrings) {\n+  fmt::dynamic_format_arg_store<fmt::format_context> store;\n+  char str[]{\"1234567890\"};\n+  store.push_back(fmt::arg(\"a1\", str));\n+  store.push_back(fmt::arg(\"a2\", std::cref(str)));\n+  str[0] = 'X';\n+\n+  std::string result = fmt::vformat(\n+      \"{a1} and {a2}\",\n+      store);\n+\n+  EXPECT_EQ(\"1234567890 and X234567890\", result);\n+}\n+\n+TEST(FormatDynArgsTest, NamedArgByRef) {\n+  fmt::dynamic_format_arg_store<fmt::format_context> store;\n+\n+  // Note: fmt::arg() constructs an object which holds a reference\n+  // to its value. It's not an aggregate, so it doesn't extend the\n+  // reference lifetime. As a result, it's a very bad idea passing temporary\n+  // as a named argument value. Only GCC with optimization level >0\n+  // complains about this.\n+  //\n+  // A real life usecase is when you have both name and value alive\n+  // guarantee their lifetime and thus don't want them to be copied into\n+  // storages.\n+  int a1_val{42};\n+  auto a1 = fmt::arg(\"a1_\", a1_val);\n+  store.push_back(\"abc\");\n+  store.push_back(1.5f);\n+  store.push_back(std::cref(a1));\n+\n+  std::string result = fmt::vformat(\n+      \"{a1_} and {} and {} and {}\",\n+      store);\n+\n+  EXPECT_EQ(\"42 and abc and 1.5 and 42\", result);\n+}\n+\n+TEST(FormatDynArgsTest, NamedCustomFormat) {\n+  fmt::dynamic_format_arg_store<fmt::format_context> store;\n+  custom_type c{};\n+  store.push_back(fmt::arg(\"c1\", c));\n+  ++c.i;\n+  store.push_back(fmt::arg(\"c2\", c));\n+  ++c.i;\n+  store.push_back(fmt::arg(\"c_ref\", std::cref(c)));\n+  ++c.i;\n+\n+  std::string result = fmt::vformat(\"{c1} and {c2} and {c_ref}\", store);\n+  EXPECT_EQ(\"cust=0 and cust=1 and cust=3\", result);\n+}\n+\n struct copy_throwable {\n   copy_throwable() {}\n   copy_throwable(const copy_throwable&) { throw \"deal with it\"; }\n",
        "problem_statement": "Dynamic construction of *named* argument lists?\nHey, I noticed in the latest release that there is now a `dynamic_format_arg_store`, but it doesn't support named arguments. Is there a plan to add such capability? I'm thinking of something along the lines of:\r\n```\r\nfmt::dynamic_format_named_argument_store<fmt::format_context> store;\r\nstore.emplace_back(\"name\", 123);\r\nstore.emplace_back(\"another_name\", 456);\r\nfmt::vprint(\"{name} + {another_name}\", store);\r\n```\r\nWould this be hard to implement? I can take a crack at it given some starting guidance.\n",
        "hints_text": "",
        "created_at": "2020-05-03T19:39:17Z",
        "version": "6.2"
    }
}