{
    "task_id": "fmtlib__fmt-3610",
    "setup_info": {
        "repo_path": "github/_cache/fmtlib__fmt-3610_2025-07-08_07-01-21",
        "repo_cache_path": "github/_cache/fmtlib/fmt_cache"
    },
    "task_info": {
        "repo": "fmtlib/fmt",
        "pull_number": 3610,
        "instance_id": "fmtlib__fmt-3610",
        "issue_numbers": [
            "3607"
        ],
        "base_commit": "0bffed89579ac8a210379fd640569e4b75fe28c8",
        "patch": "diff --git a/include/fmt/format.h b/include/fmt/format.h\n--- a/include/fmt/format.h\n+++ b/include/fmt/format.h\n@@ -152,7 +152,10 @@ FMT_END_NAMESPACE\n \n #ifndef FMT_USE_USER_DEFINED_LITERALS\n // EDG based compilers (Intel, NVIDIA, Elbrus, etc), GCC and MSVC support UDLs.\n-#  if (FMT_HAS_FEATURE(cxx_user_literals) || FMT_GCC_VERSION >= 407 || \\\n+//\n+// GCC before 4.9 requires a space in `operator\"\" _a` which is invalid in later\n+// compiler versions.\n+#  if (FMT_HAS_FEATURE(cxx_user_literals) || FMT_GCC_VERSION >= 409 || \\\n        FMT_MSC_VERSION >= 1900) &&                                     \\\n       (!defined(__EDG_VERSION__) || __EDG_VERSION__ >= /* UDL feature */ 480)\n #    define FMT_USE_USER_DEFINED_LITERALS 1\n@@ -4428,7 +4431,7 @@ template <detail_exported::fixed_string Str> constexpr auto operator\"\"_a() {\n   return detail::udl_arg<char_t, sizeof(Str.data) / sizeof(char_t), Str>();\n }\n #  else\n-constexpr auto operator\"\" _a(const char* s, size_t) -> detail::udl_arg<char> {\n+constexpr auto operator\"\"_a(const char* s, size_t) -> detail::udl_arg<char> {\n   return {s};\n }\n #  endif\n",
        "test_patch": "diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt\n--- a/test/CMakeLists.txt\n+++ b/test/CMakeLists.txt\n@@ -175,7 +175,12 @@ if (FMT_PEDANTIC)\n endif ()\n \n # These tests are disabled on Windows because they take too long.\n-if (FMT_PEDANTIC AND NOT WIN32)\n+# They are disabled on GCC < 4.9 because it can not parse UDLs without\n+# a space after `operator\"\"` but that is an incorrect syntax for any more\n+# modern compiler.\n+if (FMT_PEDANTIC AND NOT WIN32 AND NOT (\n+    CMAKE_CXX_COMPILER_ID MATCHES \"GNU\" AND\n+    CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.9))\n   # Test if incorrect API usages produce compilation error.\n   add_test(compile-error-test ${CMAKE_CTEST_COMMAND}\n     --build-and-test\n",
        "problem_statement": "Clang 18 rejects `operator\"\" _a`\n```\r\nthird_party/fmt/include/fmt/format.h:4417:27: warning: identifier '_a' preceded by whitespace in a literal operator declaration is deprecated [-Wdeprecated-literal-operator]\r\n 4417 | constexpr auto operator\"\" _a(const char* s, size_t) -> detail::udl_arg<char> {\r\n      |                ~~~~~~~~~~~^~\r\n      |                operator\"\"_a\r\n1 warning generated.\r\n```\r\n\r\nThe fix is to change `operator\"\" _a` to `operator\"\"_a`\n",
        "hints_text": "Could you provide a godbolt repro?\nIt's trivial to make a repro of the warning outside of fmtlib but I am having trouble getting format.h to create that UDL I guess and I am not sure why.\r\n\r\nhttps://godbolt.org/z/WbaoTT9KP\r\n\r\nHere's a CI run where I found the warning trip: https://github.com/chromium/subspace/actions/runs/5947977722/job/16130912813?pr=330\r\n\r\nIt will only occur when `FMT_USE_NONTYPE_TEMPLATE_ARGS` is false. The UDL when true has no whitespace, which is correct syntax.\r\nhttps://github.com/fmtlib/fmt/blob/0bffed89579ac8a210379fd640569e4b75fe28c8/include/fmt/format.h#L4425-L4434\r\n\r\nYou would think `FMT_USE_NONTYPE_TEMPLATE_ARGS` would be true with clang 18:\r\nhttps://github.com/fmtlib/fmt/blob/0bffed89579ac8a210379fd640569e4b75fe28c8/include/fmt/core.h#L234-L243\r\n\r\nI am compiling with C++20 enabled, I am not sure what is different on Github CI vs Godbolt. Any ideas?\ngodbolt might be hiding warnings from the library but your repro is good enough. Unfortunately per discussion on the PR gcc requires a space there so I'm not sure we can do anything about it.\nI guess one options would be to only enable UDLs on gcc 4.9 or higher in https://github.com/fmtlib/fmt/blob/0bffed89579ac8a210379fd640569e4b75fe28c8/include/fmt/format.h#L155\r\n\r\n\nI am building clang trunk on my mac to see if I can reproduce there, and if so, explain why or if `FMT_USE_NONTYPE_TEMPLATE_ARGS` is indeed false.\nNo luck, clang ToT on Mac is not hitting the warning.\nI did some testing in CI: https://github.com/chromium/subspace/actions/runs/5957000756/job/16158898370?pr=330\r\n\r\n```cpp\r\n#if defined(__cpp_nontype_template_args)\r\n#warning __cpp_nontype_template_args\r\n#endif\r\n#if FMT_GCC_VERSION >= 903\r\n#warning FMT_GCC_VERSION >= 903\r\n#endif\r\n#if FMT_CPLUSPLUS >= 201709L\r\n#warning FMT_CPLUSPLUS >= 201709L\r\n#endif\r\n#if __cpp_nontype_template_args >= 201911L\r\n#warning __cpp_nontype_template_args >= 201911L\r\n#endif\r\n#if defined(__NVCOMPILER)\r\n#warning __NVCOMPILER\r\n#endif\r\n#if defined(__LCC__)\r\n#warning __LCC__\r\n#endif\r\n```\r\n\r\nPrints\r\n```\r\n/home/runner/work/subspace/subspace/sus/lib/lib.cc:25:2: error: __cpp_nontype_template_args [-Werror,-W#warnings]\r\n   25 | #warning __cpp_nontype_template_args\r\n      |  ^\r\n/home/runner/work/subspace/subspace/sus/lib/lib.cc:31:2: error: FMT_CPLUSPLUS >= 201709L [-Werror,-W#warnings]\r\n   31 | #warning FMT_CPLUSPLUS >= 201709L\r\n      |  ^\r\n2 errors generated.\r\n[15/185 1.0/sec] Building CXX object sus/CMakeFiles/subspace.dir/lib/lib.cc.o\r\n/home/runner/work/subspace/subspace/sus/lib/lib.cc:25:2: warning: __cpp_nontype_template_args [-W#warnings]\r\n   25 | #warning __cpp_nontype_template_args\r\n      |  ^\r\n/home/runner/work/subspace/subspace/sus/lib/lib.cc:31:2: warning: FMT_CPLUSPLUS >= 201709L [-W#warnings]\r\n   31 | #warning FMT_CPLUSPLUS >= 201709L\r\n      |  ^\r\n2 warnings generated.\r\n```\r\n\r\nMeaning __cpp_nontype_template_args is defined but is not >= 201911L which is why it's going into the other path there.\nI guess because it is not done. https://github.com/llvm/llvm-project/issues/54297#issuecomment-1578920133\r\n\r\nSo they started warning on the operator\"\" syntax but the branch choices made in fmtlib then clash with gcc. Even though I think it is implemented enough for fmtlib's use anyway. I wonder if maybe hardcoding clang >= 16 or something to go the path without the warning?\nI got wondering if `__cpp_nontype_template_args >= 201911L` is false on my CI what is happening on my mac. It is also false there, and the `operator\"\" _a` version is being used. For some reason `-Wdeprecated-literal-operator` is enabled in the clang binaries I pull from llvm, but in the clang I built myself, it's not enabled by default. Passing it on the command line also hits the warrning:\r\n\r\n```\r\n$HOME/s/llvm/install/bin/clang++ -DFMT_SHARED -I$HOME/s/subspace -I$HOME/s/subspace/third_party/googletest -I$HOME/s/subspace/third_party/fmt/include -Is/subspace/third_party/nanobench/src/include -isystem $HOME/s/subspace/third_party/googletest/googletest/include -isystem $HOME/s/subspace/third_party/googletest/googletest -isystem /Library/Developer/CommandLineTools/SDKs/MacOSX14.0.sdk/usr/include/c++/v1 -isystem s/llvm/install-18/lib/clang/18/include -isystem /Library/Developer/CommandLineTools/SDKs/MacOSX14.0.sdk/usr/include -g -std=gnu++20 -arch arm64 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX14.0.sdk -mmacosx-version-min=13.4 -fno-rtti -Wno-nullability-completeness -Werror -MD -MT bench/CMakeFiles/bench.dir/__/sus/lib/lib.cc.o -MF bench/CMakeFiles/bench.dir/__/sus/lib/lib.cc.o.d -o bench/CMakeFiles/bench.dir/__/sus/lib/lib.cc.o -c $HOME/s/subspace/sus/lib/lib.cc -Wdeprecated-literal-operator\r\nIn file included from $HOME/s/subspace/sus/lib/lib.cc:21:\r\nIn file included from $HOME/s/subspace/sus/num/signed_integer.h:25:\r\n$HOME/s/subspace/third_party/fmt/include/fmt/format.h:4417:27: error: identifier '_a' preceded by whitespace in a literal operator declaration is deprecated [-Werror,-Wdeprecated-literal-operator]\r\n 4417 | constexpr auto operator\"\" _a(const char* s, size_t) -> detail::udl_arg<char> {\r\n      |                ~~~~~~~~~~~^~\r\n      |                operator\"\"_a",
        "created_at": "2023-08-24T02:25:54Z",
        "version": "10.1"
    }
}