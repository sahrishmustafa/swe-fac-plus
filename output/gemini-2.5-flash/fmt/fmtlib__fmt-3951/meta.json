{
    "task_id": "fmtlib__fmt-3951",
    "setup_info": {
        "repo_path": "github/_cache/fmtlib__fmt-3951_2025-07-08_07-01-21",
        "repo_cache_path": "github/_cache/fmtlib/fmt_cache"
    },
    "task_info": {
        "repo": "fmtlib/fmt",
        "pull_number": 3951,
        "instance_id": "fmtlib__fmt-3951",
        "issue_numbers": [
            "3948"
        ],
        "base_commit": "17062a0c9b480e2fa70427050803245197c6f789",
        "patch": "diff --git a/include/fmt/format.h b/include/fmt/format.h\n--- a/include/fmt/format.h\n+++ b/include/fmt/format.h\n@@ -2695,7 +2695,7 @@ FMT_CONSTEXPR20 auto write_float(OutputIt out, const DecimalFP& f,\n }\n \n template <typename T> constexpr auto isnan(T value) -> bool {\n-  return !(value >= value);  // std::isnan doesn't support __float128.\n+  return value != value;  // std::isnan doesn't support __float128.\n }\n \n template <typename T, typename Enable = void>\n",
        "test_patch": "diff --git a/test/format-test.cc b/test/format-test.cc\n--- a/test/format-test.cc\n+++ b/test/format-test.cc\n@@ -15,6 +15,7 @@\n \n #include <stdint.h>  // uint32_t\n \n+#include <cfenv>               // fegetexceptflag and FE_ALL_EXCEPT\n #include <climits>             // INT_MAX\n #include <cmath>               // std::signbit\n #include <condition_variable>  // std::condition_variable\n@@ -109,6 +110,14 @@ TEST(float_test, isfinite) {\n #endif\n }\n \n+void check_no_fp_exception() {\n+  fexcept_t fe;\n+  fegetexceptflag(&fe, FE_ALL_EXCEPT);\n+\n+  // No exception flags should have been set\n+  EXPECT_TRUE(fe == 0);\n+}\n+\n template <typename Float> void check_isnan() {\n   using fmt::detail::isnan;\n   EXPECT_FALSE(isnan(Float(0.0)));\n@@ -121,6 +130,17 @@ template <typename Float> void check_isnan() {\n   EXPECT_FALSE(isnan(Float(-limits::infinity())));\n   EXPECT_TRUE(isnan(Float(limits::quiet_NaN())));\n   EXPECT_TRUE(isnan(Float(-limits::quiet_NaN())));\n+\n+  // Sanity check: make sure no error has occurred before we start\n+  check_no_fp_exception();\n+\n+  // Check that no exception is raised for the non-NaN case\n+  isnan(Float(42.0));\n+  check_no_fp_exception();\n+\n+  // Check that no exception is raised for the NaN case\n+  isnan(Float(limits::quiet_NaN()));\n+  check_no_fp_exception();\n }\n \n TEST(float_test, isnan) {\n",
        "problem_statement": "`fmt::isnan` triggers floating-point exception for NaN values\nNote: floating-point exceptions are not the same as C++ exceptions! See: https://www.gnu.org/savannah-checkouts/gnu/libc/manual/html_node/Control-Functions.html\r\n\r\nCommit ef54f9aa3858d7d10591719615bce337fbe49c40 changed the implementation of `fmt::isnan` from:\r\n\r\n```cpp\r\ntemplate <typename T> constexpr bool isnan(T value) {\r\n  return value != value;  // std::isnan doesn't support __float128.\r\n}\r\n```\r\n\r\nTo:\r\n\r\n```cpp\r\ntemplate <typename T> constexpr bool isnan(T value) {\r\n  return !(value >= value);  // std::isnan doesn't support __float128.\r\n}\r\n```\r\n\r\nThe commit description says that this was done to suppress `-Wfloat-equal` warnings. The problem is that these two implementations are subtly different: while they both return the same value, the newer implementation also sets a floating-point exception flag. The reason is that while for IEEE-754 floating-point numbers the operation `NaN != NaN` is well defined and will always return true, `NaN >= NaN` is technically an invalid operation, hence why the exception flag is set (at least this is my non-expert understanding).\r\n\r\nThis has been causing headaches for a project I'm working on because I wanted to trace where floating-point exceptions were emanating from in my program (using the [GNU-specific `feenableexcept` function](https://www.gnu.org/savannah-checkouts/gnu/libc/manual/html_node/Control-Functions.html)), but `fmt::isnan` will raise a spurious exception every time a NaN is passed in. Changing the code to use `value != value` instead fixes things.\r\n\r\nI guess there are different ways to fix this, but maybe you could just return to using `value != value` and find another way to suppress the warning (e.g. with a comment or a compiler argument)?\n",
        "hints_text": "Thanks for reporting. Could you by any chance provide a godbolt repro that demonstrates the issue?\nSure. Here you go: https://godbolt.org/z/Pvc43M46n\nI think reverting to != makes sense. Could you submit a PR to do this and add a new test case that checks FP exceptions?",
        "created_at": "2024-05-02T14:01:56Z",
        "version": "10.2"
    }
}