{
    "task_id": "fmtlib__fmt-2394",
    "setup_info": {
        "repo_path": "github/_cache/fmtlib__fmt-2394_2025-07-08_00-42-49",
        "repo_cache_path": "github/_cache/fmtlib/fmt_cache"
    },
    "task_info": {
        "repo": "fmtlib/fmt",
        "pull_number": 2394,
        "instance_id": "fmtlib__fmt-2394",
        "issue_numbers": [
            "2302"
        ],
        "base_commit": "cfc05e05f08dc0b6fe619831c96f00ee27d99613",
        "patch": "diff --git a/include/fmt/color.h b/include/fmt/color.h\n--- a/include/fmt/color.h\n+++ b/include/fmt/color.h\n@@ -185,9 +185,13 @@ enum class terminal_color : uint8_t {\n \n enum class emphasis : uint8_t {\n   bold = 1,\n-  italic = 1 << 1,\n-  underline = 1 << 2,\n-  strikethrough = 1 << 3\n+  faint = 1 << 1,\n+  italic = 1 << 2,\n+  underline = 1 << 3,\n+  blink = 1 << 4,\n+  reverse = 1 << 5,\n+  conceal = 1 << 6,\n+  strikethrough = 1 << 7,\n };\n \n // rgb is a struct for red, green and blue colors.\n@@ -409,16 +413,18 @@ template <typename Char> struct ansi_color_escape {\n     buffer[19] = static_cast<Char>(0);\n   }\n   FMT_CONSTEXPR ansi_color_escape(emphasis em) FMT_NOEXCEPT {\n-    uint8_t em_codes[4] = {};\n-    uint8_t em_bits = static_cast<uint8_t>(em);\n-    if (em_bits & static_cast<uint8_t>(emphasis::bold)) em_codes[0] = 1;\n-    if (em_bits & static_cast<uint8_t>(emphasis::italic)) em_codes[1] = 3;\n-    if (em_bits & static_cast<uint8_t>(emphasis::underline)) em_codes[2] = 4;\n-    if (em_bits & static_cast<uint8_t>(emphasis::strikethrough))\n-      em_codes[3] = 9;\n+    uint8_t em_codes[num_emphases] = {};\n+    if (has_emphasis(em, emphasis::bold)) em_codes[0] = 1;\n+    if (has_emphasis(em, emphasis::faint)) em_codes[1] = 2;\n+    if (has_emphasis(em, emphasis::italic)) em_codes[2] = 3;\n+    if (has_emphasis(em, emphasis::underline)) em_codes[3] = 4;\n+    if (has_emphasis(em, emphasis::blink)) em_codes[4] = 5;\n+    if (has_emphasis(em, emphasis::reverse)) em_codes[5] = 7;\n+    if (has_emphasis(em, emphasis::conceal)) em_codes[6] = 8;\n+    if (has_emphasis(em, emphasis::strikethrough)) em_codes[7] = 9;\n \n     size_t index = 0;\n-    for (int i = 0; i < 4; ++i) {\n+    for (size_t i = 0; i < num_emphases; ++i) {\n       if (!em_codes[i]) continue;\n       buffer[index++] = static_cast<Char>('\\x1b');\n       buffer[index++] = static_cast<Char>('[');\n@@ -435,7 +441,8 @@ template <typename Char> struct ansi_color_escape {\n   }\n \n  private:\n-  Char buffer[7u + 3u * 4u + 1u];\n+  static constexpr size_t num_emphases = 8;\n+  Char buffer[7u + 3u * num_emphases + 1u];\n \n   static FMT_CONSTEXPR void to_esc(uint8_t c, Char* out,\n                                    char delimiter) FMT_NOEXCEPT {\n@@ -444,6 +451,10 @@ template <typename Char> struct ansi_color_escape {\n     out[2] = static_cast<Char>('0' + c % 10);\n     out[3] = static_cast<Char>(delimiter);\n   }\n+  static FMT_CONSTEXPR bool has_emphasis(emphasis em,\n+                                         emphasis mask) FMT_NOEXCEPT {\n+    return static_cast<uint8_t>(em) & static_cast<uint8_t>(mask);\n+  }\n };\n \n template <typename Char>\n",
        "test_patch": "diff --git a/test/color-test.cc b/test/color-test.cc\n--- a/test/color-test.cc\n+++ b/test/color-test.cc\n@@ -20,10 +20,16 @@ TEST(color_test, format) {\n       fmt::format(fg(fmt::color::blue) | bg(fmt::color::red), \"two color\"),\n       \"\\x1b[38;2;000;000;255m\\x1b[48;2;255;000;000mtwo color\\x1b[0m\");\n   EXPECT_EQ(fmt::format(fmt::emphasis::bold, \"bold\"), \"\\x1b[1mbold\\x1b[0m\");\n+  EXPECT_EQ(fmt::format(fmt::emphasis::faint, \"faint\"), \"\\x1b[2mfaint\\x1b[0m\");\n   EXPECT_EQ(fmt::format(fmt::emphasis::italic, \"italic\"),\n             \"\\x1b[3mitalic\\x1b[0m\");\n   EXPECT_EQ(fmt::format(fmt::emphasis::underline, \"underline\"),\n             \"\\x1b[4munderline\\x1b[0m\");\n+  EXPECT_EQ(fmt::format(fmt::emphasis::blink, \"blink\"), \"\\x1b[5mblink\\x1b[0m\");\n+  EXPECT_EQ(fmt::format(fmt::emphasis::reverse, \"reverse\"),\n+            \"\\x1b[7mreverse\\x1b[0m\");\n+  EXPECT_EQ(fmt::format(fmt::emphasis::conceal, \"conceal\"),\n+            \"\\x1b[8mconceal\\x1b[0m\");\n   EXPECT_EQ(fmt::format(fmt::emphasis::strikethrough, \"strikethrough\"),\n             \"\\x1b[9mstrikethrough\\x1b[0m\");\n   EXPECT_EQ(\n",
        "problem_statement": "Add more emphases\n```c++\r\nint main() {\r\n  fmt::print(\"normal\\n\");\r\n  fmt::print(fmt::emphasis::bold,             \"bold\\n\");\r\n  fmt::print(fmt::emphasis::faint,            \"faint\\n\");\r\n  fmt::print(fmt::emphasis::italic,           \"italic\\n\");\r\n  fmt::print(fmt::emphasis::underline,        \"underline\\n\");\r\n  fmt::print(fmt::emphasis::blink,            \"blink\\n\");\r\n  fmt::print(fmt::emphasis::invert,           \"invert\\n\");\r\n  fmt::print(fmt::emphasis::conceal,          \"conceal\\n\");\r\n  fmt::print(fmt::emphasis::strikethrough,    \"strikethrough\\n\");\r\n}\r\n```\r\n![ksnip_20210521-185715_myfmtlib](https://user-images.githubusercontent.com/1754269/119149571-144e3680-ba67-11eb-9795-9ea9a913bf7b.png)\r\nReally blinked in a real terminal :)\r\nAnd the conceal style isn't supported by many terminals.\r\n\r\n```diff\r\ndiff --git a/include/fmt/color.h b/include/fmt/color.h\r\nindex 8cddbfe1..ab7e8dd0 100644\r\n--- a/include/fmt/color.h\r\n+++ b/include/fmt/color.h\r\n@@ -185,9 +185,17 @@ enum class terminal_color : uint8_t {\r\n \r\n enum class emphasis : uint8_t {\r\n   bold = 1,\r\n-  italic = 1 << 1,\r\n-  underline = 1 << 2,\r\n-  strikethrough = 1 << 3\r\n+  faint = 1 << 1,\r\n+  dim = faint,\r\n+  italic = 1 << 2,\r\n+  underline = 1 << 3,\r\n+  blink = 1 << 4,\r\n+  slow_blink = blink,\r\n+  reverse = 1 << 5,\r\n+  invert = reverse,\r\n+  conceal = 1 << 6,\r\n+  hide = conceal,\r\n+  strikethrough = 1 << 7,\r\n };\r\n \r\n // rgb is a struct for red, green and blue colors.\r\n@@ -399,7 +407,7 @@ template <typename Char> struct ansi_color_escape {\r\n       return;\r\n     }\r\n \r\n-    for (int i = 0; i < 7; i++) {\r\n+    for (int i = 0; i < 8; i++) {\r\n       buffer[i] = static_cast<Char>(esc[i]);\r\n     }\r\n     rgb color(text_color.value.rgb_color);\r\n@@ -409,16 +417,19 @@ template <typename Char> struct ansi_color_escape {\r\n     buffer[19] = static_cast<Char>(0);\r\n   }\r\n   FMT_CONSTEXPR ansi_color_escape(emphasis em) FMT_NOEXCEPT {\r\n-    uint8_t em_codes[4] = {};\r\n+    uint8_t em_codes[8] = {};\r\n     uint8_t em_bits = static_cast<uint8_t>(em);\r\n     if (em_bits & static_cast<uint8_t>(emphasis::bold)) em_codes[0] = 1;\r\n-    if (em_bits & static_cast<uint8_t>(emphasis::italic)) em_codes[1] = 3;\r\n-    if (em_bits & static_cast<uint8_t>(emphasis::underline)) em_codes[2] = 4;\r\n-    if (em_bits & static_cast<uint8_t>(emphasis::strikethrough))\r\n-      em_codes[3] = 9;\r\n+    if (em_bits & static_cast<uint8_t>(emphasis::faint)) em_codes[1] = 2;\r\n+    if (em_bits & static_cast<uint8_t>(emphasis::italic)) em_codes[2] = 3;\r\n+    if (em_bits & static_cast<uint8_t>(emphasis::underline)) em_codes[3] = 4;\r\n+    if (em_bits & static_cast<uint8_t>(emphasis::blink)) em_codes[4] = 5;\r\n+    if (em_bits & static_cast<uint8_t>(emphasis::reverse)) em_codes[5] = 7;\r\n+    if (em_bits & static_cast<uint8_t>(emphasis::conceal)) em_codes[6] = 8;\r\n+    if (em_bits & static_cast<uint8_t>(emphasis::strikethrough)) em_codes[7] = 9;\r\n\r\n     size_t index = 0;\r\n-    for (int i = 0; i < 4; ++i) {\r\n+    for (int i = 0; i < 8; ++i) {\r\n       if (!em_codes[i]) continue;\r\n       buffer[index++] = static_cast<Char>('\\x1b');\r\n       buffer[index++] = static_cast<Char>('[');\r\n@@ -435,7 +446,7 @@ template <typename Char> struct ansi_color_escape {\r\n   }\r\n\r\n  private:\r\n-  Char buffer[7u + 3u * 4u + 1u];\r\n+  Char buffer[7u + 3u * 8u + 1u];\r\n\r\n   static FMT_CONSTEXPR void to_esc(uint8_t c, Char* out,\r\n                                    char delimiter) FMT_NOEXCEPT {\r\n```\n",
        "hints_text": "Sounds like a good idea. Could you submit a PR?\nI tried even more emphases (with `emphasis : uint16_t` ) from https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_(Select_Graphic_Rendition)_parameters\r\n\r\nkonsole supports `Overlined`, some terminals supports `Doubly underlined`...",
        "created_at": "2021-06-27T16:34:47Z",
        "version": "8.0"
    }
}