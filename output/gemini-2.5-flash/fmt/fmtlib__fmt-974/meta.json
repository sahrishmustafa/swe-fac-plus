{
    "task_id": "fmtlib__fmt-974",
    "setup_info": {
        "repo_path": "github/_cache/fmtlib__fmt-974_2025-07-08_07-01-21",
        "repo_cache_path": "github/_cache/fmtlib/fmt_cache"
    },
    "task_info": {
        "repo": "fmtlib/fmt",
        "pull_number": 974,
        "instance_id": "fmtlib__fmt-974",
        "issue_numbers": [
            "968"
        ],
        "base_commit": "7f7504b3f532c6cd7d6de405241f774df6b4b666",
        "patch": "diff --git a/include/fmt/color.h b/include/fmt/color.h\n--- a/include/fmt/color.h\n+++ b/include/fmt/color.h\n@@ -191,6 +191,25 @@ enum class color : uint32_t {\n   yellow_green            = 0x9ACD32  // rgb(154,205,50)\n };  // enum class color\n \n+enum class terminal_color : uint8_t {\n+  black = 30,\n+  red,\n+  green,\n+  yellow,\n+  blue,\n+  magenta,\n+  cyan,\n+  white,\n+  bright_black = 90,\n+  bright_red,\n+  bright_green,\n+  bright_yellow,\n+  bright_blue,\n+  bright_magenta,\n+  bright_cyan,\n+  bright_white\n+};  // enum class terminal_color\n+\n enum class emphasis : uint8_t {\n   bold = 1,\n   italic = 1 << 1,\n@@ -215,6 +234,32 @@ struct rgb {\n   uint8_t b;\n };\n \n+namespace internal {\n+\n+// color is a struct of either a rgb color or a terminal color.\n+struct color_type {\n+  FMT_CONSTEXPR color_type() FMT_NOEXCEPT\n+    : is_rgb(), value{} {}\n+  FMT_CONSTEXPR color_type(color rgb_color) FMT_NOEXCEPT\n+    : is_rgb(true), value{} {\n+    value.rgb_color = static_cast<uint32_t>(rgb_color);\n+  }\n+  FMT_CONSTEXPR color_type(rgb rgb_color) FMT_NOEXCEPT\n+    : is_rgb(true), value{} {\n+    value.rgb_color = (rgb_color.r << 16) + (rgb_color.g << 8) + rgb_color.b;\n+  }\n+  FMT_CONSTEXPR color_type(terminal_color term_color) FMT_NOEXCEPT\n+    : is_rgb(), value{} {\n+    value.term_color = static_cast<uint8_t>(term_color);\n+  }\n+  bool is_rgb;\n+  union color_union {\n+    uint8_t term_color;\n+    uint32_t rgb_color;\n+  } value;\n+};\n+} // namespace internal\n+\n // Experimental text formatting support.\n class text_style {\n  public:\n@@ -227,18 +272,18 @@ class text_style {\n       set_foreground_color = rhs.set_foreground_color;\n       foreground_color = rhs.foreground_color;\n     } else if (rhs.set_foreground_color) {\n-      foreground_color.r |= rhs.foreground_color.r;\n-      foreground_color.g |= rhs.foreground_color.g;\n-      foreground_color.b |= rhs.foreground_color.b;\n+      if (!foreground_color.is_rgb || !rhs.foreground_color.is_rgb)\n+        throw format_error(\"can't OR a terminal color\");\n+      foreground_color.value.rgb_color |= rhs.foreground_color.value.rgb_color;\n     }\n \n     if (!set_background_color) {\n       set_background_color = rhs.set_background_color;\n       background_color = rhs.background_color;\n     } else if (rhs.set_background_color) {\n-      background_color.r |= rhs.background_color.r;\n-      background_color.g |= rhs.background_color.g;\n-      background_color.b |= rhs.background_color.b;\n+      if (!background_color.is_rgb || !rhs.background_color.is_rgb)\n+        throw format_error(\"can't OR a terminal color\");\n+      background_color.value.rgb_color |= rhs.background_color.value.rgb_color;\n     }\n \n     ems = static_cast<emphasis>(static_cast<uint8_t>(ems) |\n@@ -256,18 +301,18 @@ class text_style {\n       set_foreground_color = rhs.set_foreground_color;\n       foreground_color = rhs.foreground_color;\n     } else if (rhs.set_foreground_color) {\n-      foreground_color.r &= rhs.foreground_color.r;\n-      foreground_color.g &= rhs.foreground_color.g;\n-      foreground_color.b &= rhs.foreground_color.b;\n+      if (!foreground_color.is_rgb || !rhs.foreground_color.is_rgb)\n+        throw format_error(\"can't AND a terminal color\");\n+      foreground_color.value.rgb_color &= rhs.foreground_color.value.rgb_color;\n     }\n \n     if (!set_background_color) {\n       set_background_color = rhs.set_background_color;\n       background_color = rhs.background_color;\n     } else if (rhs.set_background_color) {\n-      background_color.r &= rhs.background_color.r;\n-      background_color.g &= rhs.background_color.g;\n-      background_color.b &= rhs.background_color.b;\n+      if (!background_color.is_rgb || !rhs.background_color.is_rgb)\n+        throw format_error(\"can't AND a terminal color\");\n+      background_color.value.rgb_color &= rhs.background_color.value.rgb_color;\n     }\n \n     ems = static_cast<emphasis>(static_cast<uint8_t>(ems) &\n@@ -289,11 +334,11 @@ class text_style {\n   FMT_CONSTEXPR bool has_emphasis() const FMT_NOEXCEPT {\n     return static_cast<uint8_t>(ems) != 0;\n   }\n-  FMT_CONSTEXPR rgb get_foreground() const FMT_NOEXCEPT {\n+  FMT_CONSTEXPR internal::color_type get_foreground() const FMT_NOEXCEPT {\n     assert(has_foreground() && \"no foreground specified for this style\");\n     return foreground_color;\n   }\n-  FMT_CONSTEXPR rgb get_background() const FMT_NOEXCEPT {\n+  FMT_CONSTEXPR internal::color_type get_background() const FMT_NOEXCEPT {\n     assert(has_background() && \"no background specified for this style\");\n     return background_color;\n   }\n@@ -303,32 +348,37 @@ class text_style {\n   }\n \n private:\n-  FMT_CONSTEXPR text_style(bool is_foreground, rgb text_color) FMT_NOEXCEPT\n-    : set_foreground_color(), set_background_color(), ems() {\n-    if (is_foreground) {\n-      foreground_color = text_color;\n-      set_foreground_color = true;\n-    } else {\n-      background_color = text_color;\n-      set_background_color = true;\n-    }\n-  }\n-\n-  friend FMT_CONSTEXPR_DECL text_style fg(rgb foreground) FMT_NOEXCEPT;\n-  friend FMT_CONSTEXPR_DECL text_style bg(rgb background) FMT_NOEXCEPT;\n-\n-  rgb foreground_color;\n-  rgb background_color;\n+ FMT_CONSTEXPR text_style(bool is_foreground,\n+                          internal::color_type text_color) FMT_NOEXCEPT\n+     : set_foreground_color(),\n+       set_background_color(),\n+       ems() {\n+   if (is_foreground) {\n+     foreground_color = text_color;\n+     set_foreground_color = true;\n+   } else {\n+     background_color = text_color;\n+     set_background_color = true;\n+   }\n+ }\n+\n+  friend FMT_CONSTEXPR_DECL text_style fg(internal::color_type foreground)\n+      FMT_NOEXCEPT;\n+  friend FMT_CONSTEXPR_DECL text_style bg(internal::color_type background)\n+      FMT_NOEXCEPT;\n+\n+  internal::color_type foreground_color;\n+  internal::color_type background_color;\n   bool set_foreground_color;\n   bool set_background_color;\n   emphasis ems;\n };\n \n-FMT_CONSTEXPR text_style fg(rgb foreground) FMT_NOEXCEPT {\n+FMT_CONSTEXPR text_style fg(internal::color_type foreground) FMT_NOEXCEPT {\n   return text_style(/*is_foreground=*/true, foreground);\n }\n \n-FMT_CONSTEXPR text_style bg(rgb background) FMT_NOEXCEPT {\n+FMT_CONSTEXPR text_style bg(internal::color_type background) FMT_NOEXCEPT {\n   return text_style(/*is_foreground=*/false, background);\n }\n \n@@ -340,10 +390,37 @@ namespace internal {\n \n template <typename Char>\n struct ansi_color_escape {\n-  FMT_CONSTEXPR ansi_color_escape(rgb color, const char * esc) FMT_NOEXCEPT {\n+  FMT_CONSTEXPR ansi_color_escape(internal::color_type text_color, const char * esc) FMT_NOEXCEPT {\n+    // If we have a terminal color, we need to output another escape code\n+    // sequence.\n+    if (!text_color.is_rgb) {\n+      bool is_background = esc == internal::data::BACKGROUND_COLOR;\n+      uint8_t value = text_color.value.term_color;\n+      // Background ASCII codes are the same as the foreground ones but with\n+      // 10 more.\n+      if (is_background)\n+        value += 10;\n+\n+      std::size_t index = 0;\n+      buffer[index++] = static_cast<Char>('\\x1b');\n+      buffer[index++] = static_cast<Char>('[');\n+\n+      if (value >= 100) {\n+        buffer[index++] = static_cast<Char>('1');\n+        value %= 100;\n+      }\n+      buffer[index++] = static_cast<Char>('0' + value / 10);\n+      buffer[index++] = static_cast<Char>('0' + value % 10);\n+\n+      buffer[index++] = static_cast<Char>('m');\n+      buffer[index++] = static_cast<Char>('\\0');\n+      return;\n+    }\n+\n     for (int i = 0; i < 7; i++) {\n       buffer[i] = static_cast<Char>(esc[i]);\n     }\n+    rgb color(text_color.value.rgb_color);\n     to_esc(color.r, buffer +  7, ';');\n     to_esc(color.g, buffer + 11, ';');\n     to_esc(color.b, buffer + 15, 'm');\n@@ -388,14 +465,14 @@ struct ansi_color_escape {\n \n template <typename Char>\n FMT_CONSTEXPR ansi_color_escape<Char>\n-make_foreground_color(rgb color) FMT_NOEXCEPT {\n-  return ansi_color_escape<Char>(color, internal::data::FOREGROUND_COLOR);\n+make_foreground_color(internal::color_type foreground) FMT_NOEXCEPT {\n+  return ansi_color_escape<Char>(foreground, internal::data::FOREGROUND_COLOR);\n }\n \n template <typename Char>\n FMT_CONSTEXPR ansi_color_escape<Char>\n-make_background_color(rgb color) FMT_NOEXCEPT {\n-  return ansi_color_escape<Char>(color, internal::data::BACKGROUND_COLOR);\n+make_background_color(internal::color_type background) FMT_NOEXCEPT {\n+  return ansi_color_escape<Char>(background, internal::data::BACKGROUND_COLOR);\n }\n \n template <typename Char>\n",
        "test_patch": "diff --git a/test/format-impl-test.cc b/test/format-impl-test.cc\n--- a/test/format-impl-test.cc\n+++ b/test/format-impl-test.cc\n@@ -233,4 +233,14 @@ TEST(ColorsTest, Colors) {\n   EXPECT_WRITE(stderr, fmt::print(stderr, fg(fmt::color::blue), \"blue log\"),\n                  \"\\x1b[38;2;000;000;255mblue log\\x1b[0m\");\n   EXPECT_WRITE(stdout, fmt::print(fmt::text_style(), \"hi\"), \"hi\");\n+  EXPECT_WRITE(stdout, fmt::print(fg(fmt::terminal_color::red), \"tred\"),\n+               \"\\x1b[31mtred\\x1b[0m\");\n+  EXPECT_WRITE(stdout, fmt::print(bg(fmt::terminal_color::cyan), \"tcyan\"),\n+               \"\\x1b[46mtcyan\\x1b[0m\");\n+  EXPECT_WRITE(stdout,\n+               fmt::print(fg(fmt::terminal_color::bright_green), \"tbgreen\"),\n+               \"\\x1b[92mtbgreen\\x1b[0m\");\n+  EXPECT_WRITE(stdout,\n+               fmt::print(bg(fmt::terminal_color::bright_magenta), \"tbmagenta\"),\n+               \"\\x1b[105mtbmagenta\\x1b[0m\");\n }\n",
        "problem_statement": "Support ASCII color escape code numbers\nWe currently support a wide range of colors, but the \"default\" ones from the terminal aren't really there.\r\n\r\nI think it would be a good idea to support them, because (now correct me if I'm wrong) that the colors can change slightly depending on the pallete of the terminal. Hard coding the rgb doesn't always look nice and so that the colors are more readable I'd suggest that we add another color mode with only those colors supported.\r\n\r\nWhat do you think?\r\n\r\nNote: I just realized that this is what the old color printing does. :)\n",
        "hints_text": "Are you talking about these: https://en.wikipedia.org/wiki/ANSI_escape_code#3/4_bit ? I think it would be nice to support them as well.",
        "created_at": "2018-12-09T16:04:50Z",
        "version": "5.2"
    }
}