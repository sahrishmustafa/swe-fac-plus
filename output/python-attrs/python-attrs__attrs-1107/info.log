2025-07-03 18:36:22.399 | INFO     | Model API request cost info: input_tokens=994, output_tokens=362, cost=0.006105
2025-07-03 18:36:22.404 | DEBUG    | Trying to select search APIs in json. Try 1 of 5.
2025-07-03 18:36:24.534 | INFO     | Model API request cost info: input_tokens=1030, output_tokens=171, cost=0.004285
2025-07-03 18:36:24.535 | DEBUG    | {
    "API_calls": [
        "browse_file_for_environment_info(\"README.md\", \"environment setup and running tests\")",
        "browse_file_for_environment_info(\"pyproject.toml\", \"dependencies and python version\")",
        "browse_file_for_environment_info(\"tox.ini\", \"test execution commands and environment setup details\")"
    ],
    "collected_information": "Planning to gather information for setting up the environment and running tests by browsing `README.md`, `pyproject.toml`, and `tox.ini` files to identify dependencies, required language versions, and test execution commands. Also, confirming the existence of `tests/test_next_gen.py`.",
    "terminate": false
}
2025-07-03 18:36:24.535 | DEBUG    | Extracted a valid json
2025-07-03 18:36:24.539 | INFO     | entering browse
2025-07-03 18:36:24.539 | INFO     | <p align="center">
   <a href="https://www.attrs.org/">
      <picture>
         <source srcset="https://raw.githubusercontent.com/python-attrs/attrs/main/docs/_static/attrs_logo_white.svg" media="(prefers-color-scheme: dark)">
         <img src="https://raw.githubusercontent.com/python-attrs/attrs/main/docs/_static/attrs_logo.svg" width="35%" alt="attrs" />
      </picture>
   </a>
</p>

<p align="center">
   <a href="https://www.attrs.org/en/stable/">
       <img src="https://img.shields.io/badge/Docs-RTD-black" alt="Documentation" />
   </a>
   <a href="https://github.com/python-attrs/attrs/blob/main/LICENSE">
      <img src="https://img.shields.io/badge/license-MIT-C06524" alt="License: MIT" />
   </a>
   <a href="https://bestpractices.coreinfrastructure.org/projects/6482"><img src="https://bestpractices.coreinfrastructure.org/projects/6482/badge"></a>
   <a href="https://pypi.org/project/attrs/">
      <img src="https://img.shields.io/pypi/v/attrs" />
   </a>
   <a href="https://pepy.tech/project/attrs">
      <img src="https://static.pepy.tech/personalized-badge/attrs?period=month&units=international_system&left_color=grey&right_color=blue&left_text=Downloads%20/%20Month" alt="Downloads per month" />
   </a>
   <a href="https://zenodo.org/badge/latestdoi/29918975"><img src="https://zenodo.org/badge/29918975.svg" alt="DOI"></a>
</p>

<!-- teaser-begin -->

*attrs* is the Python package that will bring back the **joy** of **writing classes** by relieving you from the drudgery of implementing object protocols (aka [dunder methods](https://www.attrs.org/en/latest/glossary.html#term-dunder-methods)).
[Trusted by NASA](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/personalizing-your-profile#list-of-qualifying-repositories-for-mars-2020-helicopter-contributor-achievement) for Mars missions since 2020!

Its main goal is to help you to write **concise** and **correct** software without slowing down your code.


## Sponsors

*attrs* would not be possible without our [amazing sponsors](https://github.com/sponsors/hynek).
Especially those generously supporting us at the *The Organization* tier and higher:

<p align="center">
   <a href="https://www.variomedia.de/">
      <img src="https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/Variomedia.svg" width="200" height="60"></img>
   </a>

   <a href="https://tidelift.com/subscription/pkg/pypi-attrs?utm_source=pypi-attrs&utm_medium=referral&utm_campaign=enterprise&utm_term=repo">
      <img src="https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/Tidelift.svg" width="200" height="60"></img>
   </a>

   <a href="https://sentry.io/">
      <img src="https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/Sentry.svg" width="200" height="60"></img>
   </a>

   <a href="https://filepreviews.io/">
      <img src="https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/FilePreviews.svg" width="200" height="60"></img>
   </a>
</p>

<p align="center">
   <strong>Please consider <a href="https://github.com/sponsors/hynek">joining them</a> to help make <em>attrs</em>â€™s maintenance more sustainable!</strong>
</p>

<!-- teaser-end -->

## Example

*attrs* gives you a class decorator and a way to declaratively define the attributes on that class:

<!-- code-begin -->

```pycon
>>> from attrs import asdict, define, make_class, Factory

>>> @define
... class SomeClass:
...     a_number: int = 42
...     list_of_numbers: list[int] = Factory(list)
...
...     def hard_math(self, another_number):
...         return self.a_number + sum(self.list_of_numbers) * another_number


>>> sc = SomeClass(1, [1, 2, 3])
>>> sc
SomeClass(a_number=1, list_of_numbers=[1, 2, 3])

>>> sc.hard_math(3)
19
>>> sc == SomeClass(1, [1, 2, 3])
True
>>> sc != SomeClass(2, [3, 2, 1])
True

>>> asdict(sc)
{'a_number': 1, 'list_of_numbers': [1, 2, 3]}

>>> SomeClass()
SomeClass(a_number=42, list_of_numbers=[])

>>> C = make_class("C", ["a", "b"])
>>> C("foo", "bar")
C(a='foo', b='bar')
```

After *declaring* your attributes, *attrs* gives you:

- a concise and explicit overview of the class's attributes,
- a nice human-readable `__repr__`,
- equality-checking methods,
- an initializer,
- and much more,

*without* writing dull boilerplate code again and again and *without* runtime performance penalties.

**Hate type annotations**!?
No problem!
Types are entirely **optional** with *attrs*.
Simply assign `attrs.field()` to the attributes instead of annotating them with types.

---

This example uses *attrs*'s modern APIs that have been introduced in version 20.1.0, and the *attrs* package import name that has been added in version 21.3.0.
The classic APIs (`@attr.s`, `attr.ib`, plus their serious-business aliases) and the `attr` package import name will remain **indefinitely**.

Please check out [*On The Core API Names*](https://www.attrs.org/en/latest/names.html) for a more in-depth explanation.


## Data Classes

On the tin, *attrs* might remind you of `dataclasses` (and indeed, `dataclasses` [are a descendant](https://hynek.me/articles/import-attrs/) of *attrs*).
In practice it does a lot more and is more flexible.
For instance it allows you to define [special handling of NumPy arrays for equality checks](https://www.attrs.org/en/stable/comparison.html#customization), or allows more ways to [plug into the initialization process](https://www.attrs.org/en/stable/init.html#hooking-yourself-into-initialization).

For more details, please refer to our [comparison page](https://www.attrs.org/en/stable/why.html#data-classes).


## Project Information

- [**Changelog**](https://www.attrs.org/en/stable/changelog.html)
- [**Documentation**](https://www.attrs.org/)
- [**PyPI**](https://pypi.org/project/attrs/)
- [**Source Code**](https://github.com/python-attrs/attrs)
- [**Contributing**](https://github.com/python-attrs/attrs/blob/main/.github/CONTRIBUTING.md)
- [**Third-party Extensions**](https://github.com/python-attrs/attrs/wiki/Extensions-to-attrs)
- **License**: [MIT](https://www.attrs.org/en/latest/license.html)
- **Get Help**: please use the `python-attrs` tag on [StackOverflow](https://stackoverflow.com/questions/tagged/python-attrs)
- **Supported Python Versions**: 3.7 and later


### *attrs* for Enterprise

Available as part of the Tidelift Subscription.

The maintainers of *attrs* and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source packages you use to build your applications.
Save time, reduce risk, and improve code health, while paying the maintainers of the exact packages you use.
[Learn more.](https://tidelift.com/subscription/pkg/pypi-attrs?utm_source=pypi-attrs&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)

2025-07-03 18:36:24.540 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-03 18:36:27.400 | INFO     | Model API request cost info: input_tokens=2495, output_tokens=95, cost=0.007188
2025-07-03 18:36:27.401 | SUCCESS  | Successfully extracted environment config
2025-07-03 18:36:27.401 | INFO     | ******
2025-07-03 18:36:27.401 | INFO     | List of libraries:
- attrs

Runtime Requirements:
- Python >=3.7

Testing:
- The README.md does not explicitly provide commands or a framework for running tests. Generally, Python projects use tools like `pytest` or `unittest`. The project typically details such information in a `CONTRIBUTING.md` file, `pyproject.toml`, `setup.py`, or a dedicated testing section.
2025-07-03 18:36:27.401 | INFO     | ******
2025-07-03 18:36:27.401 | DEBUG    | Result of dispatch_intent: ('List of libraries:\n- attrs\n\nRuntime Requirements:\n- Python >=3.7\n\nTesting:\n- The README.md does not explicitly provide commands or a framework for running tests. Generally, Python projects use tools like `pytest` or `unittest`. The project typically details such information in a `CONTRIBUTING.md` file, `pyproject.toml`, `setup.py`, or a dedicated testing section.', 'Get File Info', True)
2025-07-03 18:36:27.402 | INFO     | entering browse
2025-07-03 18:36:27.402 | INFO     | # SPDX-License-Identifier: MIT

[build-system]
requires = ["hatchling", "hatch-vcs", "hatch-fancy-pypi-readme"]
build-backend = "hatchling.build"


[project]
name = "attrs"
authors = [{ name = "Hynek Schlawack", email = "hs@ox.cx" }]
license = "MIT"
requires-python = ">=3.7"
description = "Classes Without Boilerplate"
keywords = ["class", "attribute", "boilerplate"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = ["importlib_metadata;python_version<'3.8'"]
dynamic = ["version", "readme"]

[project.optional-dependencies]
tests-no-zope = [
    # For regression test to ensure cloudpickle compat doesn't break.
    'cloudpickle; python_implementation == "CPython"',
    "hypothesis",
    "pympler",
    # 4.3.0 dropped last use of `convert`
    "pytest>=4.3.0",
    "pytest-xdist[psutil]",
    # Since the mypy error messages keep changing, we have to keep updating this
    # pin.
    'mypy>=1.1.1; python_implementation == "CPython"',
    'pytest-mypy-plugins; python_implementation == "CPython" and python_version<"3.11"',
]
tests = ["attrs[tests-no-zope]", "zope.interface"]
cov = [
    "attrs[tests]",
    # Ensure coverage is new enough for `source_pkgs`.
    "coverage[toml]>=5.3",
]
docs = [
    "furo",
    "myst-parser",
    "sphinx",
    "zope.interface",
    "sphinx-notfound-page",
    "sphinxcontrib-towncrier",
    "towncrier",
]
dev = ["attrs[tests,docs]", "pre-commit"]

[project.urls]
Documentation = "https://www.attrs.org/"
Changelog = "https://www.attrs.org/en/stable/changelog.html"
"Bug Tracker" = "https://github.com/python-attrs/attrs/issues"
"Source Code" = "https://github.com/python-attrs/attrs"
Funding = "https://github.com/sponsors/hynek"
Tidelift = "https://tidelift.com/subscription/pkg/pypi-attrs?utm_source=pypi-attrs&utm_medium=pypi"


[tool.hatch.version]
source = "vcs"
raw-options = { local_scheme = "no-local-version" }

[tool.hatch.build.targets.wheel]
packages = ["src/attr", "src/attrs"]

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"

# PyPI doesn't support the <picture> tag.
[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
text = """<p align="center">
  <a href="https://www.attrs.org/">
    <img src="https://raw.githubusercontent.com/python-attrs/attrs/main/docs/_static/attrs_logo.svg" width="35%" alt="attrs" />
  </a>
</p>
"""

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.md"
start-after = "<!-- teaser-begin -->"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
text = """

## Release Information

"""

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "CHANGELOG.md"
pattern = "\n(###.+?\n)## "

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
text = """

---

[Full changelog](https://www.attrs.org/en/stable/changelog.html)
"""


# Make coverage play nicely with pytest-xdist.
[tool.hatch.build.targets.wheel.hooks.autorun]
dependencies = ["hatch-autorun"]
code = """
import coverage
coverage.process_startup()
"""
enable-by-default = false


[tool.pytest.ini_options]
addopts = ["-ra", "--strict-markers", "--strict-config"]
xfail_strict = true
testpaths = "tests"
filterwarnings = ["once::Warning", "ignore:::pympler[.*]"]


[tool.coverage.run]
parallel = true
branch = true
source_pkgs = ["attr", "attrs"]

[tool.coverage.paths]
source = ["src", ".tox/py*/**/site-packages"]

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    # PyPy is unacceptably slow under coverage.
    "if PYPY:",
]


[tool.black]
line-length = 79


[tool.isort]
profile = "attrs"


[tool.interrogate]
verbose = 2
fail-under = 100
whitelist-regex = ["test_.*"]


[tool.check-wheel-contents]
toplevel = ["attr", "attrs"]


[tool.towncrier]
name = "attrs"
directory = "changelog.d"
filename = "CHANGELOG.md"
start_string = "<!-- towncrier release notes start -->\n"
template = "changelog.d/towncrier_template.md.jinja"
title_format = ""
issue_format = "[#{issue}](https://github.com/python-attrs/attrs/issues/{issue})"
underlines = ["", "", ""]

[[tool.towncrier.section]]
path = ""

[[tool.towncrier.type]]
directory = "breaking"
name = "Backwards-incompatible Changes"
showcontent = true

[[tool.towncrier.type]]
directory = "deprecation"
name = "Deprecations"
showcontent = true

[[tool.towncrier.type]]
directory = "change"
name = "Changes"
showcontent = true


[tool.mypy]
disallow_untyped_defs = true
check_untyped_defs = true

2025-07-03 18:36:27.402 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-03 18:36:29.756 | INFO     | Model API request cost info: input_tokens=2045, output_tokens=332, cost=0.008433
2025-07-03 18:36:29.757 | SUCCESS  | Successfully extracted environment config
2025-07-03 18:36:29.757 | INFO     | ******
2025-07-03 18:36:29.757 | INFO     | List of libraries:
- importlib_metadata (for Python < 3.8)
- cloudpickle (for CPython, in `tests-no-zope`)
- hypothesis (in `tests-no-zope`)
- pympler (in `tests-no-zope`)
- pytest>=4.3.0 (in `tests-no-zope`)
- pytest-xdist[psutil] (in `tests-no-zope`)
- mypy>=1.1.1 (for CPython, in `tests-no-zope`)
- pytest-mypy-plugins (for CPython and Python < 3.11, in `tests-no-zope`)
- zope.interface (in `tests`)
- coverage[toml]>=5.3 (in `cov`)
- furo (in `docs`)
- myst-parser (in `docs`)
- sphinx (in `docs`)
- sphinx-notfound-page (in `docs`)
- sphinxcontrib-towncrier (in `docs`)
- towncrier (in `docs`)
- pre-commit (in `dev`)

Runtime Requirements:
- Python >=3.7

Testing:
- Test framework: pytest
- Test command: `pytest` (implicitly from `testpaths = "tests"` in `[tool.pytest.ini_options]`)
- Additional pytest options: `-ra`, `--strict-markers`, `--strict-config`
2025-07-03 18:36:29.757 | INFO     | ******
2025-07-03 18:36:29.757 | DEBUG    | Result of dispatch_intent: ('List of libraries:\n- importlib_metadata (for Python < 3.8)\n- cloudpickle (for CPython, in `tests-no-zope`)\n- hypothesis (in `tests-no-zope`)\n- pympler (in `tests-no-zope`)\n- pytest>=4.3.0 (in `tests-no-zope`)\n- pytest-xdist[psutil] (in `tests-no-zope`)\n- mypy>=1.1.1 (for CPython, in `tests-no-zope`)\n- pytest-mypy-plugins (for CPython and Python < 3.11, in `tests-no-zope`)\n- zope.interface (in `tests`)\n- coverage[toml]>=5.3 (in `cov`)\n- furo (in `docs`)\n- myst-parser (in `docs`)\n- sphinx (in `docs`)\n- sphinx-notfound-page (in `docs`)\n- sphinxcontrib-towncrier (in `docs`)\n- towncrier (in `docs`)\n- pre-commit (in `dev`)\n\nRuntime Requirements:\n- Python >=3.7\n\nTesting:\n- Test framework: pytest\n- Test command: `pytest` (implicitly from `testpaths = "tests"` in `[tool.pytest.ini_options]`)\n- Additional pytest options: `-ra`, `--strict-markers`, `--strict-config`', 'Get File Info', True)
2025-07-03 18:36:29.758 | INFO     | entering browse
2025-07-03 18:36:29.758 | INFO     | [tox]
envlist = mypy,pre-commit,py37,py38,py39,py310,py311,py312,pypy3,pyright,docs,changelog,coverage-report
isolated_build = True


[testenv:docs]
# Keep basepython in sync with ci.yml/docs and .readthedocs.yaml.
basepython = python3.11
extras = docs
commands =
    sphinx-build -n -T -W -b html -d {envtmpdir}/doctrees docs docs/_build/html
    sphinx-build -n -T -W -b doctest -d {envtmpdir}/doctrees docs docs/_build/html


[testenv]
extras = tests
commands = pytest {posargs:-n auto}
passenv = SETUPTOOLS_SCM_PRETEND_VERSION


[testenv:py3{7,10,11}]
extras = cov
# Python 3.6+ has a number of compile-time warnings on invalid string escapes.
# PYTHONWARNINGS=d and --no-compile below make them visible during the Tox run.
install_command = python -Im pip install --no-compile {opts} {packages}
setenv =
    HATCH_BUILD_HOOK_ENABLE_AUTORUN=1
    COVERAGE_PROCESS_START={toxinidir}/pyproject.toml
    PYTHONWARNINGS=d
commands = coverage run -m pytest {posargs:-n auto}


[testenv:coverage-report]
basepython = python3.11
depends = py3{7,10,11}
skip_install = true
deps = coverage[toml]>=5.3
commands =
    coverage combine
    coverage report


[testenv:pre-commit]
skip_install = true
deps = pre-commit
commands = pre-commit run --all-files


[testenv:changelog]
deps = towncrier
skip_install = true
commands = towncrier build --version main --draft


[testenv:mypy]
deps = mypy>=0.991
commands =
    mypy src/attrs/__init__.pyi src/attr/__init__.pyi src/attr/_typing_compat.pyi src/attr/_version_info.pyi src/attr/converters.pyi src/attr/exceptions.pyi src/attr/filters.pyi src/attr/setters.pyi src/attr/validators.pyi
    mypy tests/typing_example.py


[testenv:pyright]
# Install and configure node and pyright
# This *could* be folded into a custom install_command
# Use nodeenv to configure node in the running tox virtual environment
# Seeing errors using "nodeenv -p"
# Use npm install -g to install "globally" into the virtual environment
deps = nodeenv
commands =
    nodeenv --prebuilt --node=lts --force {envdir}
    npm install -g --no-package-lock --no-save pyright
    pytest tests/test_pyright.py -vv


[testenv:docset]
deps = doc2dash
extras = docs
allowlist_externals =
    rm
    cp
    tar
commands =
    rm -rf attrs.docset attrs.tgz docs/_build
    sphinx-build -n -T -W -b html -d {envtmpdir}/doctrees docs docs/_build/html
    doc2dash --index-page index.html --icon docs/_static/docset-icon.png --online-redirect-url https://www.attrs.org/en/latest/ docs/_build/html
    cp docs/_static/docset-icon@2x.png attrs.docset/icon@2x.png
    tar --exclude='.DS_Store' -cvzf attrs.tgz attrs.docset

2025-07-03 18:36:29.758 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-03 18:36:35.075 | INFO     | Model API request cost info: input_tokens=1251, output_tokens=647, cost=0.009598
2025-07-03 18:36:35.076 | SUCCESS  | Successfully extracted environment config
2025-07-03 18:36:35.076 | INFO     | ******
2025-07-03 18:36:35.076 | INFO     | List of libraries:
- pytest
- sphinx-build
- coverage
- pre-commit
- towncrier
- mypy>=0.991
- nodeenv
- pyright (installed via npm)
- doc2dash

Key environment variables:
- SETUPTOOLS_SCM_PRETEND_VERSION (passed through)
- HATCH_BUILD_HOOK_ENABLE_AUTORUN=1 (for py3{7,10,11} envs)
- COVERAGE_PROCESS_START={toxinidir}/pyproject.toml (for py3{7,10,11} envs)
- PYTHONWARNINGS=d (for py3{7,10,11} envs)

Runtime Requirements:
- Python 3.7, 3.8, 3.9, 3.10, 3.11, 3.12, PyPy3
- Python 3.11 (for docs and coverage-report)
- Node.js (LTS version, for pyright env)
- npm (for pyright env)

Testing:
- Test framework: pytest
- Test environments: `py37`, `py38`, `py39`, `py310`, `py311`, `py312`, `pypy3` (core tests), `mypy` (type checking), `pyright` (static analysis), `pre-commit` (linting/formatting), `coverage-report` (reporting).
- Default install command: `python -Im pip install {opts} {packages}` (for `py3{7,10,11}` specifically set to `--no-compile`)
- Core test command: `pytest {posargs:-n auto}`
- Coverage test command: `coverage run -m pytest {posargs:-n auto}` (for `py3{7,10,11}`)
- MyPy test commands:
    - `mypy src/attrs/__init__.pyi src/attr/__init__.pyi src/attr/_typing_compat.pyi src/attr/_version_info.pyi src/attr/converters.pyi src/attr/exceptions.pyi src/attr/filters.pyi src/attr/setters.pyi src/attr/validators.pyi`
    - `mypy tests/typing_example.py`
- Pyright test commands (after node/pyright setup):
    - `nodeenv --prebuilt --node=lts --force {envdir}`
    - `npm install -g --no-package-lock --no-save pyright`
    - `pytest tests/test_pyright.py -vv`
- Pre-commit command: `pre-commit run --all-files`
- Coverage report commands:
    - `coverage combine`
    - `coverage report`
2025-07-03 18:36:35.076 | INFO     | ******
2025-07-03 18:36:35.077 | DEBUG    | Result of dispatch_intent: ('List of libraries:\n- pytest\n- sphinx-build\n- coverage\n- pre-commit\n- towncrier\n- mypy>=0.991\n- nodeenv\n- pyright (installed via npm)\n- doc2dash\n\nKey environment variables:\n- SETUPTOOLS_SCM_PRETEND_VERSION (passed through)\n- HATCH_BUILD_HOOK_ENABLE_AUTORUN=1 (for py3{7,10,11} envs)\n- COVERAGE_PROCESS_START={toxinidir}/pyproject.toml (for py3{7,10,11} envs)\n- PYTHONWARNINGS=d (for py3{7,10,11} envs)\n\nRuntime Requirements:\n- Python 3.7, 3.8, 3.9, 3.10, 3.11, 3.12, PyPy3\n- Python 3.11 (for docs and coverage-report)\n- Node.js (LTS version, for pyright env)\n- npm (for pyright env)\n\nTesting:\n- Test framework: pytest\n- Test environments: `py37`, `py38`, `py39`, `py310`, `py311`, `py312`, `pypy3` (core tests), `mypy` (type checking), `pyright` (static analysis), `pre-commit` (linting/formatting), `coverage-report` (reporting).\n- Default install command: `python -Im pip install {opts} {packages}` (for `py3{7,10,11}` specifically set to `--no-compile`)\n- Core test command: `pytest {posargs:-n auto}`\n- Coverage test command: `coverage run -m pytest {posargs:-n auto}` (for `py3{7,10,11}`)\n- MyPy test commands:\n    - `mypy src/attrs/__init__.pyi src/attr/__init__.pyi src/attr/_typing_compat.pyi src/attr/_version_info.pyi src/attr/converters.pyi src/attr/exceptions.pyi src/attr/filters.pyi src/attr/setters.pyi src/attr/validators.pyi`\n    - `mypy tests/typing_example.py`\n- Pyright test commands (after node/pyright setup):\n    - `nodeenv --prebuilt --node=lts --force {envdir}`\n    - `npm install -g --no-package-lock --no-save pyright`\n    - `pytest tests/test_pyright.py -vv`\n- Pre-commit command: `pre-commit run --all-files`\n- Coverage report commands:\n    - `coverage combine`\n    - `coverage report`', 'Get File Info', True)
2025-07-03 18:36:48.392 | INFO     | Model API request cost info: input_tokens=2493, output_tokens=808, cost=0.014313
2025-07-03 18:36:52.194 | INFO     | Model API request cost info: input_tokens=3400, output_tokens=241, cost=0.010910
2025-07-03 18:36:52.200 | DEBUG    | Trying to select search APIs in json. Try 1 of 5.
2025-07-03 18:36:55.043 | INFO     | Model API request cost info: input_tokens=908, output_tokens=243, cost=0.004700
2025-07-03 18:36:55.044 | DEBUG    | {
  "API_calls": [],
  "collected_information": "Summary of Collected Information:\n\n1.  Base Image: A Python 3.9 image (e.g., `python:3.9-slim-buster`) will be suitable as the base.\n2.  Working Directory: The `/app` directory inside the container will serve as the working directory, where the `attrs` repository will be copied.\n3.  Dependencies:\n    *   The project itself needs to be installed: `pip install .`\n    *   Key testing dependencies to install via `pip`:\n        *   `pytest`\n        *   `pytest-xdist[psutil]`\n        *   `zope.interface`\n        *   `cloudpickle`\n        *   `hypothesis`\n        *   `pympler`\n4.  Test Execution:\n    *   Framework: `pytest`\n    *   Command: `pytest tests/test_next_gen.py` (to run the specific target test file).",
  "terminate": true
}
2025-07-03 18:36:55.044 | DEBUG    | Extracted a valid json
2025-07-03 18:36:55.046 | INFO     | Trying to extract a dockerfile. Try 1 of 3.
2025-07-03 18:37:02.529 | INFO     | Model API request cost info: input_tokens=2342, output_tokens=344, cost=0.009295
2025-07-03 18:37:02.530 | INFO     | Raw dockerfile and produced in try 1. Writing dockerfile into file.
2025-07-03 18:37:02.541 | INFO     | Trying to extract a eval script. Try 1 of 3.
2025-07-03 18:37:07.235 | INFO     | Model API request cost info: input_tokens=2298, output_tokens=288, cost=0.008625
2025-07-03 18:37:07.236 | INFO     | Raw script and produced in try 1. Writing script into file.
2025-07-03 18:38:48.670 | DEBUG    | Result of dispatch_intent: ('Image built successfully!\nContainer 48c4ac651f6075b4c7689d42fa5142a879a7ddf52d99a03fcabd318a8dbd30b3 started.\nPatch applied successfully.\nFind test_output.txt! Waiting for analysis. ', 'Docker image python-attrs__attrs-1107-dockerfile1:latest built successfully.\nContainer started.\nPatch applied.\nObtain test results successfully.', True)
2025-07-03 18:38:48.672 | DEBUG    | Trying to analyze the test log. Try 1 of 3.
2025-07-03 18:38:54.446 | INFO     | Model API request cost info: input_tokens=1972, output_tokens=62, cost=0.005550
2025-07-03 18:38:54.447 | DEBUG    | {
    "is_finish": true,
    "guidance_for_write_dockerfile_agent": "",
    "guidance_for_write_eval_script_agent": "",
    "guidance_for_context_retrieval_agent": ""
}
2025-07-03 18:38:54.447 | DEBUG    | Extracted a valid json
2025-07-03 18:38:54.462 | INFO     | Removed project repository at testbed/python-attrs__attrs-1107_2025-07-03_17-42-49
2025-07-03 18:38:54.464 | INFO     | Task python-attrs__attrs-1107 completed successfully.
