2025-07-03 17:50:23.808 | INFO     | Model API request cost info: input_tokens=1005, output_tokens=364, cost=0.006153
2025-07-03 17:50:23.847 | DEBUG    | Trying to select search APIs in json. Try 1 of 5.
2025-07-03 17:50:25.741 | INFO     | Model API request cost info: input_tokens=1032, output_tokens=222, cost=0.004800
2025-07-03 17:50:25.742 | DEBUG    | {
  "API_calls": [
    "browse_file_for_environment_info(\"pyproject.toml\", \"Python version, project dependencies, build system dependencies.\")",
    "browse_file_for_environment_info(\"tox.ini\", \"Python versions used for testing, test-specific dependencies, and command line arguments to run tests.\")",
    "browse_file_for_environment_info(\"setup.py\", \"Project dependencies, entry points, and any specific installation instructions.\")",
    "browse_file_for_environment_info(\"README.md\", \"Installation steps, development setup, and general instructions for running tests.\")"
  ],
  "collected_information": "Information about the 'python-attrs/attrs' repository environment setup and test execution will be gathered by examining 'pyproject.toml', 'tox.ini', 'setup.py', and 'README.md' for dependency information, language versions, and test execution instructions.",
  "terminate": false
}
2025-07-03 17:50:25.742 | DEBUG    | Extracted a valid json
2025-07-03 17:50:25.746 | INFO     | entering browse
2025-07-03 17:50:25.746 | INFO     | # SPDX-License-Identifier: MIT

[build-system]
requires = ["setuptools>=40.6.0", "wheel"]
build-backend = "setuptools.build_meta"


[tool.pytest.ini_options]
addopts = ["-ra", "--strict-markers", "--strict-config"]
xfail_strict = true
testpaths = "tests"
filterwarnings = ["once::Warning", "ignore:::pympler[.*]"]


[tool.coverage.run]
parallel = true
branch = true
source_pkgs = ["attr", "attrs"]

[tool.coverage.paths]
source = ["src", ".tox/*/site-packages"]

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    # PyPy is unacceptably slow under coverage.
    "if PYPY:",
]


[tool.black]
line-length = 79


[tool.isort]
profile = "attrs"


[tool.interrogate]
verbose = 2
fail-under = 100
whitelist-regex = ["test_.*"]


[tool.check-wheel-contents]
toplevel = ["attr", "attrs"]


[tool.towncrier]
name = "attrs"
filename = "CHANGELOG.rst"
template = "changelog.d/towncrier_template.rst"
issue_format = "`#{issue} <https://github.com/python-attrs/attrs/issues/{issue}>`_"
directory = "changelog.d"
title_format = "{version} ({project_date})"
underlines = ["-", "^"]

[[tool.towncrier.section]]
path = ""

[[tool.towncrier.type]]
directory = "breaking"
name = "Backwards-incompatible Changes"
showcontent = true

[[tool.towncrier.type]]
directory = "deprecation"
name = "Deprecations"
showcontent = true

[[tool.towncrier.type]]
directory = "change"
name = "Changes"
showcontent = true


[tool.mypy]
disallow_untyped_defs = true
check_untyped_defs = true

2025-07-03 17:50:25.746 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-03 17:50:32.189 | INFO     | Model API request cost info: input_tokens=884, output_tokens=229, cost=0.004500
2025-07-03 17:50:32.190 | SUCCESS  | Successfully extracted environment config
2025-07-03 17:50:32.192 | INFO     | ******
2025-07-03 17:50:32.193 | INFO     | List of libraries:
- setuptools>=40.6.0 (build system)
- wheel (build system)
- pytest (tool)
- coverage (tool)
- black (tool)
- isort (tool)
- interrogate (tool)
- check-wheel-contents (tool)
- towncrier (tool)
- mypy (tool)

Key environment variables:
- None

Runtime Requirements:
- Python (implied by the project nature)

Testing:
- Test framework: pytest
- Test paths: tests
- Test command options: `-ra --strict-markers --strict-config` (these options are added to the pytest command)

Custom Query:
- Python version: Not explicitly specified in this `pyproject.toml` file.
- Project dependencies: Not listed in this `pyproject.toml` file (e.g., no `[project].dependencies` section).
- Build system dependencies:
    - setuptools>=40.6.0
    - wheel
2025-07-03 17:50:32.193 | INFO     | ******
2025-07-03 17:50:32.193 | DEBUG    | Result of dispatch_intent: ('List of libraries:\n- setuptools>=40.6.0 (build system)\n- wheel (build system)\n- pytest (tool)\n- coverage (tool)\n- black (tool)\n- isort (tool)\n- interrogate (tool)\n- check-wheel-contents (tool)\n- towncrier (tool)\n- mypy (tool)\n\nKey environment variables:\n- None\n\nRuntime Requirements:\n- Python (implied by the project nature)\n\nTesting:\n- Test framework: pytest\n- Test paths: tests\n- Test command options: `-ra --strict-markers --strict-config` (these options are added to the pytest command)\n\nCustom Query:\n- Python version: Not explicitly specified in this `pyproject.toml` file.\n- Project dependencies: Not listed in this `pyproject.toml` file (e.g., no `[project].dependencies` section).\n- Build system dependencies:\n    - setuptools>=40.6.0\n    - wheel', 'Get File Info', True)
2025-07-03 17:50:32.193 | INFO     | entering browse
2025-07-03 17:50:32.193 | INFO     | # Keep docs in sync with docs env and .readthedocs.yml.
[gh-actions]
python =
    3.6: py36, mypy
    3.7: py37
    3.8: py38, changelog
    3.9: py39
    3.10: py310, mypy
    3.11: py311
    pypy-3: pypy3


[tox]
envlist = mypy,pre-commit,py36,py37,py38,py39,py310,py311,pypy3,pyright,manifest,docs,pypi-description,changelog,coverage-report
isolated_build = True


[testenv:docs]
# Keep basepython in sync with ci.yml/docs and .readthedocs.yml.
basepython = python3.10
extras = docs
commands =
    sphinx-build -n -T -W -b html -d {envtmpdir}/doctrees docs docs/_build/html
    sphinx-build -n -T -W -b doctest -d {envtmpdir}/doctrees docs docs/_build/html

[testenv]
extras = tests
commands = python -m pytest {posargs:-n auto}


[testenv:py36]
extras = cov
setenv = COVERAGE_PROCESS_START={toxinidir}/pyproject.toml
commands = coverage run -m pytest {posargs:-n auto}


[testenv:py310]
extras = cov
setenv =
    PYTHONWARNINGS=d
    {[testenv:py36]setenv}
commands = {[testenv:py36]commands}


[testenv:py311]
extras = cov
# Python 3.6+ has a number of compile-time warnings on invalid string escapes.
# PYTHONWARNINGS=d and --no-compile below make them visible during the Tox run.
install_command = python -m pip install --no-compile {opts} {packages}
setenv =
    PYTHONWARNINGS=d
    {[testenv:py36]setenv}
# xdist is currently broken on 3.11rc2
commands = coverage run -m pytest {posargs}


[testenv:coverage-report]
basepython = python3.10
depends = py36,py310
skip_install = true
deps = coverage[toml]>=5.3
commands =
    coverage combine
    coverage report


[testenv:pre-commit]
skip_install = true
deps = pre-commit
passenv = HOMEPATH  # needed on Windows
commands = pre-commit run --all-files --show-diff-on-failure


[testenv:manifest]
basepython = python3.10
deps = check-manifest
skip_install = true
commands = check-manifest


[testenv:pypi-description]
basepython = python3.8
skip_install = true
deps =
    twine
    pip >= 18.0.0
commands =
    pip wheel -w {envtmpdir}/build --no-deps .
    twine check {envtmpdir}/build/*


[testenv:changelog]
basepython = python3.8
deps = towncrier
skip_install = true
commands = towncrier build --version UNRELEASED --draft


[testenv:mypy]
deps = mypy>=0.902
commands =
    mypy src/attrs/__init__.pyi src/attr/__init__.pyi src/attr/_typing_compat.pyi src/attr/_version_info.pyi src/attr/converters.pyi src/attr/exceptions.pyi src/attr/filters.pyi src/attr/setters.pyi src/attr/validators.pyi
    mypy tests/typing_example.py


[testenv:pyright]
# Install and configure node and pyright
# This *could* be folded into a custom install_command
# Use nodeenv to configure node in the running tox virtual environment
# Seeing errors using "nodeenv -p"
# Use npm install -g to install "globally" into the virtual environment
deps = nodeenv
commands =
    nodeenv --prebuilt --node=lts --force {envdir}
    npm install -g --no-package-lock --no-save pyright
    pytest tests/test_pyright.py -vv


[testenv:docset]
deps = doc2dash
extras = docs
allowlist_externals =
    rm
    cp
    tar
commands =
    rm -rf attrs.docset attrs.tgz docs/_build
    sphinx-build -n -T -W -b html -d {envtmpdir}/doctrees docs docs/_build/html
    doc2dash --index-page index.html --icon docs/_static/docset-icon.png --online-redirect-url https://www.attrs.org/en/latest/ docs/_build/html
    cp docs/_static/docset-icon@2x.png attrs.docset/icon@2x.png
    tar --exclude='.DS_Store' -cvzf attrs.tgz attrs.docset

2025-07-03 17:50:32.194 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-03 17:50:49.274 | INFO     | Model API request cost info: input_tokens=1580, output_tokens=800, cost=0.011950
2025-07-03 17:50:49.275 | SUCCESS  | Successfully extracted environment config
2025-07-03 17:50:49.275 | INFO     | ******
2025-07-03 17:50:49.276 | INFO     | List of libraries:
- pytest (implied by test commands)
- coverage[toml]>=5.3
- mypy>=0.902
- nodeenv
- pre-commit
- check-manifest
- twine
- pip >= 18.0.0
- towncrier
- doc2dash
- sphinx-build (used for docs, but mentioned in tox env)
- pyright (installed via npm within tox env)

Key environment variables:
- COVERAGE_PROCESS_START={toxinidir}/pyproject.toml (used by `py36`, `py310`, `py311` test environments)
- PYTHONWARNINGS=d (used by `py310`, `py311` test environments)
- HOMEPATH (passed through for `pre-commit` on Windows)

Runtime Requirements:
- Python 3.6
- Python 3.7
- Python 3.8
- Python 3.9
- Python 3.10
- Python 3.11
- PyPy3
- Node.js (specifically `lts` via `nodeenv` for `pyright` tests)
- npm (for installing `pyright`)

Testing:
- Default test framework: pytest

Python versions used for testing:
- Python 3.6 (via `py36` environment)
- Python 3.7 (via `py37` environment)
- Python 3.8 (via `py38` environment)
- Python 3.9 (via `py39` environment)
- Python 3.10 (via `py310` environment)
- Python 3.11 (via `py311` environment)
- PyPy3 (via `pypy3` environment)

Test-specific dependencies:
- `tests` extra (specified by `extras = tests` in `[testenv]`)
- `cov` extra (specified by `extras = cov` in `[testenv:py36]`, `[testenv:py310]`, `[testenv:py311]`)
- `mypy>=0.902` (for `mypy` static analysis tests)
- `nodeenv` (for setting up Node.js for `pyright` tests)
- `pyright` (installed globally within the `nodeenv` for `pyright` tests)
- `coverage[toml]>=5.3` (for `coverage-report` and implied for `cov` extras)

Command line arguments to run tests:
- General tests: `python -m pytest {posargs:-n auto}`
- Coverage tests (Python 3.6, 3.10): `coverage run -m pytest {posargs:-n auto}`
- Coverage tests (Python 3.11): `coverage run -m pytest {posargs}`
- Pyright tests: `pytest tests/test_pyright.py -vv`
- Mypy checks:
    - `mypy src/attrs/__init__.pyi src/attr/__init__.pyi src/attr/_typing_compat.pyi src/attr/_version_info.pyi src/attr/converters.pyi src/attr/exceptions.pyi src/attr/filters.pyi src/attr/setters.pyi src/attr/validators.pyi`
    - `mypy tests/typing_example.py`
- Coverage report commands:
    - `coverage combine`
    - `coverage report`
2025-07-03 17:50:49.276 | INFO     | ******
2025-07-03 17:50:49.276 | DEBUG    | Result of dispatch_intent: ('List of libraries:\n- pytest (implied by test commands)\n- coverage[toml]>=5.3\n- mypy>=0.902\n- nodeenv\n- pre-commit\n- check-manifest\n- twine\n- pip >= 18.0.0\n- towncrier\n- doc2dash\n- sphinx-build (used for docs, but mentioned in tox env)\n- pyright (installed via npm within tox env)\n\nKey environment variables:\n- COVERAGE_PROCESS_START={toxinidir}/pyproject.toml (used by `py36`, `py310`, `py311` test environments)\n- PYTHONWARNINGS=d (used by `py310`, `py311` test environments)\n- HOMEPATH (passed through for `pre-commit` on Windows)\n\nRuntime Requirements:\n- Python 3.6\n- Python 3.7\n- Python 3.8\n- Python 3.9\n- Python 3.10\n- Python 3.11\n- PyPy3\n- Node.js (specifically `lts` via `nodeenv` for `pyright` tests)\n- npm (for installing `pyright`)\n\nTesting:\n- Default test framework: pytest\n\nPython versions used for testing:\n- Python 3.6 (via `py36` environment)\n- Python 3.7 (via `py37` environment)\n- Python 3.8 (via `py38` environment)\n- Python 3.9 (via `py39` environment)\n- Python 3.10 (via `py310` environment)\n- Python 3.11 (via `py311` environment)\n- PyPy3 (via `pypy3` environment)\n\nTest-specific dependencies:\n- `tests` extra (specified by `extras = tests` in `[testenv]`)\n- `cov` extra (specified by `extras = cov` in `[testenv:py36]`, `[testenv:py310]`, `[testenv:py311]`)\n- `mypy>=0.902` (for `mypy` static analysis tests)\n- `nodeenv` (for setting up Node.js for `pyright` tests)\n- `pyright` (installed globally within the `nodeenv` for `pyright` tests)\n- `coverage[toml]>=5.3` (for `coverage-report` and implied for `cov` extras)\n\nCommand line arguments to run tests:\n- General tests: `python -m pytest {posargs:-n auto}`\n- Coverage tests (Python 3.6, 3.10): `coverage run -m pytest {posargs:-n auto}`\n- Coverage tests (Python 3.11): `coverage run -m pytest {posargs}`\n- Pyright tests: `pytest tests/test_pyright.py -vv`\n- Mypy checks:\n    - `mypy src/attrs/__init__.pyi src/attr/__init__.pyi src/attr/_typing_compat.pyi src/attr/_version_info.pyi src/attr/converters.pyi src/attr/exceptions.pyi src/attr/filters.pyi src/attr/setters.pyi src/attr/validators.pyi`\n    - `mypy tests/typing_example.py`\n- Coverage report commands:\n    - `coverage combine`\n    - `coverage report`', 'Get File Info', True)
2025-07-03 17:50:49.276 | INFO     | entering browse
2025-07-03 17:50:49.276 | INFO     | # SPDX-License-Identifier: MIT

import codecs
import os
import re

from setuptools import find_packages, setup


###############################################################################

NAME = "attrs"
PACKAGES = find_packages(where="src")
META_PATH = os.path.join("src", "attr", "__init__.py")
KEYWORDS = ["class", "attribute", "boilerplate", "dataclass"]
PROJECT_URLS = {
    "Documentation": "https://www.attrs.org/",
    "Changelog": "https://www.attrs.org/en/stable/changelog.html",
    "Bug Tracker": "https://github.com/python-attrs/attrs/issues",
    "Source Code": "https://github.com/python-attrs/attrs",
    "Funding": "https://github.com/sponsors/hynek",
    "Tidelift": "https://tidelift.com/subscription/pkg/pypi-attrs?"
    "utm_source=pypi-attrs&utm_medium=pypi",
    "Ko-fi": "https://ko-fi.com/the_hynek",
}
CLASSIFIERS = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
INSTALL_REQUIRES = []
EXTRAS_REQUIRE = {
    "docs": [
        "furo",
        "sphinx",
        "myst-parser",
        "zope.interface",
        "sphinx-notfound-page",
        "sphinxcontrib-towncrier",
        "towncrier",
    ],
    "tests-no-zope": [
        # For regression test to ensure cloudpickle compat doesn't break.
        'cloudpickle; python_implementation == "CPython"',
        "hypothesis",
        "pympler",
        # 4.3.0 dropped last use of `convert`
        "pytest>=4.3.0",
        # psutil extra is needed for correct core count detection.
        "pytest-xdist[psutil]",
        # Since the mypy error messages keep changing, we have to keep updating
        # this pin.
        "mypy>=0.971,<0.990; python_implementation == 'CPython'",
        "pytest-mypy-plugins; python_implementation == 'CPython' and "
        "python_version<'3.11'",
    ],
    "tests": [
        "attrs[tests-no-zope]",
        "zope.interface",
    ],
    "cov": [
        "attrs[tests]",
        "coverage-enable-subprocess",
        # Ensure coverage is new enough for `source_pkgs`.
        "coverage[toml]>=5.3",
    ],
    "dev": ["attrs[tests,docs]"],
}
# Don't break Paul unnecessarily just yet. C.f. #685
EXTRAS_REQUIRE["tests_no_zope"] = EXTRAS_REQUIRE["tests-no-zope"]


###############################################################################

HERE = os.path.abspath(os.path.dirname(__file__))


def read(*parts):
    """
    Build an absolute path from *parts* and return the contents of the
    resulting file.  Assume UTF-8 encoding.
    """
    with codecs.open(os.path.join(HERE, *parts), "rb", "utf-8") as f:
        return f.read()


META_FILE = read(META_PATH)


def find_meta(meta):
    """
    Extract __*meta*__ from META_FILE.
    """
    meta_match = re.search(
        rf"^__{meta}__ = ['\"]([^'\"]*)['\"]", META_FILE, re.M
    )
    if meta_match:
        return meta_match.group(1)
    raise RuntimeError(f"Unable to find __{meta}__ string.")


VERSION = find_meta("version")
URL = find_meta("url")
LONG = read("README.md")

if __name__ == "__main__":
    setup(
        name=NAME,
        description=find_meta("description"),
        license=find_meta("license"),
        url=URL,
        project_urls=PROJECT_URLS,
        version=VERSION,
        author=find_meta("author"),
        author_email=find_meta("email"),
        maintainer=find_meta("author"),
        maintainer_email=find_meta("email"),
        keywords=KEYWORDS,
        long_description=LONG,
        long_description_content_type="text/markdown",
        packages=PACKAGES,
        package_dir={"": "src"},
        python_requires=">=3.6",
        zip_safe=False,
        classifiers=CLASSIFIERS,
        install_requires=INSTALL_REQUIRES,
        extras_require=EXTRAS_REQUIRE,
        include_package_data=True,
    )

2025-07-03 17:50:49.276 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-03 17:50:54.006 | INFO     | Model API request cost info: input_tokens=1683, output_tokens=543, cost=0.009638
2025-07-03 17:50:54.007 | SUCCESS  | Successfully extracted environment config
2025-07-03 17:50:54.007 | INFO     | ******
2025-07-03 17:50:54.007 | INFO     | List of libraries:
- Initial `INSTALL_REQUIRES` is empty, indicating core dependencies might be minimal or handled differently.

Optional Dependencies (from `EXTRAS_REQUIRE`):
- **docs**:
    - furo
    - sphinx
    - myst-parser
    - zope.interface
    - sphinx-notfound-page
    - sphinxcontrib-towncrier
    - towncrier
- **tests-no-zope**:
    - cloudpickle (conditional: `python_implementation == "CPython"`)
    - hypothesis
    - pympler
    - pytest>=4.3.0
    - pytest-xdist[psutil]
    - mypy>=0.971,<0.990 (conditional: `python_implementation == 'CPython'`)
    - pytest-mypy-plugins (conditional: `python_implementation == 'CPython' and python_version<'3.11'`)
- **tests**:
    - attrs[tests-no-zope] (inherits all dependencies from `tests-no-zope`)
    - zope.interface
- **cov**:
    - attrs[tests] (inherits all dependencies from `tests`)
    - coverage-enable-subprocess
    - coverage[toml]>=5.3
- **dev**:
    - attrs[tests,docs] (inherits all dependencies from `tests` and `docs`)

Entry Points:
- No explicit entry points (e.g., console scripts) are defined in this `setup.py`.

Runtime Requirements:
- Python >=3.6
- Specifically mentions support for Python 3.6, 3.7, 3.8, 3.9, 3.10, 3.11.
- Supports CPython and PyPy implementations.

Installation Instructions:
- To install the core package: `pip install .`
- To install with specific optional dependencies (e.g., for development or testing):
    - `pip install ".[docs]"`
    - `pip install ".[tests]"`
    - `pip install ".[tests-no-zope]"` (also aliased as `.[tests_no_zope]`)
    - `pip install ".[cov]"`
    - `pip install ".[dev]"`
- For an editable installation during development: `pip install -e ".[dev]"` (or other desired extras).
2025-07-03 17:50:54.007 | INFO     | ******
2025-07-03 17:50:54.008 | DEBUG    | Result of dispatch_intent: ('List of libraries:\n- Initial `INSTALL_REQUIRES` is empty, indicating core dependencies might be minimal or handled differently.\n\nOptional Dependencies (from `EXTRAS_REQUIRE`):\n- **docs**:\n    - furo\n    - sphinx\n    - myst-parser\n    - zope.interface\n    - sphinx-notfound-page\n    - sphinxcontrib-towncrier\n    - towncrier\n- **tests-no-zope**:\n    - cloudpickle (conditional: `python_implementation == "CPython"`)\n    - hypothesis\n    - pympler\n    - pytest>=4.3.0\n    - pytest-xdist[psutil]\n    - mypy>=0.971,<0.990 (conditional: `python_implementation == \'CPython\'`)\n    - pytest-mypy-plugins (conditional: `python_implementation == \'CPython\' and python_version<\'3.11\'`)\n- **tests**:\n    - attrs[tests-no-zope] (inherits all dependencies from `tests-no-zope`)\n    - zope.interface\n- **cov**:\n    - attrs[tests] (inherits all dependencies from `tests`)\n    - coverage-enable-subprocess\n    - coverage[toml]>=5.3\n- **dev**:\n    - attrs[tests,docs] (inherits all dependencies from `tests` and `docs`)\n\nEntry Points:\n- No explicit entry points (e.g., console scripts) are defined in this `setup.py`.\n\nRuntime Requirements:\n- Python >=3.6\n- Specifically mentions support for Python 3.6, 3.7, 3.8, 3.9, 3.10, 3.11.\n- Supports CPython and PyPy implementations.\n\nInstallation Instructions:\n- To install the core package: `pip install .`\n- To install with specific optional dependencies (e.g., for development or testing):\n    - `pip install ".[docs]"`\n    - `pip install ".[tests]"`\n    - `pip install ".[tests-no-zope]"` (also aliased as `.[tests_no_zope]`)\n    - `pip install ".[cov]"`\n    - `pip install ".[dev]"`\n- For an editable installation during development: `pip install -e ".[dev]"` (or other desired extras).', 'Get File Info', True)
2025-07-03 17:50:54.008 | INFO     | entering browse
2025-07-03 17:50:54.008 | INFO     | <p align="center">
   <a href="https://www.attrs.org/">
      <picture>
         <source srcset="https://raw.githubusercontent.com/python-attrs/attrs/main/docs/_static/attrs_logo_white.svg" media="(prefers-color-scheme: dark)">
         <img src="https://raw.githubusercontent.com/python-attrs/attrs/main/docs/_static/attrs_logo.svg" width="35%" alt="attrs" />
      </picture>
   </a>
</p>

<p align="center">
   <a href="https://www.attrs.org/en/stable/">
       <img src="https://img.shields.io/badge/Docs-RTD-black" alt="Documentation" />
   </a>
   <a href="https://github.com/python-attrs/attrs/blob/main/LICENSE">
      <img src="https://img.shields.io/badge/license-MIT-C06524" alt="License: MIT" />
   </a>
   <a href="https://bestpractices.coreinfrastructure.org/projects/6482"><img src="https://bestpractices.coreinfrastructure.org/projects/6482/badge"></a>
   <a href="https://pypi.org/project/attrs/">
      <img src="https://img.shields.io/pypi/v/attrs" />
   </a>
   <a href="https://pepy.tech/project/attrs">
      <img src="https://static.pepy.tech/personalized-badge/attrs?period=month&units=international_system&left_color=grey&right_color=blue&left_text=Downloads%20/%20Month" alt="Downloads per month" />
   </a>
   <a href="https://zenodo.org/badge/latestdoi/29918975"><img src="https://zenodo.org/badge/29918975.svg" alt="DOI"></a>
</p>

<!-- teaser-begin -->

*attrs* is the Python package that will bring back the **joy** of **writing classes** by relieving you from the drudgery of implementing object protocols (aka [dunder methods](https://www.attrs.org/en/latest/glossary.html#term-dunder-methods)).
[Trusted by NASA](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/personalizing-your-profile#list-of-qualifying-repositories-for-mars-2020-helicopter-contributor-achievement) for Mars missions since 2020!

Its main goal is to help you to write **concise** and **correct** software without slowing down your code.


## Sponsors

*attrs* would not be possible without our [amazing sponsors](https://github.com/sponsors/hynek).
Especially those generously supporting us at the *The Organization* tier and higher:

<p align="center">
   <a href="https://www.variomedia.de/">
      <img src="https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/Variomedia.svg" width="200" height="60"></img>
   </a>

   <a href="https://tidelift.com/subscription/pkg/pypi-attrs?utm_source=pypi-attrs&utm_medium=referral&utm_campaign=enterprise&utm_term=repo">
      <img src="https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/Tidelift.svg" width="200" height="60"></img>
   </a>

   <a href="https://sentry.io/">
      <img src="https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/Sentry.svg" width="200" height="60"></img>
   </a>

   <a href="https://filepreviews.io/">
      <img src="https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/FilePreviews.svg" width="200" height="60"></img>
   </a>
</p>

<p align="center">
   <strong>Please consider <a href="https://github.com/sponsors/hynek">joining them</a> to help make <em>attrs</em>’s maintenance more sustainable!</strong>
</p>

<!-- teaser-end -->

## Example

*attrs* gives you a class decorator and a way to declaratively define the attributes on that class:

<!-- code-begin -->

```pycon
>>> from attrs import asdict, define, make_class, Factory

>>> @define
... class SomeClass:
...     a_number: int = 42
...     list_of_numbers: list[int] = Factory(list)
...
...     def hard_math(self, another_number):
...         return self.a_number + sum(self.list_of_numbers) * another_number


>>> sc = SomeClass(1, [1, 2, 3])
>>> sc
SomeClass(a_number=1, list_of_numbers=[1, 2, 3])

>>> sc.hard_math(3)
19
>>> sc == SomeClass(1, [1, 2, 3])
True
>>> sc != SomeClass(2, [3, 2, 1])
True

>>> asdict(sc)
{'a_number': 1, 'list_of_numbers': [1, 2, 3]}

>>> SomeClass()
SomeClass(a_number=42, list_of_numbers=[])

>>> C = make_class("C", ["a", "b"])
>>> C("foo", "bar")
C(a='foo', b='bar')
```

After *declaring* your attributes, *attrs* gives you:

- a concise and explicit overview of the class's attributes,
- a nice human-readable `__repr__`,
- equality-checking methods,
- an initializer,
- and much more,

*without* writing dull boilerplate code again and again and *without* runtime performance penalties.

**Hate type annotations**!?
No problem!
Types are entirely **optional** with *attrs*.
Simply assign `attrs.field()` to the attributes instead of annotating them with types.

---

This example uses *attrs*'s modern APIs that have been introduced in version 20.1.0, and the *attrs* package import name that has been added in version 21.3.0.
The classic APIs (`@attr.s`, `attr.ib`, plus their serious-business aliases) and the `attr` package import name will remain **indefinitely**.

Please check out [On The Core API Names](https://www.attrs.org/en/latest/names.html) for a more in-depth explanation.


## Data Classes

On the tin, *attrs* might remind you of `dataclasses` (and indeed, `dataclasses` [are a descendant](https://hynek.me/articles/import-attrs/) of *attrs*).
In practice it does a lot more and is more flexible.
For instance it allows you to define [special handling of NumPy arrays for equality checks](https://www.attrs.org/en/stable/comparison.html#customization), or allows more ways to [plug into the initialization process](https://www.attrs.org/en/stable/init.html#hooking-yourself-into-initialization).

For more details, please refer to our [comparison page](https://www.attrs.org/en/stable/why.html#data-classes).


## Project Information

- [**Changelog**](https://www.attrs.org/en/stable/changelog.html)
- [**Documentation**](https://www.attrs.org/)
- [**PyPI**](https://pypi.org/project/attrs/)
- [**Source Code**](https://github.com/python-attrs/attrs)
- [**Contributing**](https://github.com/python-attrs/attrs/blob/main/.github/CONTRIBUTING.md)
- [**Third-party Extensions**](https://github.com/python-attrs/attrs/wiki/Extensions-to-attrs)
- **License**: [MIT](https://www.attrs.org/en/latest/license.html)
- **Get Help**: please use the `python-attrs` tag on [StackOverflow](https://stackoverflow.com/questions/tagged/python-attrs)
- **Supported Python Versions**: 3.6 and later


### *attrs* for Enterprise

Available as part of the Tidelift Subscription.

The maintainers of *attrs* and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source packages you use to build your applications.
Save time, reduce risk, and improve code health, while paying the maintainers of the exact packages you use.
[Learn more.](https://tidelift.com/subscription/pkg/pypi-attrs?utm_source=pypi-attrs&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)

2025-07-03 17:50:54.008 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-03 17:50:56.873 | INFO     | Model API request cost info: input_tokens=2502, output_tokens=142, cost=0.007675
2025-07-03 17:50:56.874 | SUCCESS  | Successfully extracted environment config
2025-07-03 17:50:56.874 | INFO     | ******
2025-07-03 17:50:56.874 | INFO     | Runtime Requirements:
- Python >=3.6

Testing:
- The provided `README.md` file does not contain specific test commands or setup instructions for running tests. It links to a "Contributing" guide which likely holds this information.

Custom Query Details:
- **Installation steps**: Not found in this `README.md`. It's a Python package, so standard `pip install attrs` is implied, but not explicitly stated.
- **Development setup**: Not found in this `README.md`. The "Contributing" guide might contain this.
- **General instructions for running tests**: Not found in this `README.md`.
2025-07-03 17:50:56.874 | INFO     | ******
2025-07-03 17:50:56.874 | DEBUG    | Result of dispatch_intent: ('Runtime Requirements:\n- Python >=3.6\n\nTesting:\n- The provided `README.md` file does not contain specific test commands or setup instructions for running tests. It links to a "Contributing" guide which likely holds this information.\n\nCustom Query Details:\n- **Installation steps**: Not found in this `README.md`. It\'s a Python package, so standard `pip install attrs` is implied, but not explicitly stated.\n- **Development setup**: Not found in this `README.md`. The "Contributing" guide might contain this.\n- **General instructions for running tests**: Not found in this `README.md`.', 'Get File Info', True)
2025-07-03 17:51:09.770 | INFO     | Model API request cost info: input_tokens=3196, output_tokens=904, cost=0.017030
2025-07-03 17:51:15.002 | INFO     | Model API request cost info: input_tokens=4199, output_tokens=508, cost=0.015578
2025-07-03 17:51:15.011 | DEBUG    | Trying to select search APIs in json. Try 1 of 5.
2025-07-03 17:51:18.587 | INFO     | Model API request cost info: input_tokens=1175, output_tokens=513, cost=0.008068
2025-07-03 17:51:18.587 | DEBUG    | {
"API_calls": [],
"collected_information": "### Summary of Collected Information:\n\n*   **Operating System**: Linux (standard for Docker containers, we'll use a Debian-based slim Python image).\n*   **Python Version**: Targeting **Python 3.11** as it's a recent version supported and extensively tested by the project's `tox.ini` and `setup.py`.\n*   **Build System**: `setuptools` and `wheel` were identified via `pyproject.toml`.\n*   **Core Dependencies**: The `setup.py`'s `INSTALL_REQUIRES` is empty, indicating minimal core runtime dependencies. All necessary testing dependencies are handled through \"extras\".\n*   **Development and Test Dependencies**:\n    *   The `tox.ini` and `setup.py` are the primary sources here.\n    *   We will install the project in editable mode using `pip install -e \".[tests,cov]\"`. This command, based on `setup.py`'s `EXTRAS_REQUIRE`, will pull in:\n        *   `pytest` (the main testing framework)\n        *   `coverage[toml]` (for test coverage reporting)\n        *   `mypy` (for type checking)\n        *   `hypothesis`, `pympler`, `pytest-xdist[psutil]`, `zope.interface`, `cloudpickle`, `pytest-mypy-plugins` and their transitive dependencies.\n    *   `psutil` (part of `pytest-xdist`) might require system-level build tools, so `build-essential` is needed.\n*   **Test Execution Commands**:\n    *   For `tests/dataclass_transform_example.py` and `tests/test_functional.py`: The `tox.ini` suggests running these with `coverage run -m pytest {posargs:-n auto}`. We'll use `coverage run -m pytest tests/dataclass_transform_example.py tests/test_functional.py -n auto`.\n    *   For `tests/typing_example.py`: The `tox.ini` explicitly shows `mypy tests/typing_example.py` for type checking.\n\nThis information is sufficient to create a robust Dockerfile and an accurate evaluation script.",
"terminate": true
}
2025-07-03 17:51:18.588 | DEBUG    | Extracted a valid json
2025-07-03 17:51:18.590 | INFO     | Trying to extract a dockerfile. Try 1 of 3.
2025-07-03 17:51:26.881 | INFO     | Model API request cost info: input_tokens=2619, output_tokens=413, cost=0.010677
2025-07-03 17:51:26.882 | INFO     | Raw dockerfile and produced in try 1. Writing dockerfile into file.
2025-07-03 17:51:26.892 | INFO     | Trying to extract a eval script. Try 1 of 3.
2025-07-03 17:51:34.401 | INFO     | Model API request cost info: input_tokens=2611, output_tokens=471, cost=0.011238
2025-07-03 17:51:34.402 | INFO     | Raw script and produced in try 1. Writing script into file.
2025-07-03 17:56:11.161 | DEBUG    | Result of dispatch_intent: ('Image built successfully!\nContainer 774090a5098ad081b1b653a466caa759931146b3c48eb13665cf9d6faa6d0c5e started.\nPatch applied successfully.\nFind test_output.txt! Waiting for analysis. ', 'Docker image python-attrs__attrs-1065-dockerfile1:latest built successfully.\nContainer started.\nPatch applied.\nObtain test results successfully.', True)
2025-07-03 17:56:11.209 | DEBUG    | Trying to analyze the test log. Try 1 of 3.
2025-07-03 17:56:28.734 | INFO     | Model API request cost info: input_tokens=4539, output_tokens=359, cost=0.014938
2025-07-03 17:56:28.737 | DEBUG    | {
    "is_finish": false,
    "guidance_for_write_dockerfile_agent": "",
    "guidance_for_write_eval_script_agent": "The `pytest` command incorrectly attempted to collect `tests/dataclass_transform_example.py`. This file contains `reveal_type` calls, which are specific to Mypy and are not recognized by pytest during runtime, leading to a `NameError`. `tests/dataclass_transform_example.py` should be handled by a type checker like Mypy, not pytest. Please modify the evaluation script as follows:\n\n1.  **Remove `tests/dataclass_transform_example.py` from the `pytest` command**: Change `coverage run -m pytest tests/dataclass_transform_example.py tests/test_functional.py -n auto` to `coverage run -m pytest tests/test_functional.py -n auto`.\n2.  **Add `tests/dataclass_transform_example.py` to the `mypy` command**: Change `mypy tests/typing_example.py` to `mypy tests/typing_example.py tests/dataclass_transform_example.py`.\n\nThe Mypy error (Line 107: `No overload variant of \"define\" matches argument type \"bool\"`) reported for `tests/typing_example.py` indicates a legitimate type checking issue within the target test file itself, meaning Mypy executed correctly and found a problem, rather than an environment or execution script issue.",
    "guidance_for_context_retrieval_agent": ""
}
2025-07-03 17:56:28.738 | DEBUG    | Extracted a valid json
2025-07-03 17:56:28.747 | INFO     | Trying to extract a eval script. Try 1 of 3.
2025-07-03 17:56:32.377 | INFO     | Model API request cost info: input_tokens=4354, output_tokens=482, cost=0.015705
2025-07-03 17:56:32.378 | INFO     | Raw script and produced in try 1. Writing script into file.
2025-07-03 17:59:43.051 | DEBUG    | Result of dispatch_intent: ('Image built successfully!\nContainer e3b40d3ce5623cd1af5e6212b76b83f402762af138d9d913d4ba4beddc3fb16e started.\nPatch applied successfully.\nFind test_output.txt! Waiting for analysis. ', 'Docker image python-attrs__attrs-1065-dockerfile2:latest built successfully.\nContainer started.\nPatch applied.\nObtain test results successfully.', True)
2025-07-03 17:59:43.053 | DEBUG    | Trying to analyze the test log. Try 1 of 3.
2025-07-03 18:00:03.399 | INFO     | Model API request cost info: input_tokens=3980, output_tokens=427, cost=0.014220
2025-07-03 18:00:03.400 | DEBUG    | {
    "is_finish": false,
    "guidance_for_write_dockerfile_agent": "",
    "guidance_for_write_eval_script_agent": "",
    "guidance_for_context_retrieval_agent": "The `mypy` checks for `tests/dataclass_transform_example.py` and `tests/typing_example.py` failed with type errors (e.g., 'Property \"a\" defined in \"Frozen\" is read-only', 'No overload variant of \"define\" matches argument type \"bool\"'). This typically indicates a version mismatch or incompatibility between the `attrs` library version (22.1 at commit 67dc8cc261a5ef64f576ce73f2281cc9021d8fb4), the installed `mypy` version, or the Python version (3.11). The current Dockerfile installs `mypy` as part of `pip install -e \".[tests,cov]\"`, which might pull in a `mypy` version that is too new or incompatible for the older `attrs` version on Python 3.11. To resolve this, please retrieve the following information from the `python-attrs/attrs` repository at commit `67dc8cc261a5ef64f576ce73f2281cc9021d8fb4`:\n1. Check `pyproject.toml`, `setup.cfg`, `requirements-test.txt`, or similar dependency specification files for any specific `mypy` version pins or recommended version ranges.\n2. Examine CI configuration files (e.g., `.github/workflows/`, `tox.ini`) to determine which exact `mypy` version the project was tested against when using Python 3.11 (if applicable for this commit) or Python 3.x closest to 3.11."
}
2025-07-03 18:00:03.403 | DEBUG    | Extracted a valid json
2025-07-03 18:00:10.781 | INFO     | Model API request cost info: input_tokens=1401, output_tokens=343, cost=0.006933
2025-07-03 18:00:10.791 | DEBUG    | Trying to select search APIs in json. Try 1 of 5.
2025-07-03 18:00:14.138 | INFO     | Model API request cost info: input_tokens=1010, output_tokens=205, cost=0.004575
2025-07-03 18:00:14.138 | DEBUG    | {
  "API_calls": [
    "browse_file_for_environment_info(\"tox.ini\", \"Look for mypy version, python version, test commands, and any other test-related dependencies.\")",
    "browse_file_for_environment_info(\"pyproject.toml\", \"Look for mypy version, general dependencies, and project requirements.\")",
    "browse_folder(\".github/workflows/\", \"1\")"
  ],
  "collected_information": "To address the `mypy` type error and configure the environment, the plan is to collect specific versioning information for `mypy` and Python, along with the standard test execution methodology. This involves examining `tox.ini`, `pyproject.toml`, and the `.github/workflows/` directory to identify relevant files for detailed inspection regarding mypy version, Python version, test commands, and general dependencies.",
  "terminate": false
}
2025-07-03 18:00:14.139 | DEBUG    | Extracted a valid json
2025-07-03 18:00:14.152 | INFO     | entering browse
2025-07-03 18:00:14.152 | INFO     | # Keep docs in sync with docs env and .readthedocs.yml.
[gh-actions]
python =
    3.6: py36, mypy
    3.7: py37
    3.8: py38, changelog
    3.9: py39
    3.10: py310, mypy
    3.11: py311
    pypy-3: pypy3


[tox]
envlist = mypy,pre-commit,py36,py37,py38,py39,py310,py311,pypy3,pyright,manifest,docs,pypi-description,changelog,coverage-report
isolated_build = True


[testenv:docs]
# Keep basepython in sync with ci.yml/docs and .readthedocs.yml.
basepython = python3.10
extras = docs
commands =
    sphinx-build -n -T -W -b html -d {envtmpdir}/doctrees docs docs/_build/html
    sphinx-build -n -T -W -b doctest -d {envtmpdir}/doctrees docs docs/_build/html

[testenv]
extras = tests
commands = python -m pytest {posargs:-n auto}


[testenv:py36]
extras = cov
setenv = COVERAGE_PROCESS_START={toxinidir}/pyproject.toml
commands = coverage run -m pytest {posargs:-n auto}


[testenv:py310]
extras = cov
setenv =
    PYTHONWARNINGS=d
    {[testenv:py36]setenv}
commands = {[testenv:py36]commands}


[testenv:py311]
extras = cov
# Python 3.6+ has a number of compile-time warnings on invalid string escapes.
# PYTHONWARNINGS=d and --no-compile below make them visible during the Tox run.
install_command = python -m pip install --no-compile {opts} {packages}
setenv =
    PYTHONWARNINGS=d
    {[testenv:py36]setenv}
# xdist is currently broken on 3.11rc2
commands = coverage run -m pytest {posargs}


[testenv:coverage-report]
basepython = python3.10
depends = py36,py310
skip_install = true
deps = coverage[toml]>=5.3
commands =
    coverage combine
    coverage report


[testenv:pre-commit]
skip_install = true
deps = pre-commit
passenv = HOMEPATH  # needed on Windows
commands = pre-commit run --all-files --show-diff-on-failure


[testenv:manifest]
basepython = python3.10
deps = check-manifest
skip_install = true
commands = check-manifest


[testenv:pypi-description]
basepython = python3.8
skip_install = true
deps =
    twine
    pip >= 18.0.0
commands =
    pip wheel -w {envtmpdir}/build --no-deps .
    twine check {envtmpdir}/build/*


[testenv:changelog]
basepython = python3.8
deps = towncrier
skip_install = true
commands = towncrier build --version UNRELEASED --draft


[testenv:mypy]
deps = mypy>=0.902
commands =
    mypy src/attrs/__init__.pyi src/attr/__init__.pyi src/attr/_typing_compat.pyi src/attr/_version_info.pyi src/attr/converters.pyi src/attr/exceptions.pyi src/attr/filters.pyi src/attr/setters.pyi src/attr/validators.pyi
    mypy tests/typing_example.py


[testenv:pyright]
# Install and configure node and pyright
# This *could* be folded into a custom install_command
# Use nodeenv to configure node in the running tox virtual environment
# Seeing errors using "nodeenv -p"
# Use npm install -g to install "globally" into the virtual environment
deps = nodeenv
commands =
    nodeenv --prebuilt --node=lts --force {envdir}
    npm install -g --no-package-lock --no-save pyright
    pytest tests/test_pyright.py -vv


[testenv:docset]
deps = doc2dash
extras = docs
allowlist_externals =
    rm
    cp
    tar
commands =
    rm -rf attrs.docset attrs.tgz docs/_build
    sphinx-build -n -T -W -b html -d {envtmpdir}/doctrees docs docs/_build/html
    doc2dash --index-page index.html --icon docs/_static/docset-icon.png --online-redirect-url https://www.attrs.org/en/latest/ docs/_build/html
    cp docs/_static/docset-icon@2x.png attrs.docset/icon@2x.png
    tar --exclude='.DS_Store' -cvzf attrs.tgz attrs.docset

2025-07-03 18:00:14.153 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-03 18:00:22.997 | INFO     | Model API request cost info: input_tokens=1581, output_tokens=814, cost=0.012093
2025-07-03 18:00:23.000 | SUCCESS  | Successfully extracted environment config
2025-07-03 18:00:23.001 | INFO     | ******
2025-07-03 18:00:23.001 | INFO     | List of libraries and tools:
- pytest
- coverage[toml]>=5.3
- pre-commit
- check-manifest
- twine
- pip >= 18.0.0
- towncrier
- mypy>=0.902
- nodeenv
- pyright (installed via npm)
- doc2dash
- sphinx-build (used for docs related tests)

Key environment variables:
- COVERAGE_PROCESS_START={toxinidir}/pyproject.toml (for specific Python versions, e.g., py36, py310, py311)
- PYTHONWARNINGS=d (for specific Python versions, e.g., py310, py311)
- HOMEPATH (passed to pre-commit on Windows)

Runtime Requirements:
- Python versions: 3.6, 3.7, 3.8, 3.9, 3.10, 3.11, PyPy3
- Node.js (specifically LTS version, for `pyright` test environment)

Testing:
- **Test frameworks:** pytest, mypy, pyright, pre-commit, check-manifest, twine, towncrier, sphinx
- **Test commands & related:**
    - Default tests: `python -m pytest {posargs:-n auto}`
    - Coverage tests (for Python 3.6, 3.10, 3.11): `coverage run -m pytest {posargs:-n auto}` or `coverage run -m pytest {posargs}`
    - Mypy type checks: `mypy src/attrs/__init__.pyi src/attr/__init__.pyi src/attr/_typing_compat.pyi src/attr/_version_info.pyi src/attr/converters.pyi src/attr/exceptions.pyi src/attr/filters.pyi src/attr/setters.pyi src/attr/validators.pyi` and `mypy tests/typing_example.py`
    - Pyright type checks: (requires nodeenv and npm install global pyright) `pytest tests/test_pyright.py -vv`
    - Code style/linting: `pre-commit run --all-files --show-diff-on-failure`
    - Manifest checks: `check-manifest`
    - PyPI description validation: `pip wheel -w {envtmpdir}/build --no-deps .` and `twine check {envtmpdir}/build/*`
    - Changelog checks: `towncrier build --version UNRELEASED --draft`
    - Coverage reporting: `coverage combine` then `coverage report`
    - Documentation builds: `sphinx-build -n -T -W -b html -d {envtmpdir}/doctrees docs docs/_build/html` and `sphinx-build -n -T -W -b doctest -d {envtmpdir}/doctrees docs docs/_build/html`
    - Docset generation: `doc2dash` and related file operations (`rm`, `cp`, `tar`)
- **Test environment dependencies (beyond standard `tests` extras):**
    - `coverage[toml]` for coverage reporting.
    - `pre-commit` for pre-commit hooks.
    - `check-manifest` for manifest validation.
    - `twine`, `pip` for PyPI description checks.
    - `towncrier` for changelog generation.
    - `mypy` for type checking.
    - `nodeenv`, `pyright` for pyright type checking.
    - `doc2dash` for docset generation.
2025-07-03 18:00:23.001 | INFO     | ******
2025-07-03 18:00:23.001 | DEBUG    | Result of dispatch_intent: ('List of libraries and tools:\n- pytest\n- coverage[toml]>=5.3\n- pre-commit\n- check-manifest\n- twine\n- pip >= 18.0.0\n- towncrier\n- mypy>=0.902\n- nodeenv\n- pyright (installed via npm)\n- doc2dash\n- sphinx-build (used for docs related tests)\n\nKey environment variables:\n- COVERAGE_PROCESS_START={toxinidir}/pyproject.toml (for specific Python versions, e.g., py36, py310, py311)\n- PYTHONWARNINGS=d (for specific Python versions, e.g., py310, py311)\n- HOMEPATH (passed to pre-commit on Windows)\n\nRuntime Requirements:\n- Python versions: 3.6, 3.7, 3.8, 3.9, 3.10, 3.11, PyPy3\n- Node.js (specifically LTS version, for `pyright` test environment)\n\nTesting:\n- **Test frameworks:** pytest, mypy, pyright, pre-commit, check-manifest, twine, towncrier, sphinx\n- **Test commands & related:**\n    - Default tests: `python -m pytest {posargs:-n auto}`\n    - Coverage tests (for Python 3.6, 3.10, 3.11): `coverage run -m pytest {posargs:-n auto}` or `coverage run -m pytest {posargs}`\n    - Mypy type checks: `mypy src/attrs/__init__.pyi src/attr/__init__.pyi src/attr/_typing_compat.pyi src/attr/_version_info.pyi src/attr/converters.pyi src/attr/exceptions.pyi src/attr/filters.pyi src/attr/setters.pyi src/attr/validators.pyi` and `mypy tests/typing_example.py`\n    - Pyright type checks: (requires nodeenv and npm install global pyright) `pytest tests/test_pyright.py -vv`\n    - Code style/linting: `pre-commit run --all-files --show-diff-on-failure`\n    - Manifest checks: `check-manifest`\n    - PyPI description validation: `pip wheel -w {envtmpdir}/build --no-deps .` and `twine check {envtmpdir}/build/*`\n    - Changelog checks: `towncrier build --version UNRELEASED --draft`\n    - Coverage reporting: `coverage combine` then `coverage report`\n    - Documentation builds: `sphinx-build -n -T -W -b html -d {envtmpdir}/doctrees docs docs/_build/html` and `sphinx-build -n -T -W -b doctest -d {envtmpdir}/doctrees docs docs/_build/html`\n    - Docset generation: `doc2dash` and related file operations (`rm`, `cp`, `tar`)\n- **Test environment dependencies (beyond standard `tests` extras):**\n    - `coverage[toml]` for coverage reporting.\n    - `pre-commit` for pre-commit hooks.\n    - `check-manifest` for manifest validation.\n    - `twine`, `pip` for PyPI description checks.\n    - `towncrier` for changelog generation.\n    - `mypy` for type checking.\n    - `nodeenv`, `pyright` for pyright type checking.\n    - `doc2dash` for docset generation.', 'Get File Info', True)
2025-07-03 18:00:23.002 | INFO     | entering browse
2025-07-03 18:00:23.002 | INFO     | # SPDX-License-Identifier: MIT

[build-system]
requires = ["setuptools>=40.6.0", "wheel"]
build-backend = "setuptools.build_meta"


[tool.pytest.ini_options]
addopts = ["-ra", "--strict-markers", "--strict-config"]
xfail_strict = true
testpaths = "tests"
filterwarnings = ["once::Warning", "ignore:::pympler[.*]"]


[tool.coverage.run]
parallel = true
branch = true
source_pkgs = ["attr", "attrs"]

[tool.coverage.paths]
source = ["src", ".tox/*/site-packages"]

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    # PyPy is unacceptably slow under coverage.
    "if PYPY:",
]


[tool.black]
line-length = 79


[tool.isort]
profile = "attrs"


[tool.interrogate]
verbose = 2
fail-under = 100
whitelist-regex = ["test_.*"]


[tool.check-wheel-contents]
toplevel = ["attr", "attrs"]


[tool.towncrier]
name = "attrs"
filename = "CHANGELOG.rst"
template = "changelog.d/towncrier_template.rst"
issue_format = "`#{issue} <https://github.com/python-attrs/attrs/issues/{issue}>`_"
directory = "changelog.d"
title_format = "{version} ({project_date})"
underlines = ["-", "^"]

[[tool.towncrier.section]]
path = ""

[[tool.towncrier.type]]
directory = "breaking"
name = "Backwards-incompatible Changes"
showcontent = true

[[tool.towncrier.type]]
directory = "deprecation"
name = "Deprecations"
showcontent = true

[[tool.towncrier.type]]
directory = "change"
name = "Changes"
showcontent = true


[tool.mypy]
disallow_untyped_defs = true
check_untyped_defs = true

2025-07-03 18:00:23.002 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-03 18:00:30.420 | INFO     | Model API request cost info: input_tokens=887, output_tokens=396, cost=0.006178
2025-07-03 18:00:30.421 | SUCCESS  | Successfully extracted environment config
2025-07-03 18:00:30.421 | INFO     | ******
2025-07-03 18:00:30.421 | INFO     | List of libraries:
- setuptools (build-time): >=40.6.0
- wheel (build-time)
- pytest
- coverage
- black
- isort
- interrogate
- check-wheel-contents
- towncrier
- mypy

Key environment variables:
- None explicitly listed.

Runtime Requirements:
- Python (implied for a Python project, specific version not explicitly stated in this file).
- Project itself is `attrs` (or `attr`) as indicated by `[tool.coverage.run] source_pkgs`. Specific runtime dependencies of `attrs` are not listed in this `pyproject.toml`.

Testing:
- Test framework: pytest
- Test command options: `-ra --strict-markers --strict-config`
- Test paths: `tests`
- Warnings filter: `once::Warning`, `ignore:::pympler[.*]`
- xfail_strict: `true`
- Coverage runs in parallel, tracks branches, and sources `attr`, `attrs`.

Custom Query Details:
- **Mypy version**: Not explicitly specified in this `pyproject.toml`. Only `tool.mypy` configuration options (`disallow_untyped_defs = true`, `check_untyped_defs = true`) are provided.
- **General dependencies**: `setuptools>=40.6.0`, `wheel`, `pytest`, `coverage`, `black`, `isort`, `interrogate`, `check-wheel-contents`, `towncrier`, `mypy`.
- **Project requirements**: Build-system requirements are `setuptools>=40.6.0` and `wheel`. Specific runtime dependencies for the `attrs` project are not defined in this configuration file (typically found under a `[project]` table with `dependencies`).
2025-07-03 18:00:30.422 | INFO     | ******
2025-07-03 18:00:30.422 | DEBUG    | Result of dispatch_intent: ('List of libraries:\n- setuptools (build-time): >=40.6.0\n- wheel (build-time)\n- pytest\n- coverage\n- black\n- isort\n- interrogate\n- check-wheel-contents\n- towncrier\n- mypy\n\nKey environment variables:\n- None explicitly listed.\n\nRuntime Requirements:\n- Python (implied for a Python project, specific version not explicitly stated in this file).\n- Project itself is `attrs` (or `attr`) as indicated by `[tool.coverage.run] source_pkgs`. Specific runtime dependencies of `attrs` are not listed in this `pyproject.toml`.\n\nTesting:\n- Test framework: pytest\n- Test command options: `-ra --strict-markers --strict-config`\n- Test paths: `tests`\n- Warnings filter: `once::Warning`, `ignore:::pympler[.*]`\n- xfail_strict: `true`\n- Coverage runs in parallel, tracks branches, and sources `attr`, `attrs`.\n\nCustom Query Details:\n- **Mypy version**: Not explicitly specified in this `pyproject.toml`. Only `tool.mypy` configuration options (`disallow_untyped_defs = true`, `check_untyped_defs = true`) are provided.\n- **General dependencies**: `setuptools>=40.6.0`, `wheel`, `pytest`, `coverage`, `black`, `isort`, `interrogate`, `check-wheel-contents`, `towncrier`, `mypy`.\n- **Project requirements**: Build-system requirements are `setuptools>=40.6.0` and `wheel`. Specific runtime dependencies for the `attrs` project are not defined in this configuration file (typically found under a `[project]` table with `dependencies`).', 'Get File Info', True)
2025-07-03 18:00:30.422 | DEBUG    | Result of dispatch_intent: ('You are browsing the path: /home/sahrish/Desktop/swe-bench/swe-factory-local/testbed/python-attrs__attrs-1065_2025-07-03_17-42-49/.github/workflows. The browsing Depth is 1.\nStructure of this path:\n\ncodeql-analysis.yml\n\nci.yml\n\nbuild-docset.yml\n\n', 'folder structure collected', True)
2025-07-03 18:00:39.841 | INFO     | Model API request cost info: input_tokens=3131, output_tokens=629, cost=0.014118
2025-07-03 18:00:44.245 | INFO     | Model API request cost info: input_tokens=3859, output_tokens=139, cost=0.011038
2025-07-03 18:00:44.248 | DEBUG    | Trying to select search APIs in json. Try 1 of 5.
2025-07-03 18:00:46.500 | INFO     | Model API request cost info: input_tokens=807, output_tokens=114, cost=0.003158
2025-07-03 18:00:46.500 | DEBUG    | {
  "API_calls": [
    "browse_file_for_environment_info(\".github/workflows/ci.yml\", \"Look for Python setup, mypy installation, and test execution commands, especially for Python 3.11 environments.\")"
  ],
  "collected_information": "Not enough information to confidently set up the environment and run tests, specifically regarding the exact `mypy` version used with Python 3.11 in the project's CI.",
  "terminate": false
}
2025-07-03 18:00:46.501 | DEBUG    | Extracted a valid json
2025-07-03 18:00:46.503 | INFO     | entering browse
2025-07-03 18:00:46.503 | INFO     | ---
name: CI

on:
  push:
    branches: [main]
    tags: ["*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  FORCE_COLOR: "1" # Make tools pretty.
  TOX_TESTENV_PASSENV: FORCE_COLOR
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"
  PYTHON_LATEST: "3.11"

permissions:
  contents: read

jobs:
  tests:
    name: tox on ${{ matrix.python-version }}
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.6"
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
          - "pypy-3.7"
          - "pypy-3.8"

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            files.pythonhosted.org:443
            github.com:443
            objects.githubusercontent.com:443
            pypi.org:443
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -VV
          python -m site
          python -m pip install --upgrade wheel tox tox-gh-actions

      - run: python -m tox

      - name: Upload coverage data
        uses: actions/upload-artifact@v3
        with:
          name: coverage-data
          path: .coverage.*
          if-no-files-found: ignore

  coverage:
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: block
          allowed-endpoints: >
            files.pythonhosted.org:443
            github.com:443
            pypi.org:443
            api.github.com:443

      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          # Use latest Python, so it understands all syntax.
          python-version: ${{env.PYTHON_LATEST}}

      - run: python -m pip install --upgrade coverage[toml]

      - name: Download coverage data
        uses: actions/download-artifact@v3
        with:
          name: coverage-data

      - name: Combine coverage and fail if it's <100%.
        run: |
          python -m coverage combine
          python -m coverage html --skip-covered --skip-empty
          python -m coverage report --fail-under=100

      - name: Upload HTML report if check failed.
        uses: actions/upload-artifact@v3
        with:
          name: html-report
          path: htmlcov
        if: ${{ failure() }}

  docs:
    name: Build docs & run doctests
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: block
          allowed-endpoints: >
            docs.python.org:443
            files.pythonhosted.org:443
            github.com:443
            pypi.org:443

      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - run: python -m pip install --upgrade wheel tox
      - run: python -m tox -e docs

  pyright:
    name: Check types using pyright
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: block
          allowed-endpoints: >
            files.pythonhosted.org:443
            github.com:443
            nodejs.org:443
            pypi.org:443
            registry.npmjs.org:443
            api.github.com:443

      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{env.PYTHON_LATEST}}

      - run: python -m pip install --upgrade wheel tox
      - run: python -m tox -e pyright

  package:
    name: Build & verify package
    runs-on: ubuntu-latest

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: block
          allowed-endpoints: >
            files.pythonhosted.org:443
            github.com:443
            pypi.org:443

      - uses: actions/checkout@v3
      - uses: hynek/build-and-inspect-python-package@v1

  install-dev:
    name: Verify dev env
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: block
          allowed-endpoints: >
            files.pythonhosted.org:443
            github.com:443
            pypi.org:443
            api.github.com:443
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{env.PYTHON_LATEST}}
      - run: python -m pip install -e .[dev]
      - run: python -c 'import attr; print(attr.__version__)'

  # Ensure everything required is passing for branch protection.
  required-checks-pass:
    if: always()

    needs:
      - coverage
      - docs
      - install-dev
      - package
      - pyright

    runs-on: ubuntu-latest

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}

2025-07-03 18:00:46.503 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-03 18:00:51.211 | INFO     | Model API request cost info: input_tokens=2068, output_tokens=470, cost=0.009870
2025-07-03 18:00:51.212 | SUCCESS  | Successfully extracted environment config
2025-07-03 18:00:51.212 | INFO     | ******
2025-07-03 18:00:51.212 | INFO     | List of libraries:
- wheel
- tox
- tox-gh-actions
- coverage[toml]
- hynek/build-and-inspect-python-package@v1 (GitHub Action for package building)

Key environment variables:
- FORCE_COLOR=1
- TOX_TESTENV_PASSENV=FORCE_COLOR
- PIP_DISABLE_PIP_VERSION_CHECK=1
- PIP_NO_PYTHON_VERSION_WARNING=1
- PYTHON_LATEST=3.11

Runtime Requirements:
- Python (versions: 3.6, 3.7, 3.8, 3.9, 3.10, 3.11, pypy-3.7, pypy-3.8)
- Ubuntu 20.04 (for `tests` job)
- Ubuntu Latest (for `coverage`, `docs`, `pyright`, `package`, `required-checks-pass` jobs)
- Windows Latest (for `install-dev` job)

Testing:
- Python setup for Python 3.11: Handled by `actions/setup-python@v4` using `python-version: ${{env.PYTHON_LATEST}}` where `PYTHON_LATEST` is set to "3.11".
- Type Checking (instead of Mypy, it uses Pyright):
    - Related dependency: `tox` (installed via `python -m pip install --upgrade wheel tox`)
    - Test framework/tool: `pyright` (executed via `tox`)
    - Test command for Pyright: `python -m tox -e pyright`
- Test framework: tox
- Test execution commands:
    - Main test run: `python -m tox` (run across all specified Python versions)
    - Documentation tests: `python -m tox -e docs`
    - Coverage combination and reporting:
        - `python -m coverage combine`
        - `python -m coverage html --skip-covered --skip-empty`
        - `python -m coverage report --fail-under=100`
2025-07-03 18:00:51.212 | INFO     | ******
2025-07-03 18:00:51.212 | DEBUG    | Result of dispatch_intent: ('List of libraries:\n- wheel\n- tox\n- tox-gh-actions\n- coverage[toml]\n- hynek/build-and-inspect-python-package@v1 (GitHub Action for package building)\n\nKey environment variables:\n- FORCE_COLOR=1\n- TOX_TESTENV_PASSENV=FORCE_COLOR\n- PIP_DISABLE_PIP_VERSION_CHECK=1\n- PIP_NO_PYTHON_VERSION_WARNING=1\n- PYTHON_LATEST=3.11\n\nRuntime Requirements:\n- Python (versions: 3.6, 3.7, 3.8, 3.9, 3.10, 3.11, pypy-3.7, pypy-3.8)\n- Ubuntu 20.04 (for `tests` job)\n- Ubuntu Latest (for `coverage`, `docs`, `pyright`, `package`, `required-checks-pass` jobs)\n- Windows Latest (for `install-dev` job)\n\nTesting:\n- Python setup for Python 3.11: Handled by `actions/setup-python@v4` using `python-version: ${{env.PYTHON_LATEST}}` where `PYTHON_LATEST` is set to "3.11".\n- Type Checking (instead of Mypy, it uses Pyright):\n    - Related dependency: `tox` (installed via `python -m pip install --upgrade wheel tox`)\n    - Test framework/tool: `pyright` (executed via `tox`)\n    - Test command for Pyright: `python -m tox -e pyright`\n- Test framework: tox\n- Test execution commands:\n    - Main test run: `python -m tox` (run across all specified Python versions)\n    - Documentation tests: `python -m tox -e docs`\n    - Coverage combination and reporting:\n        - `python -m coverage combine`\n        - `python -m coverage html --skip-covered --skip-empty`\n        - `python -m coverage report --fail-under=100`', 'Get File Info', True)
2025-07-03 18:00:58.727 | INFO     | Model API request cost info: input_tokens=4518, output_tokens=757, cost=0.018865
2025-07-03 18:01:07.923 | INFO     | Model API request cost info: input_tokens=5374, output_tokens=592, cost=0.019355
2025-07-03 18:01:07.933 | DEBUG    | Trying to select search APIs in json. Try 1 of 5.
2025-07-03 18:01:12.347 | INFO     | Model API request cost info: input_tokens=1259, output_tokens=611, cost=0.009258
2025-07-03 18:01:12.348 | DEBUG    | {
  "API_calls": [],
  "collected_information": "### Summary of Collected Information:\n\n**1. Environment Setup (for Dockerfile):**\n\n*   **Operating System:** Recommended to use an Ubuntu-based image, as the CI pipeline uses Ubuntu (20.04 or latest).\n*   **Python Version:** Python 3.11, as specified in `tox.ini` and confirmed as `PYTHON_LATEST` in `.github/workflows/ci.yml`.\n*   **System Dependencies:** `npm` is required for `pyright` (which depends on Node.js).\n*   **Python Package Installation:**\n    *   `tox` needs to be installed globally (`pip install tox wheel`).\n    *   The project itself and its test dependencies should be installed in editable mode: `pip install -e \".[tests,cov]\"`. This will pull in `pytest`, `coverage`, `nodeenv` (for pyright setup), `mypy` (though not the primary type checker in CI, it's a dependency), and other necessary libraries.\n    *   `nodeenv` is a Python package that will manage Node.js installation within the tox environment for `pyright`.\n\n**2. Test Execution (for Evaluation Script):**\n\nThe project uses `tox` to manage its test environments and runs.\n\n*   **Primary Test Runner:** `tox`.\n*   **Running `tests/test_functional.py`:**\n    *   This file is a standard `pytest` test suite.\n    *   The `tox.ini` defines a `py311` environment that runs `pytest`.\n    *   To specifically run this test file, the command should be: `python -m tox -e py311 -- tests/test_functional.py`\n    *   (Note: `py311` refers to the environment name in `tox.ini` for Python 3.11).\n*   **Running `tests/dataclass_transform_example.py` and `tests/typing_example.py`:**\n    *   The CI configuration (`ci.yml`) indicates that `pyright` is the primary type checker, despite `tox.ini` mentioning `mypy` for these files.\n    *   The `tox.ini` defines a `pyright` environment.\n    *   To run the `pyright` checks, the command should be: `python -m tox -e pyright`.\n    *   This `pyright` task is expected to cover these example files, as they are related to typing.\n\n**Conclusion:** We have sufficient information to proceed with generating the Dockerfile and the evaluation script.",
  "terminate": true
}
2025-07-03 18:01:12.350 | DEBUG    | Extracted a valid json
2025-07-03 18:05:34.875 | DEBUG    | Result of dispatch_intent: ('Image built successfully!\nContainer dccc4f7623c5411a9f8464c9d486e7f4575071e29a4e37c5cfb81b68ddd384cf started.\nPatch applied successfully.\nFind test_output.txt! Waiting for analysis. ', 'Docker image python-attrs__attrs-1065-dockerfile3:latest built successfully.\nContainer started.\nPatch applied.\nObtain test results successfully.', True)
2025-07-03 18:05:34.877 | DEBUG    | Trying to analyze the test log. Try 1 of 3.
2025-07-03 18:06:01.787 | INFO     | Model API request cost info: input_tokens=3980, output_tokens=264, cost=0.012590
2025-07-03 18:06:01.787 | DEBUG    | {
    "is_finish": false,
    "guidance_for_write_dockerfile_agent": "The current environment setup installs `mypy` via `attrs.[tests,cov]` extras, which allows `mypy>=0.930`. The log shows `mypy` failures (found 5 errors in 2 files), indicating potential incompatibility or stricter checks with a newer `mypy` version than expected by the tests at commit `67dc8cc261a5ef64f576ce73f2281cc9021d8fb4`. To ensure compatibility with the `attrs` test suite for this specific commit, explicitly pin the `mypy` version after installing `attrs`. Add `&& pip install mypy==0.991` to the end of the last `RUN` command in the Dockerfile. This version is from the `0.9xx` series, aligning well with the `mypy>=0.930` requirement before `mypy 1.0` changes.",
    "guidance_for_write_eval_script_agent": "",
    "guidance_for_context_retrieval_agent": ""
}
2025-07-03 18:06:01.788 | DEBUG    | Extracted a valid json
2025-07-03 18:06:01.793 | INFO     | Trying to extract a dockerfile. Try 1 of 3.
2025-07-03 18:06:11.122 | INFO     | Model API request cost info: input_tokens=4881, output_tokens=520, cost=0.017403
2025-07-03 18:06:11.122 | INFO     | Raw dockerfile and produced in try 1. Writing dockerfile into file.
2025-07-03 18:06:14.298 | DEBUG    | Result of dispatch_intent: ('Step 1/4 : FROM python:3.11-slim-jammy\nError: failed to resolve reference "docker.io/library/python:3.11-slim-jammy": docker.io/library/python:3.11-slim-jammy: not found', 'Failed to build Docker image.', False)
2025-07-03 18:06:14.301 | DEBUG    | Trying to analyze the test log. Try 1 of 3.
2025-07-03 18:06:19.310 | INFO     | Model API request cost info: input_tokens=2068, output_tokens=215, cost=0.007320
2025-07-03 18:06:19.311 | DEBUG    | {
    "is_finish": false,
    "guidance_for_write_dockerfile_agent": "The Dockerfile build failed because the specified base image 'python:3.11-slim-jammy' could not be resolved. This indicates that the image name is either incorrect, misspelled, or does not exist on Docker Hub. Please modify the Dockerfile to use a valid and existing base image for Python 3.11. A common and reliable alternative is 'python:3.11.8-slim-jammy', or if 'jammy' is not strictly required, 'python:3.11-slim'. For now, change 'FROM python:3.11-slim-jammy' to 'FROM python:3.11.8-slim-jammy' to resolve the image pull error.",
    "guidance_for_write_eval_script_agent": "",
    "guidance_for_context_retrieval_agent": ""
}
2025-07-03 18:06:19.311 | DEBUG    | Extracted a valid json
2025-07-03 18:06:19.316 | INFO     | Trying to extract a dockerfile. Try 1 of 3.
2025-07-03 18:06:22.989 | INFO     | Model API request cost info: input_tokens=6736, output_tokens=526, cost=0.022100
2025-07-03 18:06:22.993 | INFO     | Raw dockerfile and produced in try 1. Writing dockerfile into file.
2025-07-03 18:06:25.627 | DEBUG    | Result of dispatch_intent: ('Step 1/4 : FROM python:3.11.8-slim-jammy\nError: failed to resolve reference "docker.io/library/python:3.11.8-slim-jammy": docker.io/library/python:3.11.8-slim-jammy: not found', 'Failed to build Docker image.', False)
2025-07-03 18:06:25.630 | DEBUG    | Trying to analyze the test log. Try 1 of 3.
2025-07-03 18:06:31.139 | INFO     | Model API request cost info: input_tokens=2080, output_tokens=168, cost=0.006880
2025-07-03 18:06:31.140 | DEBUG    | {
    "is_finish": false,
    "guidance_for_write_dockerfile_agent": "The Dockerfile failed to build because the base image `python:3.11.8-slim-jammy` could not be resolved or found. This specific tag might not exist for the `python` image on Docker Hub. Please modify the `FROM` instruction to use a more general and available tag, such as `python:3.11-slim-jammy`. This ensures you get the latest patch version of Python 3.11 on a Jammy slim base while ensuring the image exists.",
    "guidance_for_write_eval_script_agent": "",
    "guidance_for_context_retrieval_agent": ""
}
2025-07-03 18:06:31.140 | DEBUG    | Extracted a valid json
2025-07-03 18:06:31.142 | INFO     | Trying to extract a dockerfile. Try 1 of 3.
2025-07-03 18:06:34.524 | INFO     | Model API request cost info: input_tokens=8556, output_tokens=520, cost=0.026590
2025-07-03 18:06:34.525 | INFO     | Raw dockerfile and produced in try 1. Writing dockerfile into file.
2025-07-03 18:06:37.640 | DEBUG    | Result of dispatch_intent: ('Step 1/4 : FROM python:3.11-slim-jammy\nError: failed to resolve reference "docker.io/library/python:3.11-slim-jammy": docker.io/library/python:3.11-slim-jammy: not found', 'Failed to build Docker image.', False)
2025-07-03 18:06:37.643 | DEBUG    | Trying to analyze the test log. Try 1 of 3.
2025-07-03 18:06:46.235 | INFO     | Model API request cost info: input_tokens=2068, output_tokens=220, cost=0.007370
2025-07-03 18:06:46.236 | DEBUG    | {
    "is_finish": false,
    "guidance_for_write_dockerfile_agent": "The Dockerfile build failed because the specified base image `python:3.11-slim-jammy` does not exist on Docker Hub. Python's `slim` tags are typically based on Debian distributions (e.g., `bullseye` or `bookworm`), not Ubuntu (`jammy`) with that specific tag format. Please change the base image to a valid, existing Python slim tag for Python 3.11, for example, `python:3.11-slim-bullseye` or `python:3.11-slim-bookworm`.\n\nProposed change: Change `FROM python:3.11-slim-jammy` to `FROM python:3.11-slim-bullseye`.",
    "guidance_for_write_eval_script_agent": "",
    "guidance_for_context_retrieval_agent": ""
}
2025-07-03 18:06:46.237 | DEBUG    | Extracted a valid json
2025-07-03 18:06:46.242 | INFO     | Trying to extract a dockerfile. Try 1 of 3.
2025-07-03 18:06:49.776 | INFO     | Model API request cost info: input_tokens=10412, output_tokens=521, cost=0.031240
2025-07-03 18:06:49.777 | INFO     | Raw dockerfile and produced in try 1. Writing dockerfile into file.
2025-07-03 18:12:27.155 | DEBUG    | Result of dispatch_intent: ('Image built successfully!\nContainer 4edc482ab8938299ddedbac885a00db223173e97bd9b342449af266d219a425d started.\nPatch applied successfully.\nFind test_output.txt! Waiting for analysis. ', 'Docker image python-attrs__attrs-1065-dockerfile7:latest built successfully.\nContainer started.\nPatch applied.\nObtain test results successfully.', True)
2025-07-03 18:12:27.159 | DEBUG    | Trying to analyze the test log. Try 1 of 3.
2025-07-03 18:13:18.539 | INFO     | Model API request cost info: input_tokens=4126, output_tokens=644, cost=0.016755
2025-07-03 18:13:18.540 | DEBUG    | {
    "is_finish": false,
    "guidance_for_write_dockerfile_agent": "The current Dockerfile explicitly pins `mypy==0.991`. While the comment states this was to resolve compatibility issues, the `mypy` tests are still failing with errors that suggest an issue with `attrs`'s `mypy` plugin or `mypy`'s understanding of `attrs` types (e.g., 'No overload variant of \"define\" matches argument type \"bool\"' and 'Property \"a\" defined in \"Frozen\" is read-only').\n\nProjects like `attrs` often define specific `mypy` versions and configurations within their `tox` environments. By installing `mypy` globally in the Dockerfile and then running `mypy` directly in the evaluation script, we might be bypassing the intended `tox`-managed environment where `attrs`'s `mypy` plugin is correctly loaded and configured.\n\n**Action:** Remove the `pip install mypy==0.991` line from the Dockerfile. Let the `tox` environment (which will be used by the evaluation script) manage the `mypy` installation and its version, ensuring cleaner dependency resolution and correct plugin activation.",
    "guidance_for_write_eval_script_agent": "The type-checking tests run with `mypy` failed, displaying errors that strongly suggest an issue with `mypy`'s interaction with `attrs` types (e.g., problems with `attrs.define` overloads and frozen attributes). These are common symptoms when `attrs`'s `mypy` plugin is not correctly loaded or the `mypy` environment is not set up as expected by the project.\n\nThe `attrs` project is designed to use `tox` for its various test environments, including `mypy` checks. Running `mypy` directly on specific files, even from the project root, might bypass crucial project-defined configurations or plugin activation that `tox` would handle within its isolated environment.\n\n**Action:** Modify the `eval script` to invoke `mypy` through `tox`. This will allow `tox` to properly set up the `mypy` environment, including installing the correct `mypy` version (as specified in the project's `tox.ini` or `pyproject.toml`) and ensuring `attrs`'s `mypy` plugin is active.\n\nReplace the line `mypy tests/typing_example.py tests/dataclass_transform_example.py` with `tox -e mypy`. This assumes 'mypy' is the standard `tox` environment name for type checking in `attrs`. If `tox -e mypy` does not correctly run the target tests, further investigation via `context_retrieval_agent` might be needed to determine the exact `tox` environment for type checking specific to this `attrs` version.",
    "guidance_for_context_retrieval_agent": ""
}
2025-07-03 18:13:18.541 | DEBUG    | Extracted a valid json
2025-07-03 18:13:18.546 | INFO     | Trying to extract a dockerfile. Try 1 of 3.
2025-07-03 18:13:22.936 | INFO     | Model API request cost info: input_tokens=12352, output_tokens=483, cost=0.035710
2025-07-03 18:13:22.936 | INFO     | Raw dockerfile and produced in try 1. Writing dockerfile into file.
2025-07-03 18:13:22.967 | INFO     | Trying to extract a eval script. Try 1 of 3.
2025-07-03 18:13:29.696 | INFO     | Model API request cost info: input_tokens=6793, output_tokens=634, cost=0.023323
2025-07-03 18:13:29.716 | INFO     | Raw script and produced in try 1. Writing script into file.
2025-07-03 18:18:27.636 | DEBUG    | Result of dispatch_intent: ('Image built successfully!\nContainer 756ce4e65a1feba845d25f0aae8596a2a0d692bab9211be4af46da24849f0c9c started.\nPatch applied successfully.\nFind test_output.txt! Waiting for analysis. ', 'Docker image python-attrs__attrs-1065-dockerfile8:latest built successfully.\nContainer started.\nPatch applied.\nObtain test results successfully.', True)
2025-07-03 18:18:27.641 | DEBUG    | Trying to analyze the test log. Try 1 of 3.
2025-07-03 18:18:50.064 | INFO     | Model API request cost info: input_tokens=4391, output_tokens=522, cost=0.016198
2025-07-03 18:18:50.065 | DEBUG    | {
  "is_finish": false,
  "guidance_for_write_dockerfile_agent": "",
  "guidance_for_write_eval_script_agent": "The target test file 'tests/dataclass_transform_example.py' was checked out but not executed in the test log. The current `python -m tox -e mypy` command only explicitly ran `mypy` on `src/attrs` internal type stubs and `tests/typing_example.py`. To ensure 'tests/dataclass_transform_example.py' is also type-checked, please add an explicit `mypy` command for this file in the evaluation script. This command should be `python -m mypy tests/dataclass_transform_example.py`. Ensure its exit code is captured and factored into the overall `overall_rc` similar to how `mypy_rc` is handled.\n\nHere's how to modify the eval script:\n\n```bash\n# ... previous parts of the script ...\n\n# Run type checking tests using mypy via tox\n# This runs type checks defined in tox.ini (e.g., src, tests/typing_example.py)\npython -m tox -e mypy\nmypy_rc=$?\noverall_rc=$((overall_rc || mypy_rc)) # Update overall_rc if mypy failed\n\n# Explicitly run mypy for tests/dataclass_transform_example.py\n# This target test file was not covered by the 'tox -e mypy' command automatically.\npython -m mypy tests/dataclass_transform_example.py\ndataclass_mypy_rc=$?\noverall_rc=$((overall_rc || dataclass_mypy_rc)) # Update overall_rc if this specific mypy check failed\n\n# Capture the final combined exit code\nrc=$overall_rc\n\n# ... rest of the script ...\n```\n\nNote: `tests/test_functional.py` passed and `tests/typing_example.py` was executed but failed as expected by `mypy` reporting a type error. The primary remaining issue is the non-execution of `tests/dataclass_transform_example.py`.",
  "guidance_for_context_retrieval_agent": ""
}
2025-07-03 18:18:50.066 | DEBUG    | Extracted a valid json
2025-07-03 18:18:50.070 | INFO     | Trying to extract a eval script. Try 1 of 3.
2025-07-03 18:18:54.311 | INFO     | Model API request cost info: input_tokens=8910, output_tokens=591, cost=0.028185
2025-07-03 18:18:54.311 | INFO     | Raw script and produced in try 1. Writing script into file.
2025-07-03 18:23:49.574 | DEBUG    | Result of dispatch_intent: ('Image built successfully!\nContainer dbb5e7a406b629bc87d89805184fbfcf6b5c2b8697f4840b6013299bcd7ec837 started.\nPatch applied successfully.\nFind test_output.txt! Waiting for analysis. ', 'Docker image python-attrs__attrs-1065-dockerfile9:latest built successfully.\nContainer started.\nPatch applied.\nObtain test results successfully.', True)
2025-07-03 18:23:49.579 | DEBUG    | Trying to analyze the test log. Try 1 of 3.
2025-07-03 18:24:19.271 | INFO     | Model API request cost info: input_tokens=5422, output_tokens=433, cost=0.017885
2025-07-03 18:24:19.272 | DEBUG    | {
  "is_finish": false,
  "guidance_for_write_dockerfile_agent": "The target tests `tests/typing_example.py` and `tests/dataclass_transform_example.py` failed due to multiple `mypy` type errors. These errors, such as 'No overload variant of \"define\" matches argument type \"bool\"' and 'Property \"a\" defined in \"Frozen\" is read-only', indicate potential compatibility issues between the `attrs` version 22.1.0/22.2.0.dev0, Python 3.11, and the `mypy` version 0.971-0.989. `attrs` version 22.1.0 was released before Python 3.11's stable release, suggesting possible type stub or runtime inconsistencies. To potentially resolve these type errors, consider changing the base Python version in the Dockerfile from `python:3.11-slim-bullseye` to an earlier, potentially more compatible version for `attrs` 22.1.0, such as `python:3.10-slim-bullseye` or `python:3.9-slim-bullseye`.",
  "guidance_for_write_eval_script_agent": "",
  "guidance_for_context_retrieval_agent": "To confirm the suspected compatibility issues and identify the correct environment for running `mypy` checks for `attrs` version 22.1.0, please retrieve the project's continuous integration (CI) configuration files (e.g., `.github/workflows/*.yml`, `azure-pipelines.yml`, or similar) from the target repository. Specifically, look for sections related to type checking (`mypy`) and the Python versions used in those environments for commit `67dc8cc261a5ef64f576ce73f2281cc9021d8fb4`."
}
2025-07-03 18:24:19.272 | DEBUG    | Extracted a valid json
2025-07-03 18:24:26.086 | INFO     | Model API request cost info: input_tokens=1168, output_tokens=578, cost=0.008700
2025-07-03 18:24:26.105 | DEBUG    | Trying to select search APIs in json. Try 1 of 5.
2025-07-03 18:24:29.637 | INFO     | Model API request cost info: input_tokens=1246, output_tokens=239, cost=0.005505
2025-07-03 18:24:29.638 | DEBUG    | {
  "API_calls": [
    "browse_file_for_environment_info(\"pyproject.toml\", \"dependencies, python version, test command, build system, mypy configuration\")",
    "browse_file_for_environment_info(\"setup.py\", \"install_requires, python_requires, test command\")",
    "browse_file_for_environment_info(\"tox.ini\", \"test environments, dependencies, commands for testing, python versions for testing, mypy environment setup\")",
    "browse_file_for_environment_info(\"README.md\", \"installation instructions, testing instructions\")",
    "browse_folder(\".github/workflows\", \"1\")"
  ],
  "collected_information": "The plan to collect environment setup and testing information, especially regarding mypy compatibility and Python versions, has been formulated. The next step is to execute the listed API calls to gather this information from pyproject.toml, setup.py, tox.ini, README.md, and the .github/workflows directory.",
  "terminate": false
}
2025-07-03 18:24:29.638 | DEBUG    | Extracted a valid json
2025-07-03 18:24:29.653 | INFO     | entering browse
2025-07-03 18:24:29.654 | INFO     | # SPDX-License-Identifier: MIT

[build-system]
requires = ["setuptools>=40.6.0", "wheel"]
build-backend = "setuptools.build_meta"


[tool.pytest.ini_options]
addopts = ["-ra", "--strict-markers", "--strict-config"]
xfail_strict = true
testpaths = "tests"
filterwarnings = ["once::Warning", "ignore:::pympler[.*]"]


[tool.coverage.run]
parallel = true
branch = true
source_pkgs = ["attr", "attrs"]

[tool.coverage.paths]
source = ["src", ".tox/*/site-packages"]

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    # PyPy is unacceptably slow under coverage.
    "if PYPY:",
]


[tool.black]
line-length = 79


[tool.isort]
profile = "attrs"


[tool.interrogate]
verbose = 2
fail-under = 100
whitelist-regex = ["test_.*"]


[tool.check-wheel-contents]
toplevel = ["attr", "attrs"]


[tool.towncrier]
name = "attrs"
filename = "CHANGELOG.rst"
template = "changelog.d/towncrier_template.rst"
issue_format = "`#{issue} <https://github.com/python-attrs/attrs/issues/{issue}>`_"
directory = "changelog.d"
title_format = "{version} ({project_date})"
underlines = ["-", "^"]

[[tool.towncrier.section]]
path = ""

[[tool.towncrier.type]]
directory = "breaking"
name = "Backwards-incompatible Changes"
showcontent = true

[[tool.towncrier.type]]
directory = "deprecation"
name = "Deprecations"
showcontent = true

[[tool.towncrier.type]]
directory = "change"
name = "Changes"
showcontent = true


[tool.mypy]
disallow_untyped_defs = true
check_untyped_defs = true

2025-07-03 18:24:29.654 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-03 18:24:33.097 | INFO     | Model API request cost info: input_tokens=888, output_tokens=123, cost=0.003450
2025-07-03 18:24:33.098 | SUCCESS  | Successfully extracted environment config
2025-07-03 18:24:33.098 | INFO     | ******
2025-07-03 18:24:33.098 | INFO     | List of libraries (build-system):
- setuptools>=40.6.0
- wheel

Build System:
- Backend: setuptools.build_meta

Python Version:
- Not explicitly specified in `pyproject.toml`.

Testing:
- Test framework: pytest
- Test paths: tests
- Test command (implied): `pytest -ra --strict-markers --strict-config`

Mypy Configuration:
- disallow_untyped_defs = true
- check_untyped_defs = true
2025-07-03 18:24:33.098 | INFO     | ******
2025-07-03 18:24:33.099 | DEBUG    | Result of dispatch_intent: ('List of libraries (build-system):\n- setuptools>=40.6.0\n- wheel\n\nBuild System:\n- Backend: setuptools.build_meta\n\nPython Version:\n- Not explicitly specified in `pyproject.toml`.\n\nTesting:\n- Test framework: pytest\n- Test paths: tests\n- Test command (implied): `pytest -ra --strict-markers --strict-config`\n\nMypy Configuration:\n- disallow_untyped_defs = true\n- check_untyped_defs = true', 'Get File Info', True)
2025-07-03 18:24:33.099 | INFO     | entering browse
2025-07-03 18:24:33.099 | INFO     | # SPDX-License-Identifier: MIT

import codecs
import os
import re

from setuptools import find_packages, setup


###############################################################################

NAME = "attrs"
PACKAGES = find_packages(where="src")
META_PATH = os.path.join("src", "attr", "__init__.py")
KEYWORDS = ["class", "attribute", "boilerplate", "dataclass"]
PROJECT_URLS = {
    "Documentation": "https://www.attrs.org/",
    "Changelog": "https://www.attrs.org/en/stable/changelog.html",
    "Bug Tracker": "https://github.com/python-attrs/attrs/issues",
    "Source Code": "https://github.com/python-attrs/attrs",
    "Funding": "https://github.com/sponsors/hynek",
    "Tidelift": "https://tidelift.com/subscription/pkg/pypi-attrs?"
    "utm_source=pypi-attrs&utm_medium=pypi",
    "Ko-fi": "https://ko-fi.com/the_hynek",
}
CLASSIFIERS = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
INSTALL_REQUIRES = []
EXTRAS_REQUIRE = {
    "docs": [
        "furo",
        "sphinx",
        "myst-parser",
        "zope.interface",
        "sphinx-notfound-page",
        "sphinxcontrib-towncrier",
        "towncrier",
    ],
    "tests-no-zope": [
        # For regression test to ensure cloudpickle compat doesn't break.
        'cloudpickle; python_implementation == "CPython"',
        "hypothesis",
        "pympler",
        # 4.3.0 dropped last use of `convert`
        "pytest>=4.3.0",
        # psutil extra is needed for correct core count detection.
        "pytest-xdist[psutil]",
        # Since the mypy error messages keep changing, we have to keep updating
        # this pin.
        "mypy>=0.971,<0.990; python_implementation == 'CPython'",
        "pytest-mypy-plugins; python_implementation == 'CPython' and "
        "python_version<'3.11'",
    ],
    "tests": [
        "attrs[tests-no-zope]",
        "zope.interface",
    ],
    "cov": [
        "attrs[tests]",
        "coverage-enable-subprocess",
        # Ensure coverage is new enough for `source_pkgs`.
        "coverage[toml]>=5.3",
    ],
    "dev": ["attrs[tests,docs]"],
}
# Don't break Paul unnecessarily just yet. C.f. #685
EXTRAS_REQUIRE["tests_no_zope"] = EXTRAS_REQUIRE["tests-no-zope"]


###############################################################################

HERE = os.path.abspath(os.path.dirname(__file__))


def read(*parts):
    """
    Build an absolute path from *parts* and return the contents of the
    resulting file.  Assume UTF-8 encoding.
    """
    with codecs.open(os.path.join(HERE, *parts), "rb", "utf-8") as f:
        return f.read()


META_FILE = read(META_PATH)


def find_meta(meta):
    """
    Extract __*meta*__ from META_FILE.
    """
    meta_match = re.search(
        rf"^__{meta}__ = ['\"]([^'\"]*)['\"]", META_FILE, re.M
    )
    if meta_match:
        return meta_match.group(1)
    raise RuntimeError(f"Unable to find __{meta}__ string.")


VERSION = find_meta("version")
URL = find_meta("url")
LONG = read("README.md")

if __name__ == "__main__":
    setup(
        name=NAME,
        description=find_meta("description"),
        license=find_meta("license"),
        url=URL,
        project_urls=PROJECT_URLS,
        version=VERSION,
        author=find_meta("author"),
        author_email=find_meta("email"),
        maintainer=find_meta("author"),
        maintainer_email=find_meta("email"),
        keywords=KEYWORDS,
        long_description=LONG,
        long_description_content_type="text/markdown",
        packages=PACKAGES,
        package_dir={"": "src"},
        python_requires=">=3.6",
        zip_safe=False,
        classifiers=CLASSIFIERS,
        install_requires=INSTALL_REQUIRES,
        extras_require=EXTRAS_REQUIRE,
        include_package_data=True,
    )

2025-07-03 18:24:33.099 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-03 18:24:36.472 | INFO     | Model API request cost info: input_tokens=1681, output_tokens=264, cost=0.006843
2025-07-03 18:24:36.473 | SUCCESS  | Successfully extracted environment config
2025-07-03 18:24:36.473 | INFO     | ******
2025-07-03 18:24:36.474 | INFO     | List of libraries:
- *No direct runtime dependencies found in `INSTALL_REQUIRES`.*

Runtime Requirements:
- Python >=3.6

Testing:
- Test framework (implied by dependencies): pytest
- Test dependencies (for `tests-no-zope`):
    - cloudpickle (if python_implementation == "CPython")
    - hypothesis
    - pympler
    - pytest>=4.3.0
    - pytest-xdist[psutil]
    - mypy>=0.971,<0.990 (if python_implementation == 'CPython')
    - pytest-mypy-plugins (if python_implementation == 'CPython' and python_version<'3.11')
- Test dependencies (for `tests`):
    - zope.interface
    - all dependencies from `tests-no-zope` (via `attrs[tests-no-zope]`)
- Test command:
    - The `setup.py` defines test dependencies but does not explicitly state the test command. Based on the `pytest` and `pytest-xdist` dependencies, the common test command would likely be `pytest`.
2025-07-03 18:24:36.474 | INFO     | ******
2025-07-03 18:24:36.474 | DEBUG    | Result of dispatch_intent: ('List of libraries:\n- *No direct runtime dependencies found in `INSTALL_REQUIRES`.*\n\nRuntime Requirements:\n- Python >=3.6\n\nTesting:\n- Test framework (implied by dependencies): pytest\n- Test dependencies (for `tests-no-zope`):\n    - cloudpickle (if python_implementation == "CPython")\n    - hypothesis\n    - pympler\n    - pytest>=4.3.0\n    - pytest-xdist[psutil]\n    - mypy>=0.971,<0.990 (if python_implementation == \'CPython\')\n    - pytest-mypy-plugins (if python_implementation == \'CPython\' and python_version<\'3.11\')\n- Test dependencies (for `tests`):\n    - zope.interface\n    - all dependencies from `tests-no-zope` (via `attrs[tests-no-zope]`)\n- Test command:\n    - The `setup.py` defines test dependencies but does not explicitly state the test command. Based on the `pytest` and `pytest-xdist` dependencies, the common test command would likely be `pytest`.', 'Get File Info', True)
2025-07-03 18:24:36.474 | INFO     | entering browse
2025-07-03 18:24:36.477 | INFO     | # Keep docs in sync with docs env and .readthedocs.yml.
[gh-actions]
python =
    3.6: py36, mypy
    3.7: py37
    3.8: py38, changelog
    3.9: py39
    3.10: py310, mypy
    3.11: py311
    pypy-3: pypy3


[tox]
envlist = mypy,pre-commit,py36,py37,py38,py39,py310,py311,pypy3,pyright,manifest,docs,pypi-description,changelog,coverage-report
isolated_build = True


[testenv:docs]
# Keep basepython in sync with ci.yml/docs and .readthedocs.yml.
basepython = python3.10
extras = docs
commands =
    sphinx-build -n -T -W -b html -d {envtmpdir}/doctrees docs docs/_build/html
    sphinx-build -n -T -W -b doctest -d {envtmpdir}/doctrees docs docs/_build/html

[testenv]
extras = tests
commands = python -m pytest {posargs:-n auto}


[testenv:py36]
extras = cov
setenv = COVERAGE_PROCESS_START={toxinidir}/pyproject.toml
commands = coverage run -m pytest {posargs:-n auto}


[testenv:py310]
extras = cov
setenv =
    PYTHONWARNINGS=d
    {[testenv:py36]setenv}
commands = {[testenv:py36]commands}


[testenv:py311]
extras = cov
# Python 3.6+ has a number of compile-time warnings on invalid string escapes.
# PYTHONWARNINGS=d and --no-compile below make them visible during the Tox run.
install_command = python -m pip install --no-compile {opts} {packages}
setenv =
    PYTHONWARNINGS=d
    {[testenv:py36]setenv}
# xdist is currently broken on 3.11rc2
commands = coverage run -m pytest {posargs}


[testenv:coverage-report]
basepython = python3.10
depends = py36,py310
skip_install = true
deps = coverage[toml]>=5.3
commands =
    coverage combine
    coverage report


[testenv:pre-commit]
skip_install = true
deps = pre-commit
passenv = HOMEPATH  # needed on Windows
commands = pre-commit run --all-files --show-diff-on-failure


[testenv:manifest]
basepython = python3.10
deps = check-manifest
skip_install = true
commands = check-manifest


[testenv:pypi-description]
basepython = python3.8
skip_install = true
deps =
    twine
    pip >= 18.0.0
commands =
    pip wheel -w {envtmpdir}/build --no-deps .
    twine check {envtmpdir}/build/*


[testenv:changelog]
basepython = python3.8
deps = towncrier
skip_install = true
commands = towncrier build --version UNRELEASED --draft


[testenv:mypy]
deps = mypy>=0.902
commands =
    mypy src/attrs/__init__.pyi src/attr/__init__.pyi src/attr/_typing_compat.pyi src/attr/_version_info.pyi src/attr/converters.pyi src/attr/exceptions.pyi src/attr/filters.pyi src/attr/setters.pyi src/attr/validators.pyi
    mypy tests/typing_example.py


[testenv:pyright]
# Install and configure node and pyright
# This *could* be folded into a custom install_command
# Use nodeenv to configure node in the running tox virtual environment
# Seeing errors using "nodeenv -p"
# Use npm install -g to install "globally" into the virtual environment
deps = nodeenv
commands =
    nodeenv --prebuilt --node=lts --force {envdir}
    npm install -g --no-package-lock --no-save pyright
    pytest tests/test_pyright.py -vv


[testenv:docset]
deps = doc2dash
extras = docs
allowlist_externals =
    rm
    cp
    tar
commands =
    rm -rf attrs.docset attrs.tgz docs/_build
    sphinx-build -n -T -W -b html -d {envtmpdir}/doctrees docs docs/_build/html
    doc2dash --index-page index.html --icon docs/_static/docset-icon.png --online-redirect-url https://www.attrs.org/en/latest/ docs/_build/html
    cp docs/_static/docset-icon@2x.png attrs.docset/icon@2x.png
    tar --exclude='.DS_Store' -cvzf attrs.tgz attrs.docset

2025-07-03 18:24:36.477 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-03 18:24:49.837 | INFO     | Model API request cost info: input_tokens=1579, output_tokens=840, cost=0.012348
2025-07-03 18:24:49.838 | SUCCESS  | Successfully extracted environment config
2025-07-03 18:24:49.838 | INFO     | ******
2025-07-03 18:24:49.838 | INFO     | Test Environments:
- `py36`, `py37`, `py38`, `py39`, `py310`, `py311`, `pypy3` (standard pytest runs)
- `mypy` (MyPy type checking)
- `pyright` (Pyright type checking)
- `pre-commit` (linting/formatting checks)
- `docs` (documentation building and testing)
- `changelog` (changelog generation)
- `manifest` (checking manifest)
- `pypi-description` (checking PyPI description)
- `coverage-report` (generating code coverage report)
- `docset` (generating documentation sets)

Dependencies for Testing:
- For `[testenv]` (default pytest runs): `attrs[tests]` (implied by `extras = tests`)
- For `py36`, `py310`, `py311`: `attrs[cov]` (implied by `extras = cov`), which includes coverage tools and probably `tests`
- For `mypy`: `mypy>=0.902`
- For `pyright`: `nodeenv`, `pyright` (installed via npm)

Commands for Testing:
- Default `[testenv]` (and most `py*` environments): `python -m pytest {posargs:-n auto}`
- For `py36`, `py310`, `py311` (excluding `py311`'s `{posargs}` which omits `-n auto`): `coverage run -m pytest {posargs:-n auto}`
- For `mypy`:
    - `mypy src/attrs/__init__.pyi src/attr/__init__.pyi src/attr/_typing_compat.pyi src/attr/_version_info.pyi src/attr/converters.pyi src/attr/exceptions.pyi src/attr/filters.pyi src/attr/setters.pyi src/attr/validators.pyi`
    - `mypy tests/typing_example.py`
- For `pyright`:
    - `nodeenv --prebuilt --node=lts --force {envdir}`
    - `npm install -g --no-package-lock --no-save pyright`
    - `pytest tests/test_pyright.py -vv`

Python Versions for Testing:
- Explicitly listed for `gh-actions` and `basepython` where specified:
    - Python 3.6 (`py36`)
    - Python 3.7 (`py37`)
    - Python 3.8 (`py38`, `changelog`, `pypi-description`)
    - Python 3.9 (`py39`)
    - Python 3.10 (`py310`, `docs`, `coverage-report`, also for `mypy` in gh-actions)
    - Python 3.11 (`py311`)
    - PyPy3 (`pypy3`)

Mypy Environment Setup:
- Environment name: `mypy`
- Python versions (from `gh-actions` mapping): Python 3.6, Python 3.10
- Dependencies: `mypy>=0.902`
- Commands:
    - `mypy src/attrs/__init__.pyi src/attr/__init__.pyi src/attr/_typing_compat.pyi src/attr/_version_info.pyi src/attr/converters.pyi src/attr/exceptions.pyi src/attr/filters.pyi src/attr/setters.pyi src/attr/validators.pyi`
    - `mypy tests/typing_example.py`
2025-07-03 18:24:49.839 | INFO     | ******
2025-07-03 18:24:49.839 | DEBUG    | Result of dispatch_intent: ("Test Environments:\n- `py36`, `py37`, `py38`, `py39`, `py310`, `py311`, `pypy3` (standard pytest runs)\n- `mypy` (MyPy type checking)\n- `pyright` (Pyright type checking)\n- `pre-commit` (linting/formatting checks)\n- `docs` (documentation building and testing)\n- `changelog` (changelog generation)\n- `manifest` (checking manifest)\n- `pypi-description` (checking PyPI description)\n- `coverage-report` (generating code coverage report)\n- `docset` (generating documentation sets)\n\nDependencies for Testing:\n- For `[testenv]` (default pytest runs): `attrs[tests]` (implied by `extras = tests`)\n- For `py36`, `py310`, `py311`: `attrs[cov]` (implied by `extras = cov`), which includes coverage tools and probably `tests`\n- For `mypy`: `mypy>=0.902`\n- For `pyright`: `nodeenv`, `pyright` (installed via npm)\n\nCommands for Testing:\n- Default `[testenv]` (and most `py*` environments): `python -m pytest {posargs:-n auto}`\n- For `py36`, `py310`, `py311` (excluding `py311`'s `{posargs}` which omits `-n auto`): `coverage run -m pytest {posargs:-n auto}`\n- For `mypy`:\n    - `mypy src/attrs/__init__.pyi src/attr/__init__.pyi src/attr/_typing_compat.pyi src/attr/_version_info.pyi src/attr/converters.pyi src/attr/exceptions.pyi src/attr/filters.pyi src/attr/setters.pyi src/attr/validators.pyi`\n    - `mypy tests/typing_example.py`\n- For `pyright`:\n    - `nodeenv --prebuilt --node=lts --force {envdir}`\n    - `npm install -g --no-package-lock --no-save pyright`\n    - `pytest tests/test_pyright.py -vv`\n\nPython Versions for Testing:\n- Explicitly listed for `gh-actions` and `basepython` where specified:\n    - Python 3.6 (`py36`)\n    - Python 3.7 (`py37`)\n    - Python 3.8 (`py38`, `changelog`, `pypi-description`)\n    - Python 3.9 (`py39`)\n    - Python 3.10 (`py310`, `docs`, `coverage-report`, also for `mypy` in gh-actions)\n    - Python 3.11 (`py311`)\n    - PyPy3 (`pypy3`)\n\nMypy Environment Setup:\n- Environment name: `mypy`\n- Python versions (from `gh-actions` mapping): Python 3.6, Python 3.10\n- Dependencies: `mypy>=0.902`\n- Commands:\n    - `mypy src/attrs/__init__.pyi src/attr/__init__.pyi src/attr/_typing_compat.pyi src/attr/_version_info.pyi src/attr/converters.pyi src/attr/exceptions.pyi src/attr/filters.pyi src/attr/setters.pyi src/attr/validators.pyi`\n    - `mypy tests/typing_example.py`", 'Get File Info', True)
2025-07-03 18:24:49.839 | INFO     | entering browse
2025-07-03 18:24:49.840 | INFO     | <p align="center">
   <a href="https://www.attrs.org/">
      <picture>
         <source srcset="https://raw.githubusercontent.com/python-attrs/attrs/main/docs/_static/attrs_logo_white.svg" media="(prefers-color-scheme: dark)">
         <img src="https://raw.githubusercontent.com/python-attrs/attrs/main/docs/_static/attrs_logo.svg" width="35%" alt="attrs" />
      </picture>
   </a>
</p>

<p align="center">
   <a href="https://www.attrs.org/en/stable/">
       <img src="https://img.shields.io/badge/Docs-RTD-black" alt="Documentation" />
   </a>
   <a href="https://github.com/python-attrs/attrs/blob/main/LICENSE">
      <img src="https://img.shields.io/badge/license-MIT-C06524" alt="License: MIT" />
   </a>
   <a href="https://bestpractices.coreinfrastructure.org/projects/6482"><img src="https://bestpractices.coreinfrastructure.org/projects/6482/badge"></a>
   <a href="https://pypi.org/project/attrs/">
      <img src="https://img.shields.io/pypi/v/attrs" />
   </a>
   <a href="https://pepy.tech/project/attrs">
      <img src="https://static.pepy.tech/personalized-badge/attrs?period=month&units=international_system&left_color=grey&right_color=blue&left_text=Downloads%20/%20Month" alt="Downloads per month" />
   </a>
   <a href="https://zenodo.org/badge/latestdoi/29918975"><img src="https://zenodo.org/badge/29918975.svg" alt="DOI"></a>
</p>

<!-- teaser-begin -->

*attrs* is the Python package that will bring back the **joy** of **writing classes** by relieving you from the drudgery of implementing object protocols (aka [dunder methods](https://www.attrs.org/en/latest/glossary.html#term-dunder-methods)).
[Trusted by NASA](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/personalizing-your-profile#list-of-qualifying-repositories-for-mars-2020-helicopter-contributor-achievement) for Mars missions since 2020!

Its main goal is to help you to write **concise** and **correct** software without slowing down your code.


## Sponsors

*attrs* would not be possible without our [amazing sponsors](https://github.com/sponsors/hynek).
Especially those generously supporting us at the *The Organization* tier and higher:

<p align="center">
   <a href="https://www.variomedia.de/">
      <img src="https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/Variomedia.svg" width="200" height="60"></img>
   </a>

   <a href="https://tidelift.com/subscription/pkg/pypi-attrs?utm_source=pypi-attrs&utm_medium=referral&utm_campaign=enterprise&utm_term=repo">
      <img src="https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/Tidelift.svg" width="200" height="60"></img>
   </a>

   <a href="https://sentry.io/">
      <img src="https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/Sentry.svg" width="200" height="60"></img>
   </a>

   <a href="https://filepreviews.io/">
      <img src="https://raw.githubusercontent.com/python-attrs/attrs/main/.github/sponsors/FilePreviews.svg" width="200" height="60"></img>
   </a>
</p>

<p align="center">
   <strong>Please consider <a href="https://github.com/sponsors/hynek">joining them</a> to help make <em>attrs</em>’s maintenance more sustainable!</strong>
</p>

<!-- teaser-end -->

## Example

*attrs* gives you a class decorator and a way to declaratively define the attributes on that class:

<!-- code-begin -->

```pycon
>>> from attrs import asdict, define, make_class, Factory

>>> @define
... class SomeClass:
...     a_number: int = 42
...     list_of_numbers: list[int] = Factory(list)
...
...     def hard_math(self, another_number):
...         return self.a_number + sum(self.list_of_numbers) * another_number


>>> sc = SomeClass(1, [1, 2, 3])
>>> sc
SomeClass(a_number=1, list_of_numbers=[1, 2, 3])

>>> sc.hard_math(3)
19
>>> sc == SomeClass(1, [1, 2, 3])
True
>>> sc != SomeClass(2, [3, 2, 1])
True

>>> asdict(sc)
{'a_number': 1, 'list_of_numbers': [1, 2, 3]}

>>> SomeClass()
SomeClass(a_number=42, list_of_numbers=[])

>>> C = make_class("C", ["a", "b"])
>>> C("foo", "bar")
C(a='foo', b='bar')
```

After *declaring* your attributes, *attrs* gives you:

- a concise and explicit overview of the class's attributes,
- a nice human-readable `__repr__`,
- equality-checking methods,
- an initializer,
- and much more,

*without* writing dull boilerplate code again and again and *without* runtime performance penalties.

**Hate type annotations**!?
No problem!
Types are entirely **optional** with *attrs*.
Simply assign `attrs.field()` to the attributes instead of annotating them with types.

---

This example uses *attrs*'s modern APIs that have been introduced in version 20.1.0, and the *attrs* package import name that has been added in version 21.3.0.
The classic APIs (`@attr.s`, `attr.ib`, plus their serious-business aliases) and the `attr` package import name will remain **indefinitely**.

Please check out [On The Core API Names](https://www.attrs.org/en/latest/names.html) for a more in-depth explanation.


## Data Classes

On the tin, *attrs* might remind you of `dataclasses` (and indeed, `dataclasses` [are a descendant](https://hynek.me/articles/import-attrs/) of *attrs*).
In practice it does a lot more and is more flexible.
For instance it allows you to define [special handling of NumPy arrays for equality checks](https://www.attrs.org/en/stable/comparison.html#customization), or allows more ways to [plug into the initialization process](https://www.attrs.org/en/stable/init.html#hooking-yourself-into-initialization).

For more details, please refer to our [comparison page](https://www.attrs.org/en/stable/why.html#data-classes).


## Project Information

- [**Changelog**](https://www.attrs.org/en/stable/changelog.html)
- [**Documentation**](https://www.attrs.org/)
- [**PyPI**](https://pypi.org/project/attrs/)
- [**Source Code**](https://github.com/python-attrs/attrs)
- [**Contributing**](https://github.com/python-attrs/attrs/blob/main/.github/CONTRIBUTING.md)
- [**Third-party Extensions**](https://github.com/python-attrs/attrs/wiki/Extensions-to-attrs)
- **License**: [MIT](https://www.attrs.org/en/latest/license.html)
- **Get Help**: please use the `python-attrs` tag on [StackOverflow](https://stackoverflow.com/questions/tagged/python-attrs)
- **Supported Python Versions**: 3.6 and later


### *attrs* for Enterprise

Available as part of the Tidelift Subscription.

The maintainers of *attrs* and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source packages you use to build your applications.
Save time, reduce risk, and improve code health, while paying the maintainers of the exact packages you use.
[Learn more.](https://tidelift.com/subscription/pkg/pypi-attrs?utm_source=pypi-attrs&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)

2025-07-03 18:24:49.840 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-03 18:24:53.389 | INFO     | Model API request cost info: input_tokens=2494, output_tokens=92, cost=0.007155
2025-07-03 18:24:53.389 | SUCCESS  | Successfully extracted environment config
2025-07-03 18:24:53.389 | INFO     | ******
2025-07-03 18:24:53.390 | INFO     | List of libraries:
- attrs

Runtime Requirements:
- Python 3.6 and later

Installation instructions:
- No explicit installation instructions are provided in this README.md. As a Python package listed on PyPI, it is typically installed via `pip` (e.g., `pip install attrs`).

Testing:
- No specific test framework or command is mentioned in this README.md.
2025-07-03 18:24:53.390 | INFO     | ******
2025-07-03 18:24:53.390 | DEBUG    | Result of dispatch_intent: ('List of libraries:\n- attrs\n\nRuntime Requirements:\n- Python 3.6 and later\n\nInstallation instructions:\n- No explicit installation instructions are provided in this README.md. As a Python package listed on PyPI, it is typically installed via `pip` (e.g., `pip install attrs`).\n\nTesting:\n- No specific test framework or command is mentioned in this README.md.', 'Get File Info', True)
2025-07-03 18:24:53.391 | DEBUG    | Result of dispatch_intent: ('You are browsing the path: /home/sahrish/Desktop/swe-bench/swe-factory-local/testbed/python-attrs__attrs-1065_2025-07-03_17-42-49/.github/workflows. The browsing Depth is 1.\nStructure of this path:\n\ncodeql-analysis.yml\n\nci.yml\n\nbuild-docset.yml\n\n', 'folder structure collected', True)
2025-07-03 18:25:04.284 | INFO     | Model API request cost info: input_tokens=3280, output_tokens=508, cost=0.013280
2025-07-03 18:25:16.790 | INFO     | Model API request cost info: input_tokens=3887, output_tokens=964, cost=0.019357
2025-07-03 18:25:16.810 | DEBUG    | Trying to select search APIs in json. Try 1 of 5.
2025-07-03 18:25:21.181 | INFO     | Model API request cost info: input_tokens=1632, output_tokens=699, cost=0.011070
2025-07-03 18:25:21.182 | DEBUG    | {
  "API_calls": [
    "browse_file_for_environment_info(\".github/workflows/ci.yml\", \"Python versions, dependencies, and commands used for 'mypy' and general testing jobs.\")"
  ],
  "collected_information": "Project Language & Version:\n    Primary language: Python.\n    Required minimum Python version: Python >=3.6.\n    Supported Python versions for testing (from tox.ini): Python 3.6, 3.7, 3.8, 3.9, 3.10, 3.11, and PyPy3.\n    Python versions specifically used for mypy checks (from tox.ini and expected from ci.yml): Python 3.6 and Python 3.10. Given the request regarding mypy compatibility, Python 3.10 would be a strong candidate for the Docker image base.\n\nDependency Management:\n    Python package manager: pip.\n    Build system backend: setuptools.build_meta (dependencies: setuptools>=40.6.0, wheel).\n\nCore Dependencies (for Testing):\n    The project primarily uses attrs[tests] to define its test dependencies. This extra includes:\n        pytest>=4.3.0 (test framework)\n        hypothesis\n        pympler\n        pytest-xdist[psutil] (for parallel test execution via -n auto)\n        zope.interface (required for the tests extra).\n    cloudpickle (if CPython, for tests-no-zope).\n\nMypy Specific Dependencies and Configuration:\n    mypy library: Version mypy>=0.971,<0.990 (from setup.py) or mypy>=0.902 (from tox.ini). The stricter range 0.971,<0.990 from setup.py should be preferred for the specific project version.\n    pytest-mypy-plugins (if CPython and Python version < 3.11, as per setup.py).\n    mypy configuration in pyproject.toml: disallow_untyped_defs = true, check_untyped_defs = true.\n\nTest Runner: pytest.\n\nTest Execution Commands:\n    For tests/dataclass_transform_example.py and tests/test_functional.py: These are standard pytest files. The command would be python -m pytest <path/to/test_file.py>. The tox.ini general command python -m pytest {posargs:-n auto} with pytest-xdist could also be considered, but direct file execution is sufficient.\n    For tests/typing_example.py: This file is explicitly listed in tox.ini as a target for mypy checks. The command to execute it for type checking is mypy tests/typing_example.py. It's crucial to use mypy for this specific file, as it confirms type correctness, not just runtime behavior.\n\nCI Configuration (anticipated): The ci.yml file is expected to confirm the exact Python versions and commands used for mypy and general testing in the CI pipeline, which will be the authoritative source for environment replication.",
  "terminate": false
}
2025-07-03 18:25:21.182 | DEBUG    | Extracted a valid json
2025-07-03 18:25:21.187 | INFO     | entering browse
2025-07-03 18:25:21.187 | INFO     | ---
name: CI

on:
  push:
    branches: [main]
    tags: ["*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  FORCE_COLOR: "1" # Make tools pretty.
  TOX_TESTENV_PASSENV: FORCE_COLOR
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"
  PYTHON_LATEST: "3.11"

permissions:
  contents: read

jobs:
  tests:
    name: tox on ${{ matrix.python-version }}
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.6"
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
          - "pypy-3.7"
          - "pypy-3.8"

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            files.pythonhosted.org:443
            github.com:443
            objects.githubusercontent.com:443
            pypi.org:443
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -VV
          python -m site
          python -m pip install --upgrade wheel tox tox-gh-actions

      - run: python -m tox

      - name: Upload coverage data
        uses: actions/upload-artifact@v3
        with:
          name: coverage-data
          path: .coverage.*
          if-no-files-found: ignore

  coverage:
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: block
          allowed-endpoints: >
            files.pythonhosted.org:443
            github.com:443
            pypi.org:443
            api.github.com:443

      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          # Use latest Python, so it understands all syntax.
          python-version: ${{env.PYTHON_LATEST}}

      - run: python -m pip install --upgrade coverage[toml]

      - name: Download coverage data
        uses: actions/download-artifact@v3
        with:
          name: coverage-data

      - name: Combine coverage and fail if it's <100%.
        run: |
          python -m coverage combine
          python -m coverage html --skip-covered --skip-empty
          python -m coverage report --fail-under=100

      - name: Upload HTML report if check failed.
        uses: actions/upload-artifact@v3
        with:
          name: html-report
          path: htmlcov
        if: ${{ failure() }}

  docs:
    name: Build docs & run doctests
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: block
          allowed-endpoints: >
            docs.python.org:443
            files.pythonhosted.org:443
            github.com:443
            pypi.org:443

      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - run: python -m pip install --upgrade wheel tox
      - run: python -m tox -e docs

  pyright:
    name: Check types using pyright
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: block
          allowed-endpoints: >
            files.pythonhosted.org:443
            github.com:443
            nodejs.org:443
            pypi.org:443
            registry.npmjs.org:443
            api.github.com:443

      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{env.PYTHON_LATEST}}

      - run: python -m pip install --upgrade wheel tox
      - run: python -m tox -e pyright

  package:
    name: Build & verify package
    runs-on: ubuntu-latest

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: block
          allowed-endpoints: >
            files.pythonhosted.org:443
            github.com:443
            pypi.org:443

      - uses: actions/checkout@v3
      - uses: hynek/build-and-inspect-python-package@v1

  install-dev:
    name: Verify dev env
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: block
          allowed-endpoints: >
            files.pythonhosted.org:443
            github.com:443
            pypi.org:443
            api.github.com:443
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{env.PYTHON_LATEST}}
      - run: python -m pip install -e .[dev]
      - run: python -c 'import attr; print(attr.__version__)'

  # Ensure everything required is passing for branch protection.
  required-checks-pass:
    if: always()

    needs:
      - coverage
      - docs
      - install-dev
      - package
      - pyright

    runs-on: ubuntu-latest

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}

2025-07-03 18:25:21.188 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-03 18:25:27.396 | INFO     | Model API request cost info: input_tokens=2062, output_tokens=503, cost=0.010185
2025-07-03 18:25:27.397 | SUCCESS  | Successfully extracted environment config
2025-07-03 18:25:27.397 | INFO     | ******
2025-07-03 18:25:27.397 | INFO     | List of libraries:
- wheel (installed via pip for `tests`, `docs`, `pyright` jobs)
- tox (installed via pip for `tests`, `docs`, `pyright` jobs)
- tox-gh-actions (installed via pip for `tests` job)
- coverage[toml] (installed via pip for `coverage` job)

Key environment variables:
- FORCE_COLOR=1
- TOX_TESTENV_PASSENV=FORCE_COLOR
- PIP_DISABLE_PIP_VERSION_CHECK=1
- PIP_NO_PYTHON_VERSION_WARNING=1
- PYTHON_LATEST=3.11

Runtime Requirements:
- Python versions for `tests` job: 3.6, 3.7, 3.8, 3.9, 3.10, 3.11, pypy-3.7, pypy-3.8
- Python version for `docs` job: 3.10
- Python version for `pyright` job: 3.11 (referencing `PYTHON_LATEST`)
- Python version for `coverage` job: 3.11 (referencing `PYTHON_LATEST`)
- Python version for `install-dev` job: 3.11 (referencing `PYTHON_LATEST`)

Testing:
- Test framework: tox (used for all general testing and specific tasks like `docs` and `pyright`)

**General Testing (`tests` job):**
- Python versions: 3.6, 3.7, 3.8, 3.9, 3.10, 3.11, pypy-3.7, pypy-3.8
- Dependencies: `wheel`, `tox`, `tox-gh-actions` (installed via `python -m pip install --upgrade wheel tox tox-gh-actions`)
- Test command: `python -m tox`

**Type Checking (using `pyright`, no explicit `mypy` job found):**
- Python version: 3.11
- Dependencies: `wheel`, `tox` (installed via `python -m pip install --upgrade wheel tox`)
- Command: `python -m tox -e pyright`
2025-07-03 18:25:27.397 | INFO     | ******
2025-07-03 18:25:27.397 | DEBUG    | Result of dispatch_intent: ('List of libraries:\n- wheel (installed via pip for `tests`, `docs`, `pyright` jobs)\n- tox (installed via pip for `tests`, `docs`, `pyright` jobs)\n- tox-gh-actions (installed via pip for `tests` job)\n- coverage[toml] (installed via pip for `coverage` job)\n\nKey environment variables:\n- FORCE_COLOR=1\n- TOX_TESTENV_PASSENV=FORCE_COLOR\n- PIP_DISABLE_PIP_VERSION_CHECK=1\n- PIP_NO_PYTHON_VERSION_WARNING=1\n- PYTHON_LATEST=3.11\n\nRuntime Requirements:\n- Python versions for `tests` job: 3.6, 3.7, 3.8, 3.9, 3.10, 3.11, pypy-3.7, pypy-3.8\n- Python version for `docs` job: 3.10\n- Python version for `pyright` job: 3.11 (referencing `PYTHON_LATEST`)\n- Python version for `coverage` job: 3.11 (referencing `PYTHON_LATEST`)\n- Python version for `install-dev` job: 3.11 (referencing `PYTHON_LATEST`)\n\nTesting:\n- Test framework: tox (used for all general testing and specific tasks like `docs` and `pyright`)\n\n**General Testing (`tests` job):**\n- Python versions: 3.6, 3.7, 3.8, 3.9, 3.10, 3.11, pypy-3.7, pypy-3.8\n- Dependencies: `wheel`, `tox`, `tox-gh-actions` (installed via `python -m pip install --upgrade wheel tox tox-gh-actions`)\n- Test command: `python -m tox`\n\n**Type Checking (using `pyright`, no explicit `mypy` job found):**\n- Python version: 3.11\n- Dependencies: `wheel`, `tox` (installed via `python -m pip install --upgrade wheel tox`)\n- Command: `python -m tox -e pyright`', 'Get File Info', True)
2025-07-03 18:25:39.764 | INFO     | Model API request cost info: input_tokens=5398, output_tokens=775, cost=0.021245
2025-07-03 18:25:44.519 | INFO     | Model API request cost info: input_tokens=6272, output_tokens=633, cost=0.022010
2025-07-03 18:25:44.528 | DEBUG    | Trying to select search APIs in json. Try 1 of 5.
2025-07-03 18:25:48.427 | INFO     | Model API request cost info: input_tokens=1300, output_tokens=652, cost=0.009770
2025-07-03 18:25:48.428 | DEBUG    | {
  "API_calls": [],
  "collected_information": "### Summary of Collected Information:\n\n1.  **Base Image/Operating System:** A Python base image is required. Given the various Python versions tested and the `mypy` checks targeting specific versions, `python:3.10-slim-buster` is a suitable choice as it's a stable version actively used for type checking in the project's `tox.ini` setup.\n\n2.  **Required Python Version:** The project requires `Python >=3.6`. Our choice of Python 3.10 satisfies this.\n\n3.  **Core Dependencies (`pip` installation):**\n    *   **Build dependencies for `attrs`:** `setuptools`, `wheel`. These are typically handled by `pip` when installing from source.\n    *   **Project installation:** The `attrs` library itself, including its `[tests]` extras, should be installed. This brings in `pytest`, `hypothesis`, `pympler`, `pytest-xdist[psutil]`, `zope.interface`, and other test dependencies. The command would be `pip install .[tests]`.\n    *   **For `mypy` specific checks:**\n        *   `mypy`: Version `mypy>=0.971,<0.990` as specified in `setup.py` should be explicitly installed or ensured from the `attrs[tests]` extra.\n        *   `pytest-mypy-plugins`: Required if the Python version is less than 3.11. This will be needed for Python 3.10.\n\n4.  **Environment Variables:** No specific environment variables were identified as critical for the basic test run beyond those handled by `tox` in CI, which we are bypassing by direct script execution.\n\n5.  **Test Execution Framework:** `pytest` is the primary framework for functional tests, and `mypy` is used for type checking tests.\n\n6.  **Commands to run target tests:**\n    *   `tests/dataclass_transform_example.py`: `python -m pytest tests/dataclass_transform_example.py`\n    *   `tests/test_functional.py`: `python -m pytest tests/test_functional.py`\n    *   `tests/typing_example.py`: `mypy tests/typing_example.py` (This test specifically confirms type correctness and is run with `mypy` as per `tox.ini`).\n\n7.  **Repository State:** The pull request is *not* applied, so we will be working with the base commit `67dc8cc261a5ef64f576ce73f2281cc9021d8fb4`. The Dockerfile should clone the repository at this specific commit.\n\nThis information is sufficient to build the Docker image and the evaluation script.",
  "terminate": true
}
2025-07-03 18:25:48.429 | DEBUG    | Extracted a valid json
2025-07-03 18:25:48.436 | INFO     | Trying to extract a dockerfile. Try 1 of 3.
2025-07-03 18:26:03.489 | INFO     | Model API request cost info: input_tokens=14833, output_tokens=498, cost=0.042063
2025-07-03 18:26:03.489 | INFO     | Raw dockerfile and produced in try 1. Writing dockerfile into file.
2025-07-03 18:31:12.354 | DEBUG    | Result of dispatch_intent: ('Image built successfully!\nContainer 17738164a388e8a187ca5a98e74dbb75d047a9689705f3e93907d80a2fadb27e started.\nPatch applied successfully.\nFind test_output.txt! Waiting for analysis. ', 'Docker image python-attrs__attrs-1065-dockerfile10:latest built successfully.\nContainer started.\nPatch applied.\nObtain test results successfully.', True)
2025-07-03 18:31:12.357 | DEBUG    | Trying to analyze the test log. Try 1 of 3.
2025-07-03 18:31:26.756 | INFO     | Model API request cost info: input_tokens=3482, output_tokens=291, cost=0.011615
2025-07-03 18:31:26.757 | DEBUG    | {
    "is_finish": false,
    "guidance_for_write_dockerfile_agent": "The test logs indicate that 'tox' is not found, preventing the execution of tests managed by 'tox' (tests/test_functional.py and tests/typing_example.py). While 'pytest' and 'mypy' are installed via '.[tests,cov]', 'tox' itself is a separate tool that needs to be installed. Please add a line to install 'tox' in the Dockerfile. Ensure it runs after 'pip install setuptools wheel' and before or after 'pip install -e \".[tests,cov]\"'.\n\nExample update:\n...\nRUN git clone https://github.com/python-attrs/attrs /testbed && \\\n    cd /testbed && \\\n    git reset --hard 67dc8cc261a5ef64f576ce73f2281cc9021d8fb4 && \\\n    pip install setuptools wheel && \\\n    pip install tox && \\ <-- Add this line\n    pip install -e \".[tests,cov]\"\n...",
    "guidance_for_write_eval_script_agent": "",
    "guidance_for_context_retrieval_agent": ""
}
2025-07-03 18:31:26.757 | DEBUG    | Extracted a valid json
2025-07-03 18:31:26.758 | INFO     | Too many rounds. Exceed largest number of tries..
2025-07-03 18:31:26.779 | INFO     | Removed project repository at testbed/python-attrs__attrs-1065_2025-07-03_17-42-49
2025-07-03 18:31:26.780 | INFO     | Task python-attrs__attrs-1065 completed successfully.
