diff --git a/src/attr/_make.py b/src/attr/_make.py
--- a/src/attr/_make.py
+++ b/src/attr/_make.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import, division, print_function
 
+import copy
 import hashlib
 import linecache
 import sys
@@ -21,6 +22,7 @@
     DefaultAlreadySetError,
     FrozenInstanceError,
     NotAnAttrsClassError,
+    PythonTooOldError,
     UnannotatedAttributeError,
 )
 
@@ -79,6 +81,7 @@ def attrib(
     type=None,
     converter=None,
     factory=None,
+    kw_only=False,
 ):
     """
     Create a new attribute on a class.
@@ -151,6 +154,9 @@ def attrib(
         This argument is provided for backward compatibility.
         Regardless of the approach used, the type will be stored on
         ``Attribute.type``.
+    :param kw_only: Make this attribute keyword-only (Python 3+)
+        in the generated ``__init__`` (if ``init`` is ``False``, this
+        parameter is ignored).
 
     .. versionadded:: 15.2.0 *convert*
     .. versionadded:: 16.3.0 *metadata*
@@ -163,6 +169,7 @@ def attrib(
        *convert* to achieve consistency with other noun-based arguments.
     .. versionadded:: 18.1.0
        ``factory=f`` is syntactic sugar for ``default=attr.Factory(f)``.
+    .. versionadded:: 18.2.0 *kw_only*
     """
     if hash is not None and hash is not True and hash is not False:
         raise TypeError(
@@ -206,6 +213,7 @@ def attrib(
         converter=converter,
         metadata=metadata,
         type=type,
+        kw_only=kw_only,
     )
 
 
@@ -285,7 +293,7 @@ def _counter_getter(e):
     return e[1].counter
 
 
-def _transform_attrs(cls, these, auto_attribs):
+def _transform_attrs(cls, these, auto_attribs, kw_only):
     """
     Transform all `_CountingAttr`s on a class into `Attribute`s.
 
@@ -368,19 +376,22 @@ def _transform_attrs(cls, these, auto_attribs):
 
     AttrsClass = _make_attr_tuple_class(cls.__name__, attr_names)
 
-    attrs = AttrsClass(
-        super_attrs
-        + [
-            Attribute.from_counting_attr(
-                name=attr_name, ca=ca, type=anns.get(attr_name)
-            )
-            for attr_name, ca in ca_list
-        ]
-    )
+    if kw_only:
+        own_attrs = [a._assoc(kw_only=True) for a in own_attrs]
+        super_attrs = [a._assoc(kw_only=True) for a in super_attrs]
+
+    attrs = AttrsClass(super_attrs + own_attrs)
 
     had_default = False
+    was_kw_only = False
     for a in attrs:
-        if had_default is True and a.default is NOTHING and a.init is True:
+        if (
+            was_kw_only is False
+            and had_default is True
+            and a.default is NOTHING
+            and a.init is True
+            and a.kw_only is False
+        ):
             raise ValueError(
                 "No mandatory attributes allowed after an attribute with a "
                 "default value or factory.  Attribute in question: %r" % (a,)
@@ -389,8 +400,21 @@ def _transform_attrs(cls, these, auto_attribs):
             had_default is False
             and a.default is not NOTHING
             and a.init is not False
+            and
+            # Keyword-only attributes without defaults can be specified
+            # after keyword-only attributes with defaults.
+            a.kw_only is False
         ):
             had_default = True
+        if was_kw_only is True and a.kw_only is False:
+            raise ValueError(
+                "Non keyword-only attributes are not allowed after a "
+                "keyword-only attribute.  Attribute in question: {a!r}".format(
+                    a=a
+                )
+            )
+        if was_kw_only is False and a.init is True and a.kw_only is True:
+            was_kw_only = True
 
     return _Attributes((attrs, super_attrs, super_attr_map))
 
@@ -427,9 +451,9 @@ class _ClassBuilder(object):
         "_super_attr_map",
     )
 
-    def __init__(self, cls, these, slots, frozen, auto_attribs):
+    def __init__(self, cls, these, slots, frozen, auto_attribs, kw_only):
         attrs, super_attrs, super_map = _transform_attrs(
-            cls, these, auto_attribs
+            cls, these, auto_attribs, kw_only
         )
 
         self._cls = cls
@@ -639,6 +663,7 @@ def attrs(
     frozen=False,
     str=False,
     auto_attribs=False,
+    kw_only=False,
 ):
     r"""
     A class decorator that adds `dunder
@@ -736,6 +761,10 @@ def attrs(
         Attributes annotated as :data:`typing.ClassVar` are **ignored**.
 
         .. _`PEP 526`: https://www.python.org/dev/peps/pep-0526/
+    :param bool kw_only: Make all attributes keyword-only (Python 3+)
+        in the generated ``__init__`` (if ``init`` is ``False``, this
+        parameter is ignored).
+
 
     .. versionadded:: 16.0.0 *slots*
     .. versionadded:: 16.1.0 *frozen*
@@ -752,13 +781,16 @@ def attrs(
        :class:`DeprecationWarning` if the classes compared are subclasses of
        each other. ``__eq`` and ``__ne__`` never tried to compared subclasses
        to each other.
+    .. versionadded:: 18.2.0 *kw_only*
     """
 
     def wrap(cls):
         if getattr(cls, "__class__", None) is None:
             raise TypeError("attrs only works with new-style classes.")
 
-        builder = _ClassBuilder(cls, these, slots, frozen, auto_attribs)
+        builder = _ClassBuilder(
+            cls, these, slots, frozen, auto_attribs, kw_only
+        )
 
         if repr is True:
             builder.add_repr(repr_ns)
@@ -1298,6 +1330,7 @@ def fmt_setter_with_converter(attr_name, value_var):
             }
 
     args = []
+    kw_only_args = []
     attrs_to_validate = []
 
     # This is a dictionary of names to validator and converter callables.
@@ -1357,11 +1390,13 @@ def fmt_setter_with_converter(attr_name, value_var):
                         )
                     )
         elif a.default is not NOTHING and not has_factory:
-            args.append(
-                "{arg_name}=attr_dict['{attr_name}'].default".format(
-                    arg_name=arg_name, attr_name=attr_name
-                )
+            arg = "{arg_name}=attr_dict['{attr_name}'].default".format(
+                arg_name=arg_name, attr_name=attr_name
             )
+            if a.kw_only:
+                kw_only_args.append(arg)
+            else:
+                args.append(arg)
             if a.converter is not None:
                 lines.append(fmt_setter_with_converter(attr_name, arg_name))
                 names_for_globals[
@@ -1370,7 +1405,11 @@ def fmt_setter_with_converter(attr_name, value_var):
             else:
                 lines.append(fmt_setter(attr_name, arg_name))
         elif has_factory:
-            args.append("{arg_name}=NOTHING".format(arg_name=arg_name))
+            arg = "{arg_name}=NOTHING".format(arg_name=arg_name)
+            if a.kw_only:
+                kw_only_args.append(arg)
+            else:
+                args.append(arg)
             lines.append(
                 "if {arg_name} is not NOTHING:".format(arg_name=arg_name)
             )
@@ -1402,7 +1441,10 @@ def fmt_setter_with_converter(attr_name, value_var):
                 )
             names_for_globals[init_factory_name] = a.default.factory
         else:
-            args.append(arg_name)
+            if a.kw_only:
+                kw_only_args.append(arg_name)
+            else:
+                args.append(arg_name)
             if a.converter is not None:
                 lines.append(fmt_setter_with_converter(attr_name, arg_name))
                 names_for_globals[
@@ -1428,13 +1470,23 @@ def fmt_setter_with_converter(attr_name, value_var):
     if post_init:
         lines.append("self.__attrs_post_init__()")
 
+    args = ", ".join(args)
+    if kw_only_args:
+        if PY2:
+            raise PythonTooOldError(
+                "Keyword-only arguments only work on Python 3 and later."
+            )
+
+        args += "{leading_comma}*, {kw_only_args}".format(
+            leading_comma=", " if args else "",
+            kw_only_args=", ".join(kw_only_args),
+        )
     return (
         """\
 def __init__(self, {args}):
     {lines}
 """.format(
-            args=", ".join(args),
-            lines="\n    ".join(lines) if lines else "pass",
+            args=args, lines="\n    ".join(lines) if lines else "pass"
         ),
         names_for_globals,
         annotations,
@@ -1463,6 +1515,7 @@ class Attribute(object):
         "metadata",
         "type",
         "converter",
+        "kw_only",
     )
 
     def __init__(
@@ -1478,6 +1531,7 @@ def __init__(
         metadata=None,
         type=None,
         converter=None,
+        kw_only=False,
     ):
         # Cache this descriptor here to speed things up later.
         bound_setattr = _obj_setattr.__get__(self, Attribute)
@@ -1515,6 +1569,7 @@ def __init__(
             ),
         )
         bound_setattr("type", type)
+        bound_setattr("kw_only", kw_only)
 
     def __setattr__(self, name, value):
         raise FrozenInstanceError()
@@ -1558,6 +1613,17 @@ def from_counting_attr(cls, name, ca, type=None):
             **inst_dict
         )
 
+    # Don't use attr.assoc since fields(Attribute) doesn't work
+    def _assoc(self, **changes):
+        """
+        Copy *self* and apply *changes*.
+        """
+        new = copy.copy(self)
+
+        new._setattrs(changes.items())
+
+        return new
+
     # Don't use _add_pickle since fields(Attribute) doesn't work
     def __getstate__(self):
         """
@@ -1572,8 +1638,11 @@ def __setstate__(self, state):
         """
         Play nice with pickle.
         """
+        self._setattrs(zip(self.__slots__, state))
+
+    def _setattrs(self, name_values_pairs):
         bound_setattr = _obj_setattr.__get__(self, Attribute)
-        for name, value in zip(self.__slots__, state):
+        for name, value in name_values_pairs:
             if name != "metadata":
                 bound_setattr(name, value)
             else:
@@ -1625,6 +1694,7 @@ class _CountingAttr(object):
         "_validator",
         "converter",
         "type",
+        "kw_only",
     )
     __attrs_attrs__ = tuple(
         Attribute(
@@ -1635,6 +1705,7 @@ class _CountingAttr(object):
             cmp=True,
             hash=True,
             init=True,
+            kw_only=False,
         )
         for name in ("counter", "_default", "repr", "cmp", "hash", "init")
     ) + (
@@ -1646,6 +1717,7 @@ class _CountingAttr(object):
             cmp=True,
             hash=False,
             init=True,
+            kw_only=False,
         ),
     )
     cls_counter = 0
@@ -1661,6 +1733,7 @@ def __init__(
         converter,
         metadata,
         type,
+        kw_only,
     ):
         _CountingAttr.cls_counter += 1
         self.counter = _CountingAttr.cls_counter
@@ -1677,6 +1750,7 @@ def __init__(
         self.converter = converter
         self.metadata = metadata
         self.type = type
+        self.kw_only = kw_only
 
     def validator(self, meth):
         """
diff --git a/src/attr/exceptions.py b/src/attr/exceptions.py
--- a/src/attr/exceptions.py
+++ b/src/attr/exceptions.py
@@ -47,3 +47,11 @@ class UnannotatedAttributeError(RuntimeError):
 
     .. versionadded:: 17.3.0
     """
+
+
+class PythonTooOldError(RuntimeError):
+    """
+    An ``attrs`` feature requiring a more recent python version has been used.
+
+    .. versionadded:: 18.2.0
+    """
