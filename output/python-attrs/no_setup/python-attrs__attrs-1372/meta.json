{
    "task_id": "python-attrs__attrs-1372",
    "setup_info": {
        "repo_path": "testbed/python-attrs__attrs-1372_2025-07-03_17-42-35",
        "repo_cache_path": "testbed/python-attrs/attrs_cache"
    },
    "task_info": {
        "repo": "python-attrs/attrs",
        "pull_number": 1372,
        "instance_id": "python-attrs__attrs-1372",
        "issue_numbers": [
            "1348"
        ],
        "base_commit": "ee0f19b696c60064c58cdc08b3265aef56d49ff8",
        "patch": "diff --git a/src/attr/converters.py b/src/attr/converters.py\n--- a/src/attr/converters.py\n+++ b/src/attr/converters.py\n@@ -7,7 +7,7 @@\n import typing\n \n from ._compat import _AnnotationExtractor\n-from ._make import NOTHING, Factory, pipe\n+from ._make import NOTHING, Converter, Factory, pipe\n \n \n __all__ = [\n@@ -33,10 +33,19 @@ def optional(converter):\n     .. versionadded:: 17.1.0\n     \"\"\"\n \n-    def optional_converter(val):\n-        if val is None:\n-            return None\n-        return converter(val)\n+    if isinstance(converter, Converter):\n+\n+        def optional_converter(val, inst, field):\n+            if val is None:\n+                return None\n+            return converter(val, inst, field)\n+\n+    else:\n+\n+        def optional_converter(val):\n+            if val is None:\n+                return None\n+            return converter(val)\n \n     xtr = _AnnotationExtractor(converter)\n \n@@ -48,6 +57,9 @@ def optional_converter(val):\n     if rt:\n         optional_converter.__annotations__[\"return\"] = typing.Optional[rt]\n \n+    if isinstance(converter, Converter):\n+        return Converter(optional_converter, takes_self=True, takes_field=True)\n+\n     return optional_converter\n \n \n",
        "test_patch": "diff --git a/tests/test_converters.py b/tests/test_converters.py\n--- a/tests/test_converters.py\n+++ b/tests/test_converters.py\n@@ -143,6 +143,14 @@ def test_fail(self):\n         with pytest.raises(ValueError):\n             c(\"not_an_int\")\n \n+    def test_converter_instance(self):\n+        \"\"\"\n+        Works when passed a Converter instance as argument.\n+        \"\"\"\n+        c = optional(Converter(to_bool))\n+\n+        assert True is c(\"yes\", None, None)\n+\n \n class TestDefaultIfNone:\n     def test_missing_default(self):\n@@ -272,6 +280,48 @@ class C:\n         )\n \n \n+class TestOptionalPipe:\n+    def test_optional(self):\n+        \"\"\"\n+        Nothing happens if None.\n+        \"\"\"\n+        c = optional(pipe(str, Converter(to_bool), bool))\n+\n+        assert None is c.converter(None, None, None)\n+\n+    def test_pipe(self):\n+        \"\"\"\n+        A value is given, run it through all wrapped converters.\n+        \"\"\"\n+        c = optional(pipe(str, Converter(to_bool), bool))\n+\n+        assert (\n+            True\n+            is c.converter(\"True\", None, None)\n+            is c.converter(True, None, None)\n+        )\n+\n+    def test_instance(self):\n+        \"\"\"\n+        Should work when set as an attrib.\n+        \"\"\"\n+\n+        @attr.s\n+        class C:\n+            x = attrib(\n+                converter=optional(pipe(str, Converter(to_bool), bool)),\n+                default=None,\n+            )\n+\n+        c1 = C()\n+\n+        assert None is c1.x\n+\n+        c2 = C(\"True\")\n+\n+        assert True is c2.x\n+\n+\n class TestToBool:\n     def test_unhashable(self):\n         \"\"\"\n",
        "problem_statement": "Error occurs when using converters.optional and converters.pipe together\n23.2.0 is OK.\r\n```Python\r\nPython 3.10.13 (main, Dec  6 2023, 12:01:00) [GCC 13.2.1 20230801] on linux\r\n>>> import attr\r\n>>> attr.__version__\r\n'23.2.0'\r\n>>> @attr.define\r\n... class A:\r\n...     abc: int | None = attr.field(converter=attr.converters.optional(attr.converters.pipe(str, int)), default=None)\r\n...     \r\n>>> A()\r\nA(abc=None)\r\n>>> A('1')\r\nA(abc=1)\r\n```\r\n\r\nafter 24.1.0, error occurs:\r\n```Python\r\nPython 3.10.13 (main, Dec  6 2023, 12:01:00) [GCC 13.2.1 20230801] on linux\r\n>>> import attr\r\n>>> attr.__version__\r\n'24.2.0'\r\n>>> @attr.define\r\n... class A:\r\n...     abc: int | None = attr.field(converter=attr.converters.optional(attr.converters.pipe(str, int)), default=None)\r\n...     \r\n>>> A()\r\nA(abc=None)\r\n>>> A('1')\r\nTraceback (most recent call last):\r\n  File \"/opt/pycharm-professional/plugins/python-ce/helpers/pydev/pydevconsole.py\", line 364, in runcode\r\n    coro = func()\r\n  File \"<input>\", line 1, in <module>\r\n  File \"<attrs generated init __main__.A>\", line 3, in __init__\r\n  File \"/home/mio/Work/venv/calliper310N/lib/python3.10/site-packages/attr/converters.py\", line 40, in optional_converter\r\n    return converter(val)\r\nTypeError: Converter.__init__.<locals>.<lambda>() missing 2 required positional arguments: 'instance' and 'field'\r\n\r\n```\n",
        "hints_text": "Also seeing this issue as I'm trying to upgrade to attrs 24, is there a fix or workaround for it?",
        "created_at": "2024-11-13T14:54:26Z",
        "version": "24.2"
    }
}