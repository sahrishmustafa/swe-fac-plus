{
    "task_id": "python-attrs__attrs-430",
    "setup_info": {
        "repo_path": "testbed/python-attrs__attrs-430_2025-07-03_17-42-35",
        "repo_cache_path": "testbed/python-attrs/attrs_cache"
    },
    "task_info": {
        "repo": "python-attrs/attrs",
        "pull_number": 430,
        "instance_id": "python-attrs__attrs-430",
        "issue_numbers": [
            "429"
        ],
        "base_commit": "6a07b035b77ea8756408d65a36160f8670c66933",
        "patch": "diff --git a/src/attr/_make.py b/src/attr/_make.py\n--- a/src/attr/_make.py\n+++ b/src/attr/_make.py\n@@ -31,7 +31,9 @@\n _obj_setattr = object.__setattr__\n _init_converter_pat = \"__attr_converter_{}\"\n _init_factory_pat = \"__attr_factory_{}\"\n-_tuple_property_pat = \"    {attr_name} = property(itemgetter({index}))\"\n+_tuple_property_pat = (\n+    \"    {attr_name} = _attrs_property(_attrs_itemgetter({index}))\"\n+)\n _classvar_prefixes = (\"typing.ClassVar\", \"t.ClassVar\", \"ClassVar\")\n # we don't use a double-underscore prefix because that triggers\n # name mangling when trying to create a slot for the field\n@@ -243,8 +245,9 @@ class MyClassAttributes(tuple):\n             )\n     else:\n         attr_class_template.append(\"    pass\")\n-    globs = {\"itemgetter\": itemgetter}\n+    globs = {\"_attrs_itemgetter\": itemgetter, \"_attrs_property\": property}\n     eval(compile(\"\\n\".join(attr_class_template), \"\", \"exec\"), globs)\n+\n     return globs[attr_class_name]\n \n \n",
        "test_patch": "diff --git a/tests/test_dark_magic.py b/tests/test_dark_magic.py\n--- a/tests/test_dark_magic.py\n+++ b/tests/test_dark_magic.py\n@@ -482,3 +482,18 @@ class Sub(Base):\n \n             with pytest.raises(FrozenInstanceError):\n                 i.b = \"3\"\n+\n+    def test_tuple_class_aliasing(self):\n+        \"\"\"\n+        itemgetter and property are legal attribute names.\n+        \"\"\"\n+\n+        @attr.s\n+        class C(object):\n+            property = attr.ib()\n+            itemgetter = attr.ib()\n+            x = attr.ib()\n+\n+        assert \"property\" == attr.fields(C).property.name\n+        assert \"itemgetter\" == attr.fields(C).itemgetter.name\n+        assert \"x\" == attr.fields(C).x.name\n",
        "problem_statement": "Exception when using auto_attribs and a attribute named property\nGiven a class like:\r\n\r\n```python\r\n@attr.s(auto_attribs=True)\r\nclass Foo:\r\n\r\n    property: str\r\n    other: str\r\n```\r\n\r\nAttrs is raising an exception:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"f.py\", line 13, in <module>\r\n    @attr.s(auto_attribs=True)\r\n  File \"/usr/local/lib/python3.6/site-packages/attr/_make.py\", line 729, in wrap\r\n    builder = _ClassBuilder(cls, these, slots, frozen, auto_attribs)\r\n  File \"/usr/local/lib/python3.6/site-packages/attr/_make.py\", line 409, in __init__\r\n    cls, these, auto_attribs\r\n  File \"/usr/local/lib/python3.6/site-packages/attr/_make.py\", line 354, in _transform_attrs\r\n    AttrsClass = _make_attr_tuple_class(cls.__name__, attr_names)\r\n  File \"/usr/local/lib/python3.6/site-packages/attr/_make.py\", line 220, in _make_attr_tuple_class\r\n    eval(compile(\"\\n\".join(attr_class_template), \"\", \"exec\"), globs)\r\n  File \"\", line 1, in <module>\r\n  File \"\", line 4, in BreaksAttributes\r\nTypeError: 'property' object is not callable\r\n```\r\n\r\nWhat's odd here, is that it works fine as long as property is the *last* item in the class, e.g.:\r\n\r\n```python\r\n@attr.s(auto_attribs=True)\r\nclass Foo:\r\n\r\n    other: str\r\n    property: str\r\n```\r\n\r\nthis works fine and doesn't raise an error.\n",
        "hints_text": "Upon further investigation, this doesn't appear to have anything to do with the ``auto_attribs=True``, as it also fails without that, using ``attr.ib()``.",
        "created_at": "2018-08-21T04:15:15Z",
        "version": "18.1"
    }
}