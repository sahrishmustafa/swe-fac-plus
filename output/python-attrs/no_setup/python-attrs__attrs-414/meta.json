{
    "task_id": "python-attrs__attrs-414",
    "setup_info": {
        "repo_path": "testbed/python-attrs__attrs-414_2025-07-03_17-42-35",
        "repo_cache_path": "testbed/python-attrs/attrs_cache"
    },
    "task_info": {
        "repo": "python-attrs/attrs",
        "pull_number": 414,
        "instance_id": "python-attrs__attrs-414",
        "issue_numbers": [
            "400"
        ],
        "base_commit": "03b265d390e3fc1a713ca0ee36314047b8c2b1fc",
        "patch": "diff --git a/src/attr/converters.py b/src/attr/converters.py\n--- a/src/attr/converters.py\n+++ b/src/attr/converters.py\n@@ -4,6 +4,8 @@\n \n from __future__ import absolute_import, division, print_function\n \n+from ._make import NOTHING, Factory\n+\n \n def optional(converter):\n     \"\"\"\n@@ -13,7 +15,7 @@ def optional(converter):\n     :param callable converter: the converter that is used for non-``None``\n         values.\n \n-    ..  versionadded:: 17.1.0\n+    .. versionadded:: 17.1.0\n     \"\"\"\n \n     def optional_converter(val):\n@@ -22,3 +24,55 @@ def optional_converter(val):\n         return converter(val)\n \n     return optional_converter\n+\n+\n+def default_if_none(default=NOTHING, factory=None):\n+    \"\"\"\n+    A converter that allows to replace ``None`` values by *default* or the\n+    result of *factory*.\n+\n+    :param default: Value to be used if ``None`` is passed. Passing an instance\n+       of :class:`attr.Factory` is supported, however the ``takes_self`` option\n+       is *not*.\n+    :param callable factory: A callable that takes not parameters whose result\n+       is used if ``None`` is passed.\n+\n+    :raises TypeError: If **neither** *default* or *factory* is passed.\n+    :raises TypeError: If **both** *default* and *factory* are passed.\n+    :raises ValueError: If an instance of :class:`attr.Factory` is passed with\n+       ``takes_self=True``.\n+\n+    .. versionadded:: 18.2.0\n+    \"\"\"\n+    if default is NOTHING and factory is None:\n+        raise TypeError(\"Must pass either `default` or `factory`.\")\n+\n+    if default is not NOTHING and factory is not None:\n+        raise TypeError(\n+            \"Must pass either `default` or `factory` but not both.\"\n+        )\n+\n+    if factory is not None:\n+        default = Factory(factory)\n+\n+    if isinstance(default, Factory):\n+        if default.takes_self:\n+            raise ValueError(\n+                \"`takes_self` is not supported by default_if_none.\"\n+            )\n+\n+        def default_if_none_converter(val):\n+            if val is not None:\n+                return val\n+\n+            return default.factory()\n+\n+    else:\n+\n+        def default_if_none_converter(val):\n+            if val is not None:\n+                return val\n+\n+            return default\n+\n+    return default_if_none_converter\n",
        "test_patch": "diff --git a/tests/test_converters.py b/tests/test_converters.py\n--- a/tests/test_converters.py\n+++ b/tests/test_converters.py\n@@ -6,7 +6,8 @@\n \n import pytest\n \n-from attr.converters import optional\n+from attr import Factory\n+from attr.converters import default_if_none, optional\n \n \n class TestOptional(object):\n@@ -19,6 +20,7 @@ def test_success_with_type(self):\n         Wrapped converter is used as usual if value is not None.\n         \"\"\"\n         c = optional(int)\n+\n         assert c(\"42\") == 42\n \n     def test_success_with_none(self):\n@@ -26,6 +28,7 @@ def test_success_with_none(self):\n         Nothing happens if None.\n         \"\"\"\n         c = optional(int)\n+\n         assert c(None) is None\n \n     def test_fail(self):\n@@ -33,5 +36,62 @@ def test_fail(self):\n         Propagates the underlying conversion error when conversion fails.\n         \"\"\"\n         c = optional(int)\n+\n         with pytest.raises(ValueError):\n             c(\"not_an_int\")\n+\n+\n+class TestDefaultIfNone(object):\n+    def test_missing_default(self):\n+        \"\"\"\n+        Raises TypeError if neither default nor factory have been passed.\n+        \"\"\"\n+        with pytest.raises(TypeError, match=\"Must pass either\"):\n+            default_if_none()\n+\n+    def test_too_many_defaults(self):\n+        \"\"\"\n+        Raises TypeError if both default and factory are passed.\n+        \"\"\"\n+        with pytest.raises(TypeError, match=\"but not both\"):\n+            default_if_none(True, lambda: 42)\n+\n+    def test_factory_takes_self(self):\n+        \"\"\"\n+        Raises ValueError if passed Factory has takes_self=True.\n+        \"\"\"\n+        with pytest.raises(ValueError, match=\"takes_self\"):\n+            default_if_none(Factory(list, takes_self=True))\n+\n+    @pytest.mark.parametrize(\"val\", [1, 0, True, False, \"foo\", \"\", object()])\n+    def test_not_none(self, val):\n+        \"\"\"\n+        If a non-None value is passed, it's handed down.\n+        \"\"\"\n+        c = default_if_none(\"nope\")\n+\n+        assert val == c(val)\n+\n+        c = default_if_none(factory=list)\n+\n+        assert val == c(val)\n+\n+    def test_none_value(self):\n+        \"\"\"\n+        Default values are returned when a None is passed.\n+        \"\"\"\n+        c = default_if_none(42)\n+\n+        assert 42 == c(None)\n+\n+    def test_none_factory(self):\n+        \"\"\"\n+        Factories are used if None is passed.\n+        \"\"\"\n+        c = default_if_none(factory=list)\n+\n+        assert [] == c(None)\n+\n+        c = default_if_none(default=Factory(list))\n+\n+        assert [] == c(None)\ndiff --git a/tests/typing_example.py b/tests/typing_example.py\n--- a/tests/typing_example.py\n+++ b/tests/typing_example.py\n@@ -78,3 +78,25 @@ class HH(DD, EE):\n \n # same class\n c == cc\n+\n+\n+# Converters\n+# XXX: Currently converters can only be functions so none of this works\n+# although the stubs should be correct.\n+\n+# @attr.s\n+# class ConvCOptional:\n+#     x: Optional[int] = attr.ib(converter=attr.converters.optional(int))\n+\n+\n+# ConvCOptional(1)\n+# ConvCOptional(None)\n+\n+\n+# @attr.s\n+# class ConvCDefaultIfNone:\n+#     x: int = attr.ib(converter=attr.converters.default_if_none(42))\n+\n+\n+# ConvCDefaultIfNone(1)\n+# ConvCDefaultIfNone(None)\n",
        "problem_statement": "Most elegant way to avoid None objects in class?\n(continuing from https://github.com/python-attrs/attrs/issues/170 which I don't want to derail)\r\n\r\nI have a class like this:\r\n```python\r\n@attr.s(frozen=True, auto_attribs=True)\r\nclass Status:\r\n    weight: int = attr.ib(cmp=True)\r\n    message: str = attr.ib(\r\n        cmp=False,\r\n        converter=lambda value: str() if value is None else value,\r\n    )\r\n    code: str = attr.ib(\r\n        cmp=False,\r\n        converter=lambda value: str() if value is None else value,\r\n    )\r\n\r\n    @classmethod\r\n    def Debug(cls, message=None, code=None):\r\n        return cls(weight=0, message=message, code=code)\r\n\r\n    [...]\r\n\r\n    @classmethod\r\n    def Error(cls, message=None, code=None):\r\n        return cls(weight=6, message=message, code=code)\r\n```\r\nIt can be instantiated like this: `Status.Error(\"This and that is wrong etc.\", code=\"mismatched-something\")`. However, instantiating it like `Status.Error()` should result in `Status(weight=6, message=\"\", code=\"\")`, i.e. I want to avoid None objects. Python unfortunately makes it more tedious than it should be to give out non-None default arguments.\r\n\r\n@hynek noted that I may want to use `default=\"\"` and use `attr.NOTHING` as the default argument in the constructors, however:\r\n```\r\nIn [1]: import attr\r\n   ...: @attr.s\r\n   ...: class Status:\r\n   ...:     a = attr.ib(default=\"\")\r\n   ...:     @classmethod\r\n   ...:     def aaa(cls, a=attr.NOTHING):\r\n   ...:         return cls(a)\r\n   ...:\r\n\r\nIn [2]: Status.aaa()\r\nOut[2]: Status(a=NOTHING)\r\n\r\nIn [3]: Status.aaa(\"\")\r\nOut[3]: Status(a='')\r\n\r\nIn [4]: import attr\r\n   ...: @attr.s\r\n   ...: class Status:\r\n   ...:     a = attr.ib(default=\"\")\r\n   ...:     @classmethod\r\n   ...:     def aaa(cls, a=None):\r\n   ...:         return cls(a=a or attr.NOTHING)\r\n\r\nIn [5]: Status.aaa()\r\nOut[5]: Status(a=NOTHING)\r\n```\r\n\n",
        "hints_text": "(I suppose I can use `def aaa(cls, a=\"\"):` here because strings are immutable, but I'd like to know about a more general approach.)\nUgh right the NOTHING way doesn\u2019t work because attrs uses literal `\"\"` as default parameters if possible.\nI guess what could be done is some kind of `attr.converters.default_if_none(default=NOTHING, factory=None)` so you could write `attr.converters.default_if_none(default=\"\")` or ``attr.converters.default_if_none(factory=list)``. I *think* I had uses for that too before. \ud83e\udd14",
        "created_at": "2018-07-28T13:19:23Z",
        "version": "18.1"
    }
}