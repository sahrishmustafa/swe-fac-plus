{
    "task_id": "python-attrs__attrs-173",
    "setup_info": {
        "repo_path": "testbed/python-attrs__attrs-173_2025-07-03_17-42-35",
        "repo_cache_path": "testbed/python-attrs/attrs_cache"
    },
    "task_info": {
        "repo": "python-attrs/attrs",
        "pull_number": 173,
        "instance_id": "python-attrs__attrs-173",
        "issue_numbers": [
            "177"
        ],
        "base_commit": "d02b1d8b5a4ff401ebf1cda637cc86b03cf789b8",
        "patch": "diff --git a/src/attr/__init__.py b/src/attr/__init__.py\n--- a/src/attr/__init__.py\n+++ b/src/attr/__init__.py\n@@ -23,6 +23,7 @@\n )\n from . import exceptions\n from . import filters\n+from . import converters\n from . import validators\n \n \n@@ -54,6 +55,7 @@\n     \"attrib\",\n     \"attributes\",\n     \"attrs\",\n+    \"converters\",\n     \"evolve\",\n     \"exceptions\",\n     \"fields\",\ndiff --git a/src/attr/converters.py b/src/attr/converters.py\nnew file mode 100644\n--- /dev/null\n+++ b/src/attr/converters.py\n@@ -0,0 +1,24 @@\n+\"\"\"\n+Commonly useful converters.\n+\"\"\"\n+\n+from __future__ import absolute_import, division, print_function\n+\n+\n+def optional(converter):\n+    \"\"\"\n+    A converter that allows an attribute to be optional. An optional attribute\n+    is one which can be set to ``None``.\n+\n+    :param callable converter: the converter that is used for non-``None``\n+        values.\n+\n+    ..  versionadded:: 17.1.0\n+    \"\"\"\n+\n+    def optional_converter(val):\n+        if val is None:\n+            return None\n+        return converter(val)\n+\n+    return optional_converter\n",
        "test_patch": "diff --git a/tests/test_converters.py b/tests/test_converters.py\nnew file mode 100644\n--- /dev/null\n+++ b/tests/test_converters.py\n@@ -0,0 +1,36 @@\n+\"\"\"\n+Tests for `attr.converters`.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import pytest\n+\n+from attr.converters import optional\n+\n+\n+class TestOptional(object):\n+    \"\"\"\n+    Tests for `optional`.\n+    \"\"\"\n+    def test_success_with_type(self):\n+        \"\"\"\n+        Wrapped converter is used as usual if value is not None.\n+        \"\"\"\n+        c = optional(int)\n+        assert c(\"42\") == 42\n+\n+    def test_success_with_none(self):\n+        \"\"\"\n+        Nothing happens if None.\n+        \"\"\"\n+        c = optional(int)\n+        assert c(None) is None\n+\n+    def test_fail(self):\n+        \"\"\"\n+        Propagates the underlying conversion error when conversion fails.\n+        \"\"\"\n+        c = optional(int)\n+        with pytest.raises(ValueError):\n+            c(\"not_an_int\")\n",
        "problem_statement": "documentation errors when describing `these`\nFollowing on in the vein of #171:\r\n\r\nThe \"these\" argument is documented as having [something to do with properties](https://github.com/python-attrs/attrs/blame/96fc8cb815e5d544e03f13a966ed54ac9c67645e/docs/examples.rst#L101) in [multiple places](https://github.com/python-attrs/attrs/blob/a48124b9049ab4102b18f2216d690a0d3319e704/src/attr/_make.py#L239).  But, does it?  In what way does `@property` not work with `@attr.s` already?  This program works exactly as I expect it would:\r\n\r\n```python\r\nimport attr\r\n\r\n@attr.s\r\nclass propertized(object):\r\n    _x = attr.ib()\r\n    @property\r\n    def x(self):\r\n        return self.x ** 2\r\n\r\np3 = propertized(3)\r\np3prime = propertized(x=3)\r\nprint(p3 == p3prime)\r\nprint(p3)\r\n```\r\n\r\nIt also describes the class body as being \"ignored\".  This is accurate in the extremely narrow sense of the implementation of what exactly `@attr.s` does - either reading the `attr.ib` objects out of the class namespace or not, which were presumably defined during the class body - but it is somewhat unclear for users who want to know what attr.s's interface is rather than the mechanics of its internals.\r\n\r\nThe passive voice of \"will be ignored\" also suggests that _everything_ will ignore the class body - attrs, python, random passers-by - whereas the docs mean to rather specifically say \"`@attr.s` will ignore the class body\".  I think it should be even more specific: `attr.s` will not transform any `attr.ib` declarations into arguments or parts of the `repr`, leaving them instead as private `_CountingAttr` objects.  I'd even go so far as to say that `attr.s` should emit a warning if any such objects are found, but that's probably a more complex discussion.\r\n\r\nAlso, `properties` is not an identifier and should not be typeset as such; \"`property` objects\" or somesuch would be a better way to express that (if it needs to be expressed).\n",
        "hints_text": "",
        "created_at": "2017-03-29T07:06:32Z",
        "version": "16.3"
    }
}