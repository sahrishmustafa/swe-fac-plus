{
    "task_id": "python-attrs__attrs-1065",
    "setup_info": {
        "repo_path": "testbed/python-attrs__attrs-1065_2025-07-03_17-42-35",
        "repo_cache_path": "testbed/python-attrs/attrs_cache"
    },
    "task_info": {
        "repo": "python-attrs/attrs",
        "pull_number": 1065,
        "instance_id": "python-attrs__attrs-1065",
        "issue_numbers": [
            "1003"
        ],
        "base_commit": "67dc8cc261a5ef64f576ce73f2281cc9021d8fb4",
        "patch": "diff --git a/docs/conf.py b/docs/conf.py\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -45,6 +45,11 @@\n     \"sphinxcontrib.towncrier\",\n ]\n \n+myst_enable_extensions = [\n+    \"colon_fence\",\n+    \"smartquotes\",\n+    \"deflist\",\n+]\n \n # Add any paths that contain templates here, relative to this directory.\n templates_path = [\"_templates\"]\ndiff --git a/src/attr/_make.py b/src/attr/_make.py\n--- a/src/attr/_make.py\n+++ b/src/attr/_make.py\n@@ -1217,6 +1217,7 @@ def attrs(\n     on_setattr=None,\n     field_transformer=None,\n     match_args=True,\n+    unsafe_hash=None,\n ):\n     r\"\"\"\n     A class decorator that adds :term:`dunder methods` according to the\n@@ -1279,8 +1280,8 @@ def attrs(\n         *eq*.\n     :param Optional[bool] cmp: Setting *cmp* is equivalent to setting *eq*\n         and *order* to the same value. Must not be mixed with *eq* or *order*.\n-    :param Optional[bool] hash: If ``None`` (default), the ``__hash__`` method\n-        is generated according how *eq* and *frozen* are set.\n+    :param Optional[bool] unsafe_hash: If ``None`` (default), the ``__hash__``\n+        method is generated according how *eq* and *frozen* are set.\n \n         1. If *both* are True, ``attrs`` will generate a ``__hash__`` for you.\n         2. If *eq* is True and *frozen* is False, ``__hash__`` will be set to\n@@ -1298,6 +1299,8 @@ def attrs(\n         `object.__hash__`, and the `GitHub issue that led to the default \\\n         behavior <https://github.com/python-attrs/attrs/issues/136>`_ for more\n         details.\n+    :param Optional[bool] hash: Alias for *unsafe_hash*. *unsafe_hash* takes\n+        precedence.\n     :param bool init: Create a ``__init__`` method that initializes the\n         ``attrs`` attributes. Leading underscores are stripped for the argument\n         name. If a ``__attrs_pre_init__`` method exists on the class, it will\n@@ -1469,9 +1472,14 @@ def attrs(\n     .. versionchanged:: 21.1.0 Support for ``__attrs_pre_init__``\n     .. versionchanged:: 21.1.0 *cmp* undeprecated\n     .. versionadded:: 21.3.0 *match_args*\n+    .. versionadded:: 22.2.0\n+       *unsafe_hash* as an alias for *hash* (for :pep:`681` compliance).\n     \"\"\"\n     eq_, order_ = _determine_attrs_eq_order(cmp, eq, order, None)\n-    hash_ = hash  # work around the lack of nonlocal\n+\n+    # unsafe_hash takes precedence due to PEP 681.\n+    if unsafe_hash is not None:\n+        hash = unsafe_hash\n \n     if isinstance(on_setattr, (list, tuple)):\n         on_setattr = setters.pipe(*on_setattr)\n@@ -1527,14 +1535,14 @@ def wrap(cls):\n \n         builder.add_setattr()\n \n+        nonlocal hash\n         if (\n-            hash_ is None\n+            hash is None\n             and auto_detect is True\n             and _has_own_attribute(cls, \"__hash__\")\n         ):\n             hash = False\n-        else:\n-            hash = hash_\n+\n         if hash is not True and hash is not False and hash is not None:\n             # Can't use `hash in` because 1 == True for example.\n             raise TypeError(\ndiff --git a/src/attr/_next_gen.py b/src/attr/_next_gen.py\n--- a/src/attr/_next_gen.py\n+++ b/src/attr/_next_gen.py\n@@ -26,6 +26,7 @@ def define(\n     *,\n     these=None,\n     repr=None,\n+    unsafe_hash=None,\n     hash=None,\n     init=None,\n     slots=True,\n@@ -81,6 +82,8 @@ def define(\n \n     .. versionadded:: 20.1.0\n     .. versionchanged:: 21.3.0 Converters are also run ``on_setattr``.\n+    .. versionadded:: 22.2.0\n+       *unsafe_hash* as an alias for *hash* (for :pep:`681` compliance).\n     \"\"\"\n \n     def do_it(cls, auto_attribs):\n@@ -89,6 +92,7 @@ def do_it(cls, auto_attribs):\n             these=these,\n             repr=repr,\n             hash=hash,\n+            unsafe_hash=unsafe_hash,\n             init=init,\n             slots=slots,\n             frozen=frozen,\n",
        "test_patch": "diff --git a/tests/dataclass_transform_example.py b/tests/dataclass_transform_example.py\n--- a/tests/dataclass_transform_example.py\n+++ b/tests/dataclass_transform_example.py\n@@ -55,3 +55,9 @@ class AliasedField:\n af = AliasedField(42)\n \n reveal_type(af.__init__)  # noqa\n+\n+\n+# unsafe_hash is accepted\n+@attrs.define(unsafe_hash=True)\n+class Hashable:\n+    pass\ndiff --git a/tests/test_functional.py b/tests/test_functional.py\n--- a/tests/test_functional.py\n+++ b/tests/test_functional.py\n@@ -739,3 +739,14 @@ class D(C):\n         assert \"_setattr('x', x)\" in src\n         assert \"_setattr('y', y)\" in src\n         assert object.__setattr__ != D.__setattr__\n+\n+    def test_unsafe_hash(self, slots):\n+        \"\"\"\n+        attr.s(unsafe_hash=True) makes a class hashable.\n+        \"\"\"\n+\n+        @attr.s(slots=slots, unsafe_hash=True)\n+        class Hashable:\n+            pass\n+\n+        assert hash(Hashable())\ndiff --git a/tests/typing_example.py b/tests/typing_example.py\n--- a/tests/typing_example.py\n+++ b/tests/typing_example.py\n@@ -452,3 +452,8 @@ def accessing_from_attrs() -> None:\n foo = object\n if attrs.has(foo) or attr.has(foo):\n     foo.__attrs_attrs__\n+\n+\n+@attrs.define(unsafe_hash=True)\n+class Hashable:\n+    pass\n",
        "problem_statement": "Add unsafe_hash for PEP 681\nI've been asked to add `unsafe_hash` as an alias for `hash` **at class level** for PEP 618 (data class transforms).\r\n\r\nI'm not enthusiastic about the lack of symmetry between class-level and field-level hash but this is not the hill I'm dying on.\n",
        "hints_text": "[PEP-681](https://peps.python.org/pep-0681/) not 618 if anyone's looking (title right, prose transposed), and specs are in [PEP-557](https://peps.python.org/pep-0557/#id7)",
        "created_at": "2022-12-01T10:16:44Z",
        "version": "22.1"
    }
}