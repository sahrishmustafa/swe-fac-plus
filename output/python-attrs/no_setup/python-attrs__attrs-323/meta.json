{
    "task_id": "python-attrs__attrs-323",
    "setup_info": {
        "repo_path": "testbed/python-attrs__attrs-323_2025-07-03_17-42-35",
        "repo_cache_path": "testbed/python-attrs/attrs_cache"
    },
    "task_info": {
        "repo": "python-attrs/attrs",
        "pull_number": 323,
        "instance_id": "python-attrs__attrs-323",
        "issue_numbers": [
            "322"
        ],
        "base_commit": "9af773bdf388125af7e469e7817c79e491679300",
        "patch": "diff --git a/src/attr/_make.py b/src/attr/_make.py\n--- a/src/attr/_make.py\n+++ b/src/attr/_make.py\n@@ -128,13 +128,13 @@ def attrib(default=NOTHING, validator=None,\n \n     .. versionadded:: 15.2.0 *convert*\n     .. versionadded:: 16.3.0 *metadata*\n-    ..  versionchanged:: 17.1.0 *validator* can be a ``list`` now.\n-    ..  versionchanged:: 17.1.0\n-        *hash* is ``None`` and therefore mirrors *cmp* by default.\n-    ..  versionadded:: 17.3.0 *type*\n-    ..  deprecated:: 17.4.0 *convert*\n-    ..  versionadded:: 17.4.0 *converter* as a replacement for the deprecated\n-        *convert* to achieve consistency with other noun-based arguments.\n+    .. versionchanged:: 17.1.0 *validator* can be a ``list`` now.\n+    .. versionchanged:: 17.1.0\n+       *hash* is ``None`` and therefore mirrors *cmp* by default.\n+    .. versionadded:: 17.3.0 *type*\n+    .. deprecated:: 17.4.0 *convert*\n+    .. versionadded:: 17.4.0 *converter* as a replacement for the deprecated\n+       *convert* to achieve consistency with other noun-based arguments.\n     \"\"\"\n     if hash is not None and hash is not True and hash is not False:\n         raise TypeError(\n@@ -364,7 +364,7 @@ class _ClassBuilder(object):\n     \"\"\"\n     __slots__ = (\n         \"_cls\", \"_cls_dict\", \"_attrs\", \"_super_names\", \"_attr_names\", \"_slots\",\n-        \"_frozen\", \"_has_post_init\",\n+        \"_frozen\", \"_has_post_init\", \"_delete_attribs\",\n     )\n \n     def __init__(self, cls, these, slots, frozen, auto_attribs):\n@@ -378,6 +378,7 @@ def __init__(self, cls, these, slots, frozen, auto_attribs):\n         self._slots = slots\n         self._frozen = frozen or _has_frozen_superclass(cls)\n         self._has_post_init = bool(getattr(cls, \"__attrs_post_init__\", False))\n+        self._delete_attribs = not bool(these)\n \n         self._cls_dict[\"__attrs_attrs__\"] = self._attrs\n \n@@ -407,10 +408,11 @@ def _patch_original_class(self):\n         super_names = self._super_names\n \n         # Clean class of attribute definitions (`attr.ib()`s).\n-        for name in self._attr_names:\n-            if name not in super_names and \\\n-                    getattr(cls, name, None) is not None:\n-                delattr(cls, name)\n+        if self._delete_attribs:\n+            for name in self._attr_names:\n+                if name not in super_names and \\\n+                        getattr(cls, name, None) is not None:\n+                    delattr(cls, name)\n \n         # Attach our dunder methods.\n         for name, value in self._cls_dict.items():\n@@ -575,7 +577,7 @@ def attrs(maybe_cls=None, these=None, repr_ns=None,\n         Django models) or don't want to.\n \n         If *these* is not ``None``, ``attrs`` will *not* search the class body\n-        for attributes.\n+        for attributes and will *not* remove any attributes from it.\n \n     :type these: :class:`dict` of :class:`str` to :func:`attr.ib`\n \n@@ -656,13 +658,15 @@ def attrs(maybe_cls=None, these=None, repr_ns=None,\n \n         .. _`PEP 526`: https://www.python.org/dev/peps/pep-0526/\n \n-    ..  versionadded:: 16.0.0 *slots*\n-    ..  versionadded:: 16.1.0 *frozen*\n-    ..  versionadded:: 16.3.0 *str*, and support for ``__attrs_post_init__``.\n-    ..  versionchanged::\n-            17.1.0 *hash* supports ``None`` as value which is also the default\n-            now.\n+    .. versionadded:: 16.0.0 *slots*\n+    .. versionadded:: 16.1.0 *frozen*\n+    .. versionadded:: 16.3.0 *str*\n+    .. versionadded:: 16.3.0 Support for ``__attrs_post_init__``.\n+    .. versionchanged:: 17.1.0\n+       *hash* supports ``None`` as value which is also the default now.\n     .. versionadded:: 17.3.0 *auto_attribs*\n+    .. versionchanged:: 18.1.0\n+       If *these* is passed, no attributes are deleted from the class body.\n     \"\"\"\n     def wrap(cls):\n         if getattr(cls, \"__class__\", None) is None:\n",
        "test_patch": "diff --git a/tests/test_make.py b/tests/test_make.py\n--- a/tests/test_make.py\n+++ b/tests/test_make.py\n@@ -269,6 +269,17 @@ class C(Base):\n             simple_attr(\"x\"),\n         ) == attrs\n \n+    def test_these_leave_body(self):\n+        \"\"\"\n+        If these is passed, no attributes are removed from the body.\n+        \"\"\"\n+        @attr.s(init=False, these={\"x\": attr.ib()})\n+        class C(object):\n+            x = 5\n+\n+        assert 5 == C().x\n+        assert \"C(x=5)\" == repr(C())\n+\n     def test_multiple_inheritance(self):\n         \"\"\"\n         Order of attributes doesn't get mixed up by multiple inheritance.\n",
        "problem_statement": "Don't delete class attributes specified in attrs(these=...)\nIn previous versions of `attrs` (verified in 16.3.0), you could get class attributes included in the auto-generated methods (`__repr__`, `__eq__`, et cetera) by setting `these` in the `attrs` decorator to the names of the attributes (with `init=False`).  As of version 17.3.0, the attributes listed in `these` are simply deleted from the class definition, eliminating the whole reason for specifying them via `these` instead of in the class body, or automatically via type annotations.  Attributes should only be deleted from the class definition if the attribute is an instance of whatever `attr.ib` returns, or at the very least, an option to not delete class attributes should be provided.\r\n\r\n\r\n    from attr import s, ib\r\n\r\n    @s(these=dict(something=ib(init=False)))\r\n    class test(object):\r\n\t    something = 'xyzzy'\r\n\r\n    print(test())\r\n\r\n\n",
        "hints_text": "Eh yeah, the whole point of `these` is to leave the class body alone.  \ud83d\ude48",
        "created_at": "2018-01-16T12:25:27Z",
        "version": "17.4"
    }
}