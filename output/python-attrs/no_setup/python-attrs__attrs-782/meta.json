{
    "task_id": "python-attrs__attrs-782",
    "setup_info": {
        "repo_path": "testbed/python-attrs__attrs-782_2025-07-03_17-42-35",
        "repo_cache_path": "testbed/python-attrs/attrs_cache"
    },
    "task_info": {
        "repo": "python-attrs/attrs",
        "pull_number": 782,
        "instance_id": "python-attrs__attrs-782",
        "issue_numbers": [
            "781"
        ],
        "base_commit": "0a6f8075eb8d9d52d9316e9d6e5ec2d12ff2e1a7",
        "patch": "diff --git a/src/attr/_make.py b/src/attr/_make.py\n--- a/src/attr/_make.py\n+++ b/src/attr/_make.py\n@@ -41,7 +41,12 @@\n _tuple_property_pat = (\n     \"    {attr_name} = _attrs_property(_attrs_itemgetter({index}))\"\n )\n-_classvar_prefixes = (\"typing.ClassVar\", \"t.ClassVar\", \"ClassVar\")\n+_classvar_prefixes = (\n+    \"typing.ClassVar\",\n+    \"t.ClassVar\",\n+    \"ClassVar\",\n+    \"typing_extensions.ClassVar\",\n+)\n # we don't use a double-underscore prefix because that triggers\n # name mangling when trying to create a slot for the field\n # (when slots=True)\n",
        "test_patch": "diff --git a/tests/test_annotations.py b/tests/test_annotations.py\n--- a/tests/test_annotations.py\n+++ b/tests/test_annotations.py\n@@ -418,6 +418,18 @@ class C:\n             foo=typing.Optional[typing.Any],\n         )\n \n+    @pytest.mark.parametrize(\"slots\", [True, False])\n+    def test_typing_extensions_classvar(self, slots):\n+        \"\"\"\n+        If ClassVar is coming from typing_extensions, it is recognized too.\n+        \"\"\"\n+\n+        @attr.s(auto_attribs=True, slots=slots)\n+        class C:\n+            cls_var: \"typing_extensions.ClassVar\" = 23  # noqa\n+\n+        assert_init_annotations(C)\n+\n     def test_keyword_only_auto_attribs(self):\n         \"\"\"\n         `kw_only` propagates to attributes defined via `auto_attribs`.\n",
        "problem_statement": "python3.10 interacts badly with typing_extensions.ClassVar\n```python\r\nfrom typing import Callable, Optional, ClassVar\r\n\r\nimport typing_extensions\r\nimport attr\r\n\r\n\r\n@attr.s(auto_attribs=True)\r\nclass Ham:\r\n    ham: typing_extensions.ClassVar[int] = 0\r\n    spam: int\r\n    eggs: Optional[int] = attr.ib(init=False, default=None)\r\n```\r\n\r\n```pytb\r\npython3.10 foo.py\r\nTraceback (most recent call last):\r\n  File \"/home/graingert/projects/twisted/foo.py\", line 8, in <module>\r\n    class Ham:\r\n  File \"/home/graingert/projects/twisted/.tox/py310-alldeps-nocov/lib/python3.10/site-packages/attr/_make.py\", line 1292, in wrap\r\n    builder = _ClassBuilder(\r\n  File \"/home/graingert/projects/twisted/.tox/py310-alldeps-nocov/lib/python3.10/site-packages/attr/_make.py\", line 604, in __init__\r\n    attrs, base_attrs, base_map = _transform_attrs(\r\n  File \"/home/graingert/projects/twisted/.tox/py310-alldeps-nocov/lib/python3.10/site-packages/attr/_make.py\", line 518, in _transform_attrs\r\n    raise ValueError(\r\nValueError: No mandatory attributes allowed after an attribute with a default value or factory.  Attribute in question: Attribute(name='spam', default=NOTHING, validator=None, repr=True, eq=True, order=True, hash=None, init=True, metadata=mappingproxy({}), type='int', converter=None, kw_only=False, inherited=False, on_setattr=None)\r\n```\n",
        "hints_text": "it seems to work fine if I use `from typing_extensions import ClassVar`\r\n\r\n```python\r\nfrom typing import Callable, Optional, ClassVar\r\n\r\nfrom typing_extensions import ClassVar\r\nimport attr\r\n\r\n\r\n@attr.s(auto_attribs=True)\r\nclass Ham:\r\n    ham: ClassVar[int] = 0\r\n    spam: int\r\n    eggs: Optional[int] = attr.ib(init=False, default=None)\r\n```\nYeah we just do a string comparison on `typing.ClassVar` or `ClassVar`.  Can you use `from typing import ClassVar`?  (I don't recall which supported versions of python include it these days)\n@euresti here's the context: \r\nhttps://github.com/twisted/twisted/pull/1559/files#diff-592f0a2a781d4b88035bcd58b8686ce792e80e17b7e93cb25bba26efab963250R958\nI'm avoiding the `from ... import` to avoid clashing with `twisted.internet.Protocol`\nAh.  Try \r\n```\r\nimport typing\r\n\r\ntyping.ClassVar[...]\r\n```\r\n\r\nThis should be available in python > 3.5.3.\r\n\r\nIf you need to support older pythons you can put it in quotes. i.e.\r\n```\r\n_log: \"typing.ClassVar[Logger]\" = Logger()\r\n```\r\n\nNote: `attrs` should probably support `typing_extensions.ClassVar`  I'm just trying to give you a workaround.\nAh I should totally be using `from typing import ClassVar` I mistakenly thought it was new in 3.8",
        "created_at": "2021-03-20T09:08:23Z",
        "version": "20.3"
    }
}