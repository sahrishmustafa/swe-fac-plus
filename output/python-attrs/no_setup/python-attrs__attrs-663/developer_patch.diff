diff --git a/src/attr/_make.py b/src/attr/_make.py
--- a/src/attr/_make.py
+++ b/src/attr/_make.py
@@ -557,6 +557,7 @@ class _ClassBuilder(object):
         "_on_setattr",
         "_slots",
         "_weakref_slot",
+        "_has_own_setattr",
     )
 
     def __init__(
@@ -573,6 +574,7 @@ def __init__(
         is_exc,
         collect_by_mro,
         on_setattr,
+        has_custom_setattr,
     ):
         attrs, base_attrs, base_map = _transform_attrs(
             cls, these, auto_attribs, kw_only, collect_by_mro,
@@ -585,7 +587,7 @@ def __init__(
         self._base_attr_map = base_map
         self._attr_names = tuple(a.name for a in attrs)
         self._slots = slots
-        self._frozen = frozen or _has_frozen_base_class(cls)
+        self._frozen = frozen
         self._weakref_slot = weakref_slot
         self._cache_hash = cache_hash
         self._has_post_init = bool(getattr(cls, "__attrs_post_init__", False))
@@ -593,12 +595,16 @@ def __init__(
         self._is_exc = is_exc
         self._on_setattr = on_setattr
 
+        self._has_own_setattr = has_custom_setattr
+
         self._cls_dict["__attrs_attrs__"] = self._attrs
 
         if frozen:
             self._cls_dict["__setattr__"] = _frozen_setattrs
             self._cls_dict["__delattr__"] = _frozen_delattrs
 
+            self._has_own_setattr = True
+
         if getstate_setstate:
             (
                 self._cls_dict["__getstate__"],
@@ -645,6 +651,13 @@ def _patch_original_class(self):
         for name, value in self._cls_dict.items():
             setattr(cls, name, value)
 
+        # If we've inherited an attrs __setattr__ and don't write our own,
+        # reset it to object's.
+        if not self._has_own_setattr and getattr(
+            cls, "__attrs_own_setattr__", False
+        ):
+            cls.__setattr__ = object.__setattr__
+
         return cls
 
     def _create_slots_class(self):
@@ -658,14 +671,24 @@ def _create_slots_class(self):
             if k not in tuple(self._attr_names) + ("__dict__", "__weakref__")
         }
 
+        # Traverse the MRO to check for an existing __weakref__ and
+        # __setattr__.
+        custom_setattr_inherited = False
         weakref_inherited = False
-
-        # Traverse the MRO to check for an existing __weakref__.
         for base_cls in self._cls.__mro__[1:-1]:
-            if "__weakref__" in getattr(base_cls, "__dict__", ()):
-                weakref_inherited = True
+            d = getattr(base_cls, "__dict__", {})
+
+            weakref_inherited = weakref_inherited or "__weakref__" in d
+            custom_setattr_inherited = custom_setattr_inherited or not (
+                d.get("__attrs_own_setattr__", False)
+            )
+
+            if weakref_inherited and custom_setattr_inherited:
                 break
 
+        if not self._has_own_setattr and not custom_setattr_inherited:
+            cd["__setattr__"] = object.__setattr__
+
         names = self._attr_names
         if (
             self._weakref_slot
@@ -836,7 +859,20 @@ def add_setattr(self):
         if not sa_attrs:
             return self
 
+        if self._has_own_setattr:
+            # We need to write a __setattr__ but there already is one!
+            raise ValueError(
+                "Can't combine custom __setattr__ with on_setattr hooks."
+            )
+
+        cls = self._cls
+
         def __setattr__(self, name, val):
+            """
+            Method generated by attrs for class %s.
+            """ % (
+                cls.__name__,
+            )
             try:
                 a, hook = sa_attrs[name]
             except KeyError:
@@ -846,7 +882,9 @@ def __setattr__(self, name, val):
 
             _obj_setattr(self, name, nval)
 
+        self._cls_dict["__attrs_own_setattr__"] = True
         self._cls_dict["__setattr__"] = self._add_method_dunders(__setattr__)
+        self._has_own_setattr = True
 
         return self
 
@@ -1076,6 +1114,8 @@ def attrs(
                circumvent that limitation by using
                ``object.__setattr__(self, "attribute_name", value)``.
 
+            5. Subclasses of a frozen class are frozen too.
+
     :param bool weakref_slot: Make instances weak-referenceable.  This has no
         effect unless ``slots`` is also enabled.
     :param bool auto_attribs: If ``True``, collect `PEP 526`_-annotated
@@ -1200,13 +1240,20 @@ def wrap(cls):
         if getattr(cls, "__class__", None) is None:
             raise TypeError("attrs only works with new-style classes.")
 
+        is_frozen = frozen or _has_frozen_base_class(cls)
         is_exc = auto_exc is True and issubclass(cls, BaseException)
+        has_own_setattr = auto_detect and _has_own_attribute(
+            cls, "__setattr__"
+        )
+
+        if has_own_setattr and is_frozen:
+            raise ValueError("Can't freeze a class with a custom __setattr__.")
 
         builder = _ClassBuilder(
             cls,
             these,
             slots,
-            frozen,
+            is_frozen,
             weakref_slot,
             _determine_whether_to_implement(
                 cls,
@@ -1221,6 +1268,7 @@ def wrap(cls):
             is_exc,
             collect_by_mro,
             on_setattr,
+            has_own_setattr,
         )
         if _determine_whether_to_implement(
             cls, repr, auto_detect, ("__repr__",)
@@ -1263,7 +1311,9 @@ def wrap(cls):
                     " hashing must be either explicitly or implicitly "
                     "enabled."
                 )
-        elif hash is True or (hash is None and eq is True and frozen is True):
+        elif hash is True or (
+            hash is None and eq is True and is_frozen is True
+        ):
             # Build a __hash__ if told so, or if it's safe.
             builder.add_hash()
         else:
