{
    "task_id": "python-attrs__attrs-1410",
    "setup_info": {
        "repo_path": "testbed/python-attrs__attrs-1410_2025-07-03_17-42-35",
        "repo_cache_path": "testbed/python-attrs/attrs_cache"
    },
    "task_info": {
        "repo": "python-attrs/attrs",
        "pull_number": 1410,
        "instance_id": "python-attrs__attrs-1410",
        "issue_numbers": [
            "1354"
        ],
        "base_commit": "6bde3618237cdae312e4e7fb006690be2a3ee0f6",
        "patch": "diff --git a/src/attr/_make.py b/src/attr/_make.py\n--- a/src/attr/_make.py\n+++ b/src/attr/_make.py\n@@ -2491,7 +2491,7 @@ def from_counting_attr(cls, name: str, ca: _CountingAttr, type=None):\n         if type is None:\n             type = ca.type\n         elif ca.type is not None:\n-            msg = \"Type annotation and type argument cannot both be present\"\n+            msg = f\"Type annotation and type argument cannot both be present for '{name}'.\"\n             raise ValueError(msg)\n         return cls(\n             name,\n",
        "test_patch": "diff --git a/tests/test_annotations.py b/tests/test_annotations.py\n--- a/tests/test_annotations.py\n+++ b/tests/test_annotations.py\n@@ -62,7 +62,7 @@ class C:\n                 x: int = attr.ib(type=int)\n \n         assert (\n-            \"Type annotation and type argument cannot both be present\",\n+            \"Type annotation and type argument cannot both be present for 'x'.\",\n         ) == e.value.args\n \n     def test_typing_annotations(self):\n",
        "problem_statement": "unhelpful message \"ValueError: Type annotation and type argument cannot both be present\"\nGetting this message because I both have the type annotation and type defined on a custom attribute class which is reasonable considering the ambiguity.\r\n\r\nHowever I think the message itself could be more helpful by displaying the name of the attribute to eliminate the variable hunt.\r\n\r\nMy suggested change is:\r\n\r\nhttps://github.com/python-attrs/attrs/blob/2afd663bf40e4a8209986accdfb1e2d53afc15e2/src/attr/_make.py#L2354\r\n```python\r\n    @classmethod\r\n    def from_counting_attr(cls, name, ca, type=None):\r\n        # type holds the annotated value. deal with conflicts:\r\n        if type is None:\r\n            type = ca.type\r\n        elif ca.type is not None:\r\n            raise ValueError(\r\n                f\"Type annotation and type argument for {name} cannot both be present\"\r\n            )\r\n        inst_dict = {\r\n            k: getattr(ca, k)\r\n            for k\r\n            in Attribute.__slots__\r\n            if k not in (\r\n                \"name\", \"validator\", \"default\", \"type\", \"convert\",\r\n            )  # exclude methods and deprecated alias\r\n        }\r\n        return cls(\r\n            name=name, validator=ca._validator, default=ca._default, type=type,\r\n            **inst_dict\r\n        )\r\n ```\n",
        "hints_text": "",
        "created_at": "2025-02-22T10:44:17Z",
        "version": "25.1"
    }
}