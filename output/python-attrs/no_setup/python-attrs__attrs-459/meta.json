{
    "task_id": "python-attrs__attrs-459",
    "setup_info": {
        "repo_path": "testbed/python-attrs__attrs-459_2025-07-03_17-42-35",
        "repo_cache_path": "testbed/python-attrs/attrs_cache"
    },
    "task_info": {
        "repo": "python-attrs/attrs",
        "pull_number": 459,
        "instance_id": "python-attrs__attrs-459",
        "issue_numbers": [
            "450"
        ],
        "base_commit": "7bfd0e4061daee413a0cd1a3c78f1f3a98e0f32b",
        "patch": "diff --git a/src/attr/_make.py b/src/attr/_make.py\n--- a/src/attr/_make.py\n+++ b/src/attr/_make.py\n@@ -409,12 +409,11 @@ def _transform_attrs(cls, these, auto_attribs, kw_only):\n             a.kw_only is False\n         ):\n             had_default = True\n-        if was_kw_only is True and a.kw_only is False:\n+        if was_kw_only is True and a.kw_only is False and a.init is True:\n             raise ValueError(\n                 \"Non keyword-only attributes are not allowed after a \"\n-                \"keyword-only attribute.  Attribute in question: {a!r}\".format(\n-                    a=a\n-                )\n+                \"keyword-only attribute (unless they are init=False).  \"\n+                \"Attribute in question: {a!r}\".format(a=a)\n             )\n         if was_kw_only is False and a.init is True and a.kw_only is True:\n             was_kw_only = True\n",
        "test_patch": "diff --git a/tests/test_make.py b/tests/test_make.py\n--- a/tests/test_make.py\n+++ b/tests/test_make.py\n@@ -705,7 +705,8 @@ class C(object):\n \n         assert (\n             \"Non keyword-only attributes are not allowed after a \"\n-            \"keyword-only attribute.  Attribute in question: Attribute\"\n+            \"keyword-only attribute (unless they are init=False).  \"\n+            \"Attribute in question: Attribute\"\n             \"(name='y', default=NOTHING, validator=None, repr=True, \"\n             \"cmp=True, hash=None, init=True, metadata=mappingproxy({}), \"\n             \"type=None, converter=None, kw_only=False)\",\n@@ -771,6 +772,62 @@ class C(Base):\n         assert c.x == 0\n         assert c.y == 1\n \n+    def test_init_false_attribute_after_keyword_attribute(self):\n+        \"\"\"\n+        A positional attribute cannot follow a `kw_only` attribute,\n+        but an `init=False` attribute can because it won't appear\n+        in `__init__`\n+        \"\"\"\n+\n+        @attr.s\n+        class KwArgBeforeInitFalse:\n+            kwarg = attr.ib(kw_only=True)\n+            non_init_function_default = attr.ib(init=False)\n+            non_init_keyword_default = attr.ib(\n+                init=False, default=\"default-by-keyword\"\n+            )\n+\n+            @non_init_function_default.default\n+            def _init_to_init(self):\n+                return self.kwarg + \"b\"\n+\n+        c = KwArgBeforeInitFalse(kwarg=\"a\")\n+\n+        assert c.kwarg == \"a\"\n+        assert c.non_init_function_default == \"ab\"\n+        assert c.non_init_keyword_default == \"default-by-keyword\"\n+\n+    def test_init_false_attribute_after_keyword_attribute_with_inheritance(\n+        self\n+    ):\n+        \"\"\"\n+        A positional attribute cannot follow a `kw_only` attribute,\n+        but an `init=False` attribute can because it won't appear\n+        in `__init__`. This test checks that we allow this\n+        even when the `kw_only` attribute appears in a parent class\n+        \"\"\"\n+\n+        @attr.s\n+        class KwArgBeforeInitFalseParent:\n+            kwarg = attr.ib(kw_only=True)\n+\n+        @attr.s\n+        class KwArgBeforeInitFalseChild(KwArgBeforeInitFalseParent):\n+            non_init_function_default = attr.ib(init=False)\n+            non_init_keyword_default = attr.ib(\n+                init=False, default=\"default-by-keyword\"\n+            )\n+\n+            @non_init_function_default.default\n+            def _init_to_init(self):\n+                return self.kwarg + \"b\"\n+\n+        c = KwArgBeforeInitFalseChild(kwarg=\"a\")\n+\n+        assert c.kwarg == \"a\"\n+        assert c.non_init_function_default == \"ab\"\n+        assert c.non_init_keyword_default == \"default-by-keyword\"\n+\n \n @pytest.mark.skipif(not PY2, reason=\"PY2-specific keyword-only error behavior\")\n class TestKeywordOnlyAttributesOnPy2(object):\n",
        "problem_statement": "init=False attributes which depend on keyword-only attributes are impossible\nThe initialization of an `init=False` attribute cannot (straightforwardly) depend on a `kw_only=True` attribute because there is no legal ordering of these two attributes.\r\n\r\n```python\r\nfrom attr import attrs, attrib\r\n\r\n\r\n@attrs\r\nclass BrokenInitFirst:\r\n    _to_init: str  = attrib(init=False)\r\n    kwarg: str = attrib(kw_only=True)\r\n\r\n    @_to_init.default\r\n    def _init_to_init(self) -> str:\r\n        return self.kwarg + \"foo\"\r\n\r\n\r\nBrokenInitFirst(kwarg=\"meep\")\r\n```\r\n\r\nproduces:\r\n\r\n```python\r\nAttributeError: 'BrokenInitFirst' object has no attribute 'kwarg'\r\n```\r\n\r\nwhile\r\n\r\n```python\r\nfrom attr import attrs, attrib\r\n\r\n\r\n@attrs\r\nclass BrokenKwArgFirst:\r\n    kwarg: str = attrib(kw_only=True)\r\n    _to_init: str = attrib(init=False)\r\n\r\n    @_to_init.default\r\n    def _init_to_init(self) -> str:\r\n        return self.kwarg + \"foo\"\r\n\r\n\r\nBrokenKwArgFirst(kwarg=\"meep\")\r\n```\r\n\r\nproduces\r\n\r\n```\r\n  File \"/Users/gabbard/anaconda3/envs/cwc-event/lib/python3.6/site-packages/attr/_make.py\", line 904, in attrs\r\n    return wrap(maybe_cls)\r\n  File \"/Users/gabbard/anaconda3/envs/cwc-event/lib/python3.6/site-packages/attr/_make.py\", line 855, in wrap\r\n    cache_hash,\r\n  File \"/Users/gabbard/anaconda3/envs/cwc-event/lib/python3.6/site-packages/attr/_make.py\", line 471, in __init__\r\n    cls, these, auto_attribs, kw_only\r\n  File \"/Users/gabbard/anaconda3/envs/cwc-event/lib/python3.6/site-packages/attr/_make.py\", line 416, in _transform_attrs\r\n    a=a\r\nValueError: Non keyword-only attributes are not allowed after a keyword-only attribute.  Attribute in question: Attribute(name='_to_init', default=Factory(factory=<function BrokenKwArgFirst._init_to_init at 0x10830df28>, takes_self=True), validator=None, repr=True, cmp=True, hash=None, init=False, metadata=mappingproxy({}), type=<class 'str'>, converter=None, kw_only=False)\r\n```\r\n\r\nThese examples can also be found in https://github.com/rgabbard/attrs-kwonly-init-bug\r\n\r\nThis is related to https://github.com/python-attrs/attrs/issues/448 . Assuming there is some sort of internal ordering of attributes which also controls their initialization order, I think the solution here is to sort `kw_only=True` attributes after `kw_only=False`, and `init=False` last of all.\n",
        "hints_text": "At a quick glance it looks like performing the sort mentioned above (first `kw_only=False, init=True`, then `kw_only=True, init=True`, last `init=False`) around https://github.com/python-attrs/attrs/blob/master/src/attr/_make.py#L378 should do the trick for both this and #448 .   @hynek , if this seems like the right strategy to you, I can make a PR with it.\n@hynek : bumping the question above, since I just ran into this problem again today.  If you can confirm you are happy with the proposed approach to a fix, I am happy to submit a PR with it.\nI\u2019m sorry you hit me in the middle of my vacation and I'm having a hard time to catch up with the more complex issues.\r\n\r\nAnd yes I agree that:\r\n\r\n1. `init=False attributes` should never cause a `Non keyword-only attributes\u2026` error\r\n1.  it\u2019s kinda weird that we don\u2019t allow kw_only attributes anywhere. someone should research why we chose that route. they are a lot more useful if you can sprinkle them anywhere.\r\n\r\nSo feel free to submit a PR if you manage to achieve that without breaking backward compatibility. Even in subclassing scenarios. I tend to think that it might be better to make the condition slightly more complicated instead of re-ordering them because that might have other unforeseen side effects.\n@hynek : After more thought I think you are correct that using a more complex condition is better.  I will poke at this as I have free time. :-)\n@hynek: I don't think you commented on the `BrokenInitFirst` case.  As with #448, it would introduce a (simpler) difference between the order of attributes at the order of arguments to `__init__`.  But the arguments for allowing them anywhere would be similar, no?\nI went through the [initial](https://github.com/python-attrs/attrs/pull/281) and [final](https://github.com/python-attrs/attrs/pull/411/files) PRs as well as the three related issues (#38 , #106 , #335 ).  It looks not allowing `kw_only` attributes anywhere was not a decision that was made very explicitly. The closest thing I see to a discussion of this is @hynek 's comment [here](https://github.com/python-attrs/attrs/pull/281#issuecomment-383271154) that \"I think it\u2019s fair to expect that a non-kw_only attribute must not come after a kw_only attribute\" and @Tinche 's [comment](https://github.com/python-attrs/attrs/issues/106#issuecomment-262722028):\r\n\r\n> Currently the definition order of attributes is the same as the order of the attributes in the generated `__init__`. This is strictly by @hynek's executive order and I personally agree with the rationale. If it wasn't intentional we would just sort the attributes and you wouldn't need to put arguments with defaults last. The order of definition is used in other places too: the `__repr__`, comparison methods, `attr.fields`.\r\n\r\nand subsequent discussion.\r\n\r\nI *think* the way forward is:\r\n* to maintain the current order of arguments (that is, declaration order) for purposes of `repr`, field initialization, etc.\r\n* to alter the condition to not thrown an exception if an `init=False` attribute follows a `kw_only` attribute\r\n* to float `kw_only` attributes to the end of the argument list when generating `__init__`\nI think that makes sense.  It doesn't address `BrokenInitFirst`, though, right?\n@wsanchez : I am a little uncertain whether `BrokenInitFirst` needs to be fixed, since the general rule seems to be that an `init=False` attribute with a default needs to come later in the attribute ordering than any fields it depends on (me calling it `Broken` was misleading - I was just trying to illustrate that no legal attribute ordering for this case existed; as long as we fix one of the two options then the particular problem I had in mind is solved). \r\n\nWhoops sorry, I glossed over the dependency there, but mostly wanted to be clear that this case wasn\u2019t addressed. I agree it shouldn\u2019t be. ",
        "created_at": "2018-10-31T23:56:58Z",
        "version": "18.2"
    }
}