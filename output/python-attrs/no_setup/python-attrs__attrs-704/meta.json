{
    "task_id": "python-attrs__attrs-704",
    "setup_info": {
        "repo_path": "testbed/python-attrs__attrs-704_2025-07-03_17-42-35",
        "repo_cache_path": "testbed/python-attrs/attrs_cache"
    },
    "task_info": {
        "repo": "python-attrs/attrs",
        "pull_number": 704,
        "instance_id": "python-attrs__attrs-704",
        "issue_numbers": [
            "657"
        ],
        "base_commit": "577691c40544b284cfbe3d7b381a5942c92d6d91",
        "patch": "diff --git a/src/attr/_funcs.py b/src/attr/_funcs.py\n--- a/src/attr/_funcs.py\n+++ b/src/attr/_funcs.py\n@@ -53,8 +53,10 @@ def asdict(\n         v = getattr(inst, a.name)\n         if filter is not None and not filter(a, v):\n             continue\n+\n         if value_serializer is not None:\n             v = value_serializer(inst, a, v)\n+\n         if recurse is True:\n             if has(v.__class__):\n                 rv[a.name] = asdict(\n@@ -65,7 +67,7 @@ def asdict(\n                     retain_collection_types,\n                     value_serializer,\n                 )\n-            elif isinstance(v, (tuple, list, set)):\n+            elif isinstance(v, (tuple, list, set, frozenset)):\n                 cf = v.__class__ if retain_collection_types is True else list\n                 rv[a.name] = cf(\n                     [\n@@ -127,7 +129,7 @@ def _asdict_anything(\n             retain_collection_types,\n             value_serializer,\n         )\n-    elif isinstance(val, (tuple, list, set)):\n+    elif isinstance(val, (tuple, list, set, frozenset)):\n         cf = val.__class__ if retain_collection_types is True else list\n         rv = cf(\n             [\n@@ -158,6 +160,7 @@ def _asdict_anything(\n         rv = val\n         if value_serializer is not None:\n             rv = value_serializer(None, None, rv)\n+\n     return rv\n \n \n@@ -212,7 +215,7 @@ def astuple(\n                         retain_collection_types=retain,\n                     )\n                 )\n-            elif isinstance(v, (tuple, list, set)):\n+            elif isinstance(v, (tuple, list, set, frozenset)):\n                 cf = v.__class__ if retain is True else list\n                 rv.append(\n                     cf(\n@@ -257,6 +260,7 @@ def astuple(\n                 rv.append(v)\n         else:\n             rv.append(v)\n+\n     return rv if tuple_factory is list else tuple_factory(rv)\n \n \n",
        "test_patch": "diff --git a/tests/test_funcs.py b/tests/test_funcs.py\n--- a/tests/test_funcs.py\n+++ b/tests/test_funcs.py\n@@ -149,12 +149,26 @@ def test_lists_tuples_retain_type(self, container, C):\n             retain_collection_types=True,\n         )\n \n+    @given(set_type=st.sampled_from((set, frozenset)))\n+    def test_sets_no_retain(self, C, set_type):\n+        \"\"\"\n+        Set types are converted to lists if retain_collection_types=False.\n+        \"\"\"\n+        d = asdict(\n+            C(1, set_type((1, 2, 3))),\n+            retain_collection_types=False,\n+            recurse=True,\n+        )\n+\n+        assert {\"x\": 1, \"y\": [1, 2, 3]} == d\n+\n     @given(st.sampled_from(MAPPING_TYPES))\n     def test_dicts(self, C, dict_factory):\n         \"\"\"\n         If recurse is True, also recurse into dicts.\n         \"\"\"\n         res = asdict(C(1, {\"a\": C(4, 5)}), dict_factory=dict_factory)\n+\n         assert {\"x\": 1, \"y\": {\"a\": {\"x\": 4, \"y\": 5}}} == res\n         assert isinstance(res, dict_factory)\n \n@@ -330,6 +344,19 @@ def test_roundtrip(self, cls, tuple_class):\n \n         assert instance == roundtrip_instance\n \n+    @given(set_type=st.sampled_from((set, frozenset)))\n+    def test_sets_no_retain(self, C, set_type):\n+        \"\"\"\n+        Set types are converted to lists if retain_collection_types=False.\n+        \"\"\"\n+        d = astuple(\n+            C(1, set_type((1, 2, 3))),\n+            retain_collection_types=False,\n+            recurse=True,\n+        )\n+\n+        assert (1, [1, 2, 3]) == d\n+\n \n class TestHas(object):\n     \"\"\"\n",
        "problem_statement": "attr.asdict(retain_collection_types=False) doesn't support frozenset\nHey, I ran into some surprising behavior when using `attr.asdict()` with a frozen set.\r\nI was expecting `retain_collection_types=False` to convert a frozenset to a list, as it does with a tuple or list, but it keeps it as a frozenset\r\n\r\nExample\r\n```py3\r\nimport attr\r\n\r\n@attr.s\r\nclass Foo:\r\n    bar = attr.ib()\r\n\r\nDATA = (1, 2, 3)\r\nprint(\"set:\", attr.asdict(Foo(set(DATA))))\r\nprint(\"frozenset\", attr.asdict(Foo(frozenset(DATA))))\r\n```\r\n\r\nOutput:\r\n```sh\r\n$ python attr_demo.py\r\nset: {'bar': [1, 2, 3]}\r\nfrozenset {'bar': frozenset({1, 2, 3})}\r\n```\r\n\r\nExpected Output\r\n```sh\r\n$ python attr_demo.py\r\nset: {'bar': [1, 2, 3]}\r\nfrozenset  {'bar': [1, 2, 3]}\r\n```\r\n\r\n\r\nit looks like the code change is adding `frozenset` to the `isinstance` check on https://github.com/python-attrs/attrs/blob/master/src/attr/_funcs.py#L55\r\n\n",
        "hints_text": "",
        "created_at": "2020-10-19T08:05:34Z",
        "version": "20.2"
    }
}