{
    "task_id": "python-attrs__attrs-888",
    "setup_info": {
        "repo_path": "testbed/python-attrs__attrs-888_2025-07-03_17-42-35",
        "repo_cache_path": "testbed/python-attrs/attrs_cache"
    },
    "task_info": {
        "repo": "python-attrs/attrs",
        "pull_number": 888,
        "instance_id": "python-attrs__attrs-888",
        "issue_numbers": [
            "646"
        ],
        "base_commit": "17067930128e78a9c3c7c5280b5417b7bce82657",
        "patch": "diff --git a/src/attr/_funcs.py b/src/attr/_funcs.py\n--- a/src/attr/_funcs.py\n+++ b/src/attr/_funcs.py\n@@ -46,6 +46,8 @@ def asdict(\n     ..  versionadded:: 16.0.0 *dict_factory*\n     ..  versionadded:: 16.1.0 *retain_collection_types*\n     ..  versionadded:: 20.3.0 *value_serializer*\n+    ..  versionadded:: 21.3.0 If a dict has a collection for a key, it is\n+        serialized as a tuple.\n     \"\"\"\n     attrs = fields(inst.__class__)\n     rv = dict_factory()\n@@ -61,11 +63,11 @@ def asdict(\n             if has(v.__class__):\n                 rv[a.name] = asdict(\n                     v,\n-                    True,\n-                    filter,\n-                    dict_factory,\n-                    retain_collection_types,\n-                    value_serializer,\n+                    recurse=True,\n+                    filter=filter,\n+                    dict_factory=dict_factory,\n+                    retain_collection_types=retain_collection_types,\n+                    value_serializer=value_serializer,\n                 )\n             elif isinstance(v, (tuple, list, set, frozenset)):\n                 cf = v.__class__ if retain_collection_types is True else list\n@@ -73,10 +75,11 @@ def asdict(\n                     [\n                         _asdict_anything(\n                             i,\n-                            filter,\n-                            dict_factory,\n-                            retain_collection_types,\n-                            value_serializer,\n+                            is_key=False,\n+                            filter=filter,\n+                            dict_factory=dict_factory,\n+                            retain_collection_types=retain_collection_types,\n+                            value_serializer=value_serializer,\n                         )\n                         for i in v\n                     ]\n@@ -87,17 +90,19 @@ def asdict(\n                     (\n                         _asdict_anything(\n                             kk,\n-                            filter,\n-                            df,\n-                            retain_collection_types,\n-                            value_serializer,\n+                            is_key=True,\n+                            filter=filter,\n+                            dict_factory=df,\n+                            retain_collection_types=retain_collection_types,\n+                            value_serializer=value_serializer,\n                         ),\n                         _asdict_anything(\n                             vv,\n-                            filter,\n-                            df,\n-                            retain_collection_types,\n-                            value_serializer,\n+                            is_key=False,\n+                            filter=filter,\n+                            dict_factory=df,\n+                            retain_collection_types=retain_collection_types,\n+                            value_serializer=value_serializer,\n                         ),\n                     )\n                     for kk, vv in iteritems(v)\n@@ -111,6 +116,7 @@ def asdict(\n \n def _asdict_anything(\n     val,\n+    is_key,\n     filter,\n     dict_factory,\n     retain_collection_types,\n@@ -123,22 +129,29 @@ def _asdict_anything(\n         # Attrs class.\n         rv = asdict(\n             val,\n-            True,\n-            filter,\n-            dict_factory,\n-            retain_collection_types,\n-            value_serializer,\n+            recurse=True,\n+            filter=filter,\n+            dict_factory=dict_factory,\n+            retain_collection_types=retain_collection_types,\n+            value_serializer=value_serializer,\n         )\n     elif isinstance(val, (tuple, list, set, frozenset)):\n-        cf = val.__class__ if retain_collection_types is True else list\n+        if retain_collection_types is True:\n+            cf = val.__class__\n+        elif is_key:\n+            cf = tuple\n+        else:\n+            cf = list\n+\n         rv = cf(\n             [\n                 _asdict_anything(\n                     i,\n-                    filter,\n-                    dict_factory,\n-                    retain_collection_types,\n-                    value_serializer,\n+                    is_key=False,\n+                    filter=filter,\n+                    dict_factory=dict_factory,\n+                    retain_collection_types=retain_collection_types,\n+                    value_serializer=value_serializer,\n                 )\n                 for i in val\n             ]\n@@ -148,10 +161,20 @@ def _asdict_anything(\n         rv = df(\n             (\n                 _asdict_anything(\n-                    kk, filter, df, retain_collection_types, value_serializer\n+                    kk,\n+                    is_key=True,\n+                    filter=filter,\n+                    dict_factory=df,\n+                    retain_collection_types=retain_collection_types,\n+                    value_serializer=value_serializer,\n                 ),\n                 _asdict_anything(\n-                    vv, filter, df, retain_collection_types, value_serializer\n+                    vv,\n+                    is_key=False,\n+                    filter=filter,\n+                    dict_factory=df,\n+                    retain_collection_types=retain_collection_types,\n+                    value_serializer=value_serializer,\n                 ),\n             )\n             for kk, vv in iteritems(val)\n",
        "test_patch": "diff --git a/tests/test_funcs.py b/tests/test_funcs.py\n--- a/tests/test_funcs.py\n+++ b/tests/test_funcs.py\n@@ -26,7 +26,7 @@\n \n \n @pytest.fixture(scope=\"session\", name=\"C\")\n-def fixture_C():\n+def _C():\n     \"\"\"\n     Return a simple but fully featured attrs class with an x and a y attribute.\n     \"\"\"\n@@ -199,6 +199,37 @@ def test_asdict_preserve_order(self, cls):\n \n         assert [a.name for a in fields(cls)] == list(dict_instance.keys())\n \n+    def test_retain_keys_are_tuples(self):\n+        \"\"\"\n+        retain_collect_types also retains keys.\n+        \"\"\"\n+\n+        @attr.s\n+        class A(object):\n+            a = attr.ib()\n+\n+        instance = A({(1,): 1})\n+\n+        assert {\"a\": {(1,): 1}} == attr.asdict(\n+            instance, retain_collection_types=True\n+        )\n+\n+    def test_tuple_keys(self):\n+        \"\"\"\n+        If a key is collection type, retain_collection_types is False,\n+         the key is serialized as a tuple.\n+\n+        See #646\n+        \"\"\"\n+\n+        @attr.s\n+        class A(object):\n+            a = attr.ib()\n+\n+        instance = A({(1,): 1})\n+\n+        assert {\"a\": {(1,): 1}} == attr.asdict(instance)\n+\n \n class TestAsTuple(object):\n     \"\"\"\ndiff --git a/tests/typing_example.py b/tests/typing_example.py\n--- a/tests/typing_example.py\n+++ b/tests/typing_example.py\n@@ -293,3 +293,7 @@ class FactoryTest:\n class MatchArgs:\n     a: int = attr.ib()\n     b: int = attr.ib()\n+\n+\n+attr.asdict(FactoryTest())\n+attr.asdict(FactoryTest(), retain_collection_types=False)\n",
        "problem_statement": "`asdict` fails for attributes of type Mapping with keys of type `Tuple`\n```\r\n@attr.s\r\nclass A:\r\n    a = attr.ib()\r\n        \r\ninstance = A({(1, ): 1})\r\nattr.asdict(instance)\r\n```\r\nproduces: \r\n`TypeError: unhashable type: 'list'` \r\n\r\nwhen the `retain_collection_types` flag is set to false (the default).  This can take a while to figure out, since the error is not the most descriptive (and the classes are not toy examples like this one).\r\nI just thought it would be worth mentioning. In any case, thanks for this awesome library.\n",
        "hints_text": "I stumbled upon the same issue and it is indeed not easy to figure out what is going wrong. I'm trying to think how this could be fixed. @hynek Could you comment on the following? Thanks!\r\n\r\n- Would it be acceptable to change the default value for `retain_collection_types` to `True`? This would reduce the likelihood of this issue to appear unexpectedly. It is not a full fix though.\r\n\r\n- Would it be ok to use `tuple` as default collection type, when `retain_collection_types=False`? I would expect this to completely resolve the issue.\nWe cannot change the defaults for attr.asdict due to backward compatibility but we can do that for the upcoming attrs.asdict.\n@hynek I understand. I've been thinking about related corner cases for `asdict`, which may also be addressed when making a newer version.\r\n\r\nFrozen sets are not changed into a default collection type, while sets are:\r\n\r\n```python\r\n>>> import attr\r\n>>> @attr.s\r\n... class A:\r\n...     a = attr.ib()\r\n... \r\n>>> instance = A(frozenset([1, 2]))\r\n>>> attr.asdict(instance)\r\n{'a': frozenset({1, 2})}\r\n>>>\r\n>>> instance = A(set([1, 2]))\r\n>>> attr.asdict(instance)\r\n{'a': [1, 2]}\r\n>>>\r\n```\r\n\r\nThis type of behavior can be made consistent in general by checking whether objects are instances of the classes defined in [collections.abc](https://docs.python.org/3/library/collections.html#collections.Counter).\r\n\r\n(Before making a new version, it would also be useful to understand the motivation for the current behavior.)\r\n\r\n\nI have just merged #704 that fixes the frozenset issue \u2013 sorry for the late reply!\nI have created a new issue for the new defaults, so closing this one.\nNo problem. Thank you for fixing!\nI think I still experience this issue on latest stable `attrs == 21.2.0`. Is this expected?\r\n\r\n\r\n```python\r\nimport attr\r\n\r\n@attr.s\r\nclass Test:\r\n    x = attr.ib()\r\n\r\nt = Test(x={(1, 2): 3})\r\nattr.asdict(t)\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/tmp/t.py\", line 11, in <module>\r\n    attr.asdict(t)\r\n  File \"/tmp/.venv/lib/python3.9/site-packages/attr/_funcs.py\", line 86, in asdict\r\n    rv[a.name] = df(\r\nTypeError: unhashable type: 'list'\r\n```\nYou have to pass `retain_collection_types=True` because we can't change the default value \u2013 that would be a very breaking change.\r\n\r\nWe intend to change it when you can import it from [`attrs`](https://www.attrs.org/en/stable/changelog.html#deprecations). I hope I'll get to it later this year.",
        "created_at": "2021-12-15T08:24:52Z",
        "version": "21.2"
    }
}