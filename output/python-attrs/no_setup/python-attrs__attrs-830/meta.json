{
    "task_id": "python-attrs__attrs-830",
    "setup_info": {
        "repo_path": "testbed/python-attrs__attrs-830_2025-07-03_17-42-35",
        "repo_cache_path": "testbed/python-attrs/attrs_cache"
    },
    "task_info": {
        "repo": "python-attrs/attrs",
        "pull_number": 830,
        "instance_id": "python-attrs__attrs-830",
        "issue_numbers": [
            "813",
            "813"
        ],
        "base_commit": "2ca7aada707167cda9b3c8bbc2fd195e4f1aa422",
        "patch": "diff --git a/src/attr/converters.py b/src/attr/converters.py\n--- a/src/attr/converters.py\n+++ b/src/attr/converters.py\n@@ -109,3 +109,44 @@ def default_if_none_converter(val):\n             return default\n \n     return default_if_none_converter\n+\n+\n+def to_bool(val):\n+    \"\"\"\n+    Convert \"boolean\" strings (e.g., from env. vars.) to real booleans.\n+\n+    Values mapping to :code:`True`:\n+\n+    - :code:`True`\n+    - :code:`\"true\"` / :code:`\"t\"`\n+    - :code:`\"yes\"` / :code:`\"y\"`\n+    - :code:`\"on\"`\n+    - :code:`\"1\"`\n+    - :code:`1`\n+\n+    Values mapping to :code:`False`:\n+\n+    - :code:`False`\n+    - :code:`\"false\"` / :code:`\"f\"`\n+    - :code:`\"no\"` / :code:`\"n\"`\n+    - :code:`\"off\"`\n+    - :code:`\"0\"`\n+    - :code:`0`\n+\n+    :raises ValueError: for any other value.\n+\n+    .. versionadded:: 21.3.0\n+    \"\"\"\n+    if isinstance(val, str):\n+        val = val.lower()\n+    truthy = {True, \"true\", \"t\", \"yes\", \"y\", \"on\", \"1\", 1}\n+    falsy = {False, \"false\", \"f\", \"no\", \"n\", \"off\", \"0\", 0}\n+    try:\n+        if val in truthy:\n+            return True\n+        if val in falsy:\n+            return False\n+    except TypeError:\n+        # Raised when \"val\" is not hashable (e.g., lists)\n+        pass\n+    raise ValueError(\"Cannot convert value to bool: {}\".format(val))\n",
        "test_patch": "diff --git a/tests/test_converters.py b/tests/test_converters.py\n--- a/tests/test_converters.py\n+++ b/tests/test_converters.py\n@@ -4,14 +4,12 @@\n \n from __future__ import absolute_import\n \n-from distutils.util import strtobool\n-\n import pytest\n \n import attr\n \n from attr import Factory, attrib\n-from attr.converters import default_if_none, optional, pipe\n+from attr.converters import default_if_none, optional, pipe, to_bool\n \n \n class TestOptional(object):\n@@ -106,7 +104,7 @@ def test_success(self):\n         \"\"\"\n         Succeeds if all wrapped converters succeed.\n         \"\"\"\n-        c = pipe(str, strtobool, bool)\n+        c = pipe(str, to_bool, bool)\n \n         assert True is c(\"True\") is c(True)\n \n@@ -114,7 +112,7 @@ def test_fail(self):\n         \"\"\"\n         Fails if any wrapped converter fails.\n         \"\"\"\n-        c = pipe(str, strtobool)\n+        c = pipe(str, to_bool)\n \n         # First wrapped converter fails:\n         with pytest.raises(ValueError):\n@@ -131,8 +129,33 @@ def test_sugar(self):\n \n         @attr.s\n         class C(object):\n-            a1 = attrib(default=\"True\", converter=pipe(str, strtobool, bool))\n-            a2 = attrib(default=True, converter=[str, strtobool, bool])\n+            a1 = attrib(default=\"True\", converter=pipe(str, to_bool, bool))\n+            a2 = attrib(default=True, converter=[str, to_bool, bool])\n \n         c = C()\n         assert True is c.a1 is c.a2\n+\n+\n+class TestToBool(object):\n+    def test_unhashable(self):\n+        \"\"\"\n+        Fails if value is unhashable.\n+        \"\"\"\n+        with pytest.raises(ValueError, match=\"Cannot convert value to bool\"):\n+            to_bool([])\n+\n+    def test_truthy(self):\n+        \"\"\"\n+        Fails if truthy values are incorrectly converted.\n+        \"\"\"\n+        assert to_bool(\"t\")\n+        assert to_bool(\"yes\")\n+        assert to_bool(\"on\")\n+\n+    def test_falsy(self):\n+        \"\"\"\n+        Fails if falsy values are incorrectly converted.\n+        \"\"\"\n+        assert not to_bool(\"f\")\n+        assert not to_bool(\"no\")\n+        assert not to_bool(\"off\")\ndiff --git a/tests/typing_example.py b/tests/typing_example.py\n--- a/tests/typing_example.py\n+++ b/tests/typing_example.py\n@@ -118,6 +118,20 @@ class Error(Exception):\n # ConvCDefaultIfNone(None)\n \n \n+# @attr.s\n+# class ConvCToBool:\n+#     x: int = attr.ib(converter=attr.converters.to_bool)\n+\n+\n+# ConvCToBool(1)\n+# ConvCToBool(True)\n+# ConvCToBool(\"on\")\n+# ConvCToBool(\"yes\")\n+# ConvCToBool(0)\n+# ConvCToBool(False)\n+# ConvCToBool(\"n\")\n+\n+\n # Validators\n @attr.s\n class Validated:\n",
        "problem_statement": "Python 3.10 deprecation in tests due to distutils \nThe function is simple enough to be vendored for tests.\r\n\r\n```\r\ntests/test_converters.py:7\r\n  /root/checked_repos/attrs/tests/test_converters.py:7: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\r\n    from distutils.util import strtobool\r\n\r\n-- Docs: https://docs.pytest.org/en/stable/warnings.html\r\n```\r\n\r\nhttps://github.com/python-attrs/attrs/blob/d0cff8face92478c950ba05a7d9403b1e342407a/tests/test_converters.py#L7\nPython 3.10 deprecation in tests due to distutils \nThe function is simple enough to be vendored for tests.\r\n\r\n```\r\ntests/test_converters.py:7\r\n  /root/checked_repos/attrs/tests/test_converters.py:7: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives\r\n    from distutils.util import strtobool\r\n\r\n-- Docs: https://docs.pytest.org/en/stable/warnings.html\r\n```\r\n\r\nhttps://github.com/python-attrs/attrs/blob/d0cff8face92478c950ba05a7d9403b1e342407a/tests/test_converters.py#L7\n",
        "hints_text": "I\u2018d add this as\r\n```python\r\ndef to_bool(val: Any) -> bool:\r\n    \"\"\"\r\n    Convert \"boolean\" strings (e.g., from env. vars.) to real booleans.\r\n\r\n    Values mapping to :code:`True`:\r\n\r\n    - :code:`True`\r\n    - :code:`\"true\"` / :code:`\"t\"`\r\n    - :code:`\"yes\"` / :code:`\"y\"`\r\n    - :code:`\"on\"`\r\n    - :code:`\"1\"`\r\n    - :code:`1`\r\n\r\n    Values mapping to :code:`False`:\r\n\r\n    - :code:`False`\r\n    - :code:`\"false\"` / :code:`\"f\"`\r\n    - :code:`\"no\"` / :code:`\"n\"`\r\n    - :code:`\"off\"`\r\n    - :code:`\"0\"`\r\n    - :code:`0`\r\n\r\n    Raise :exc:`ValueError` for any other value.\r\n    \"\"\"\r\n    if isinstance(val, str):\r\n        val = val.lower()\r\n    truthy = {True, \"true\", \"t\", \"yes\", \"y\", \"on\", \"1\", 1}\r\n    falsy = {False, \"false\", \"f\", \"no\", \"n\", \"off\", \"0\", 0}\r\n    try:\r\n        if val in truthy:\r\n            return True\r\n        if val in falsy:\r\n            return False\r\n    except TypeError:\r\n        # Raised when \"val\" is not hashable (e.g., lists)\r\n        pass\r\n    raise ValueError(f\"Cannot convert value to bool: {val}\")\r\n```\r\nto `converters.py`.  It could then also be used as field converter. \r\n\r\nThis function is already part of typed-settings and I intended to eventually move it to attrs.\r\n\r\n@hynek, what do you think?\nSGTM but remember to put the annotations into the stub file. :)\nI\u2018d add this as\r\n```python\r\ndef to_bool(val: Any) -> bool:\r\n    \"\"\"\r\n    Convert \"boolean\" strings (e.g., from env. vars.) to real booleans.\r\n\r\n    Values mapping to :code:`True`:\r\n\r\n    - :code:`True`\r\n    - :code:`\"true\"` / :code:`\"t\"`\r\n    - :code:`\"yes\"` / :code:`\"y\"`\r\n    - :code:`\"on\"`\r\n    - :code:`\"1\"`\r\n    - :code:`1`\r\n\r\n    Values mapping to :code:`False`:\r\n\r\n    - :code:`False`\r\n    - :code:`\"false\"` / :code:`\"f\"`\r\n    - :code:`\"no\"` / :code:`\"n\"`\r\n    - :code:`\"off\"`\r\n    - :code:`\"0\"`\r\n    - :code:`0`\r\n\r\n    Raise :exc:`ValueError` for any other value.\r\n    \"\"\"\r\n    if isinstance(val, str):\r\n        val = val.lower()\r\n    truthy = {True, \"true\", \"t\", \"yes\", \"y\", \"on\", \"1\", 1}\r\n    falsy = {False, \"false\", \"f\", \"no\", \"n\", \"off\", \"0\", 0}\r\n    try:\r\n        if val in truthy:\r\n            return True\r\n        if val in falsy:\r\n            return False\r\n    except TypeError:\r\n        # Raised when \"val\" is not hashable (e.g., lists)\r\n        pass\r\n    raise ValueError(f\"Cannot convert value to bool: {val}\")\r\n```\r\nto `converters.py`.  It could then also be used as field converter. \r\n\r\nThis function is already part of typed-settings and I intended to eventually move it to attrs.\r\n\r\n@hynek, what do you think?\nSGTM but remember to put the annotations into the stub file. :)",
        "created_at": "2021-07-07T19:40:01Z",
        "version": "21.2"
    }
}