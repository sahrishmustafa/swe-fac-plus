diff --git a/src/attr/_make.py b/src/attr/_make.py
--- a/src/attr/_make.py
+++ b/src/attr/_make.py
@@ -270,7 +270,7 @@ def _transform_attrs(cls, these, auto_attribs):
     # of attributes we've seen in `take_attr_names` and ignore their
     # redefinitions deeper in the hierarchy.
     super_attrs = []
-    taken_attr_names = set(a.name for a in non_super_attrs)
+    taken_attr_names = {a.name: a for a in non_super_attrs}
     for super_cls in cls.__mro__[1:-1]:
         sub_attrs = getattr(super_cls, "__attrs_attrs__", None)
         if sub_attrs is not None:
@@ -278,9 +278,16 @@ def _transform_attrs(cls, these, auto_attribs):
             # list in the end and get all attributes in the order they have
             # been defined.
             for a in reversed(sub_attrs):
-                if a.name not in taken_attr_names:
+                prev_a = taken_attr_names.get(a.name)
+                if prev_a is None:
+                    super_attrs.append(a)
+                    taken_attr_names[a.name] = a
+                elif prev_a == a:
+                    # This happens thru multiple inheritance.  We don't want
+                    # to favor attributes that are further down in the tree
+                    # so we move them to the back.
+                    super_attrs.remove(a)
                     super_attrs.append(a)
-                    taken_attr_names.add(a.name)
 
     # Now reverse the list, such that the attributes are sorted by *descending*
     # age.  IOW: the oldest attribute definition is at the head of the list.
