{
    "task_id": "python-attrs__attrs-1172",
    "setup_info": {
        "repo_path": "testbed/python-attrs__attrs-1172_2025-07-03_17-42-35",
        "repo_cache_path": "testbed/python-attrs/attrs_cache"
    },
    "task_info": {
        "repo": "python-attrs/attrs",
        "pull_number": 1172,
        "instance_id": "python-attrs__attrs-1172",
        "issue_numbers": [
            "1133"
        ],
        "base_commit": "8f4e7e921bbe68e938989385a563a9af28b71f38",
        "patch": "diff --git a/src/attr/__init__.py b/src/attr/__init__.py\n--- a/src/attr/__init__.py\n+++ b/src/attr/__init__.py\n@@ -9,6 +9,7 @@\n \n from . import converters, exceptions, filters, setters, validators\n from ._cmp import cmp_using\n+from ._compat import Protocol\n from ._config import get_run_validators, set_run_validators\n from ._funcs import asdict, assoc, astuple, evolve, has, resolve_types\n from ._make import (\n@@ -31,7 +32,7 @@\n dataclass = partial(attrs, auto_attribs=True)  # happy Easter ;)\n \n \n-class AttrsInstance:\n+class AttrsInstance(Protocol):\n     pass\n \n \ndiff --git a/src/attr/_compat.py b/src/attr/_compat.py\n--- a/src/attr/_compat.py\n+++ b/src/attr/_compat.py\n@@ -18,6 +18,15 @@\n PY_3_12_PLUS = sys.version_info[:2] >= (3, 12)\n \n \n+if sys.version_info < (3, 8):\n+    try:\n+        from typing_extensions import Protocol\n+    except ImportError:  # pragma: no cover\n+        Protocol = object\n+else:\n+    from typing import Protocol  # noqa: F401\n+\n+\n def just_warn(*args, **kw):\n     warnings.warn(\n         \"Running interpreter doesn't sufficiently support code object \"\n",
        "test_patch": "diff --git a/tests/test_compat.py b/tests/test_compat.py\n--- a/tests/test_compat.py\n+++ b/tests/test_compat.py\n@@ -4,6 +4,8 @@\n \n import pytest\n \n+import attr\n+\n \n @pytest.fixture(name=\"mp\")\n def _mp():\n@@ -50,3 +52,13 @@ def test_immutable(self, mp):\n \n         with pytest.raises(AttributeError, match=\"no attribute 'setdefault'\"):\n             mp.setdefault(\"x\")\n+\n+\n+def test_attrsinstance_subclass_protocol():\n+    \"\"\"\n+    It's possible to subclass AttrsInstance and Protocol at once.\n+    \"\"\"\n+\n+    class Foo(attr.AttrsInstance, attr._compat.Protocol):\n+        def attribute(self) -> int:\n+            ...\n",
        "problem_statement": "AttrsInstance is only a Protocol in mypy\n`__init__.pyi` defines AttrsInstance as follows:\r\n```\r\nclass AttrsInstance(AttrsInstance_, Protocol):\r\n    pass\r\n```\r\n\r\nSo the following typechecks correctly:\r\n```\r\nimport attr\r\nfrom typing import Protocol\r\n\r\nclass Foo(attr.AttrsInstance, Protocol):\r\n    def attribute(self) -> int:\r\n        ...\r\n\r\n\r\ndef bar(foo: Foo) -> int:\r\n    return foo.attribute()\r\n\r\n@attr.define\r\nclass CFoo:\r\n    a: int\r\n\r\n    def attribute(self) -> int:\r\n        return self.a\r\n\r\nbar(CFoo(15))\r\n```\r\n\r\nBut if you run it you get:\r\n\r\n`TypeError: Protocols can only inherit from other protocols, got <class 'attr.AttrsInstance'>`\r\n\r\nBecause in `__init__.py` it's defined as:\r\n```\r\nclass AttrsInstance:\r\n    pass\r\n```\r\n\r\ninstead of \r\n```\r\nclass AttrsInstance(Protocol):\r\n    pass\r\n```\n",
        "hints_text": "Ah. Looks like a workaround is to do:\r\n\r\n```\r\nclass Foo(Protocol):\r\n    __attrs_attrs__: ClassVar[Any]\r\n   def attribute(self) -> int:\r\n        ...\r\n```\nIs this anything we can fix in attrs?\nI think just the small change I said, I can make a PR. But probably not until next week.\r\n\r\nIt should just be:\r\n```\r\nfrom typing import Protocol\r\n\r\nclass AttrsInstance(Protocol):\r\n    pass\r\n```\r\n",
        "created_at": "2023-08-04T15:22:28Z",
        "version": "23.1"
    }
}