{
    "task_id": "python-attrs__attrs-396",
    "setup_info": {
        "repo_path": "testbed/python-attrs__attrs-396_2025-07-03_17-42-35",
        "repo_cache_path": "testbed/python-attrs/attrs_cache"
    },
    "task_info": {
        "repo": "python-attrs/attrs",
        "pull_number": 396,
        "instance_id": "python-attrs__attrs-396",
        "issue_numbers": [
            "364"
        ],
        "base_commit": "908cb018f21beb4c139160c3d8a85db330e87cee",
        "patch": "diff --git a/conftest.py b/conftest.py\n--- a/conftest.py\n+++ b/conftest.py\n@@ -4,6 +4,16 @@\n \n import pytest\n \n+from hypothesis import HealthCheck, settings\n+\n+\n+def pytest_configure(config):\n+    # HealthCheck.too_slow causes more trouble than good -- especially in CIs.\n+    settings.register_profile(\n+        \"patience\", settings(suppress_health_check=[HealthCheck.too_slow])\n+    )\n+    settings.load_profile(\"patience\")\n+\n \n @pytest.fixture(scope=\"session\")\n def C():\n",
        "test_patch": "diff --git a/tests/test_funcs.py b/tests/test_funcs.py\n--- a/tests/test_funcs.py\n+++ b/tests/test_funcs.py\n@@ -8,7 +8,7 @@\n \n import pytest\n \n-from hypothesis import HealthCheck, assume, given, settings\n+from hypothesis import assume, given\n from hypothesis import strategies as st\n \n import attr\n@@ -67,7 +67,6 @@ def test_nested_dicts(self, C):\n         assert {\"x\": {1: {2: {\"x\": 1, \"y\": 2}}}, \"y\": None} == asdict(outer)\n \n     @given(nested_classes, st.sampled_from(MAPPING_TYPES))\n-    @settings(suppress_health_check=[HealthCheck.too_slow])\n     def test_recurse_property(self, cls, dict_class):\n         \"\"\"\n         Property tests for recursive asdict.\n@@ -196,7 +195,6 @@ def test_recurse(self, C, tuple_factory):\n         ) == astuple(C(C(1, 2), C(3, 4)), tuple_factory=tuple_factory)\n \n     @given(nested_classes, st.sampled_from(SEQUENCE_TYPES))\n-    @settings(suppress_health_check=[HealthCheck.too_slow])\n     def test_recurse_property(self, cls, tuple_class):\n         \"\"\"\n         Property tests for recursive astuple.\n@@ -215,7 +213,6 @@ def assert_proper_tuple_class(obj, obj_tuple):\n         assert_proper_tuple_class(obj, obj_tuple)\n \n     @given(nested_classes, st.sampled_from(SEQUENCE_TYPES))\n-    @settings(suppress_health_check=[HealthCheck.too_slow])\n     def test_recurse_retain(self, cls, tuple_class):\n         \"\"\"\n         Property tests for asserting collection types are retained.\n",
        "problem_statement": "Suppress HealthCheck.too_slow for test_not_none_metadata\nOn very slow hardware, these may time out.\r\n\r\nBug: https://bugs.gentoo.org/651794\n",
        "hints_text": "# [Codecov](https://codecov.io/gh/python-attrs/attrs/pull/364?src=pr&el=h1) Report\n> Merging [#364](https://codecov.io/gh/python-attrs/attrs/pull/364?src=pr&el=desc) into [master](https://codecov.io/gh/python-attrs/attrs/commit/8274c9fdbc1513c87272340f92cd51dfea27c2ab?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/python-attrs/attrs/pull/364/graphs/tree.svg?token=BxTJx0Ibv7&src=pr&height=150&width=650)](https://codecov.io/gh/python-attrs/attrs/pull/364?src=pr&el=tree)\n\n```diff\n@@          Coverage Diff          @@\n##           master   #364   +/-   ##\n=====================================\n  Coverage     100%   100%           \n=====================================\n  Files           9      9           \n  Lines         831    831           \n  Branches      174    174           \n=====================================\n  Hits          831    831\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/python-attrs/attrs/pull/364?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/python-attrs/attrs/pull/364?src=pr&el=footer). Last update [8274c9f...720dd35](https://codecov.io/gh/python-attrs/attrs/pull/364?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n\nIt might be better to have a global thing like:\r\n\r\n```python\r\nsettings.register_profile(\r\n    \"patience\", settings(suppress_health_check=[HealthCheck.too_slow])\r\n)\r\nsettings.load_profile(\"patience\")\r\n```\r\n\r\nAnd make the `load_profile` call conditional on an environment variable, rather than trying to suppress this for specific tests.  (All tests will time out on slow enough hardware.)\nYeah I think I agree with @wsanchez here. Trying to suppress only certain tests is a game of whac-a-mole. It should be all or none.\nThen push the relevant changes please?\n@hynek: Should we suppress these all the time or try to limit that to CI environments (eg. \"CI\" env var is set)?  I kinda lean towards the former; wall-clock timeouts like these aren't my favorite.\r\n\nHm ISTM that it\u2019s kind of a feature in local dev that some tests are not optimal.\r\n\r\nSo I\u2019d tend to an env var.  But would like  input from @Tinche and @DRMacIver on it.",
        "created_at": "2018-06-17T06:11:05Z",
        "version": "18.1"
    }
}