{
    "task_id": "python-attrs__attrs-712",
    "setup_info": {
        "repo_path": "testbed/python-attrs__attrs-712_2025-07-03_17-42-35",
        "repo_cache_path": "testbed/python-attrs/attrs_cache"
    },
    "task_info": {
        "repo": "python-attrs/attrs",
        "pull_number": 712,
        "instance_id": "python-attrs__attrs-712",
        "issue_numbers": [
            "703"
        ],
        "base_commit": "6b4a1f1ce65162afe54e7101b263859bf8b2177e",
        "patch": "diff --git a/src/attr/_compat.py b/src/attr/_compat.py\n--- a/src/attr/_compat.py\n+++ b/src/attr/_compat.py\n@@ -91,7 +91,7 @@ def metadata_proxy(d):\n         res.data.update(d)  # We blocked update, so we have to do it like this.\n         return res\n \n-    def just_warn(*args, **kw):  # pragma: nocover\n+    def just_warn(*args, **kw):  # pragma: no cover\n         \"\"\"\n         We only warn on Python 3 because we are not aware of any concrete\n         consequences of not setting the cell on Python 2.\n@@ -132,7 +132,7 @@ def make_set_closure_cell():\n     \"\"\"\n     # pypy makes this easy. (It also supports the logic below, but\n     # why not do the easy/fast thing?)\n-    if PYPY:  # pragma: no cover\n+    if PYPY:\n \n         def set_closure_cell(cell, value):\n             cell.__setstate__((value,))\ndiff --git a/src/attr/_make.py b/src/attr/_make.py\n--- a/src/attr/_make.py\n+++ b/src/attr/_make.py\n@@ -12,6 +12,7 @@\n from . import _config, setters\n from ._compat import (\n     PY2,\n+    PYPY,\n     isclass,\n     iteritems,\n     metadata_proxy,\n@@ -527,11 +528,29 @@ def _transform_attrs(\n     return _Attributes((attrs, base_attrs, base_attr_map))\n \n \n-def _frozen_setattrs(self, name, value):\n-    \"\"\"\n-    Attached to frozen classes as __setattr__.\n-    \"\"\"\n-    raise FrozenInstanceError()\n+if PYPY:\n+\n+    def _frozen_setattrs(self, name, value):\n+        \"\"\"\n+        Attached to frozen classes as __setattr__.\n+        \"\"\"\n+        if isinstance(self, BaseException) and name in (\n+            \"__cause__\",\n+            \"__context__\",\n+        ):\n+            BaseException.__setattr__(self, name, value)\n+            return\n+\n+        raise FrozenInstanceError()\n+\n+\n+else:\n+\n+    def _frozen_setattrs(self, name, value):\n+        \"\"\"\n+        Attached to frozen classes as __setattr__.\n+        \"\"\"\n+        raise FrozenInstanceError()\n \n \n def _frozen_delattrs(self, name):\n",
        "test_patch": "diff --git a/tests/test_next_gen.py b/tests/test_next_gen.py\n--- a/tests/test_next_gen.py\n+++ b/tests/test_next_gen.py\n@@ -4,6 +4,8 @@\n \n import re\n \n+from functools import partial\n+\n import pytest\n \n import attr\n@@ -238,3 +240,32 @@ class B:\n             @attr.define(on_setattr=attr.setters.validate)\n             class C(A):\n                 pass\n+\n+    @pytest.mark.parametrize(\n+        \"decorator\",\n+        [\n+            partial(attr.s, frozen=True, slots=True, auto_exc=True),\n+            attr.frozen,\n+            attr.define,\n+            attr.mutable,\n+        ],\n+    )\n+    def test_discard_context(self, decorator):\n+        \"\"\"\n+        raise from None works.\n+\n+        Regression test for #703.\n+        \"\"\"\n+\n+        @decorator\n+        class MyException(Exception):\n+            x: str = attr.ib()\n+\n+        with pytest.raises(MyException) as ei:\n+            try:\n+                raise ValueError()\n+            except ValueError:\n+                raise MyException(\"foo\") from None\n+\n+        assert \"foo\" == ei.value.x\n+        assert ei.value.__cause__ is None\n",
        "problem_statement": "Frozen Exceptions cannot be thrown from Exception Handler in PyPy \nConsider the following code, which generates some random exception, which is then rethrown as a custom attrs exception class (in this case suppressing the context using [PEP 409](https://www.python.org/dev/peps/pep-0409/)'s `from None`):\r\n```python\r\nimport attr\r\n\r\n@attr.s(frozen=True, slots=True, auto_exc=True)\r\nclass MyException(BaseException):\r\n    msg:str = attr.ib()\r\n\r\ntry:\r\n    next(iter([]))\r\nexcept StopIteration:\r\n    raise MyException(\"test\") from None\r\n```\r\nIn CPython, this works as expected:\r\n```\r\nTraceback (most recent call last):\r\n  File \"scratch.py\", line 10, in <module>\r\n    raise MyException(\"test\") from None\r\n__main__.MyException: test\r\n```\r\nOn PyPy, this yields a very weird, different exception:\r\n```\r\nTraceback (most recent call last):\r\n  File \"scratch.py\", line 8, in <module>\r\n    next(iter([]))\r\nStopIteration\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"scratch.py\", line 10, in <module>\r\n    raise MyException(\"test\") from None\r\n  File \".venv-pypy3/site-packages/attr/_make.py\", line 528, in _frozen_setattrs\r\n    raise FrozenInstanceError()\r\nattr.exceptions.FrozenInstanceError\r\n```\r\nI assume this is related to how `__context__` and `__cause__` are set when (re-)raising exceptions (see also the linked PEP for some info on that). The PEP says \"To support raise Exception from None, `__context__` will stay as it is, but `__cause__` will start out as Ellipsis and will change to None when the raise Exception from None method is used.\", so it's weird that only PyPy seems to be wrong here (which is also the reason I'm reporting this against attrs and not PyPy). Maybe CPython doesn't completely adhere to that and doesn't change the value in this case - or changes it bypassing the high-level `__setattr__` API. Note that leaving the `from None` out doesn't change the weird behaviour. Maybe the `__setattr__` frozen check should be skipped for `__context__` and `__cause__` of exceptions?\r\n\r\nThe versions of the interpreters I'm using are:\r\n```\r\n$ pypy3 -V\r\nPython 3.6.9 (78d4c48fa091, Apr 30 2020, 07:55:31)\r\n[PyPy 7.3.1 with GCC 10.0.1 20200328 (Red Hat 10.0.1-0.11)]\r\n$ python3.9 -VV\r\nPython 3.9.0 (default, Oct  6 2020, 00:00:00) \r\n[GCC 10.2.1 20200723 (Red Hat 10.2.1-1)]\r\n```\n",
        "hints_text": "",
        "created_at": "2020-11-04T09:05:46Z",
        "version": "20.2"
    }
}