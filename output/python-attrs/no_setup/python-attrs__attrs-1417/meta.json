{
    "task_id": "python-attrs__attrs-1417",
    "setup_info": {
        "repo_path": "testbed/python-attrs__attrs-1417_2025-07-03_17-42-35",
        "repo_cache_path": "testbed/python-attrs/attrs_cache"
    },
    "task_info": {
        "repo": "python-attrs/attrs",
        "pull_number": 1417,
        "instance_id": "python-attrs__attrs-1417",
        "issue_numbers": [
            "1416"
        ],
        "base_commit": "19943b775d40c018e844f2cb1728442f58112a3b",
        "patch": "diff --git a/src/attr/_make.py b/src/attr/_make.py\n--- a/src/attr/_make.py\n+++ b/src/attr/_make.py\n@@ -448,7 +448,7 @@ def _transform_attrs(\n     attrs = base_attrs + own_attrs\n \n     if field_transformer is not None:\n-        attrs = field_transformer(cls, attrs)\n+        attrs = tuple(field_transformer(cls, attrs))\n \n     # Check attr order after executing the field_transformer.\n     # Mandatory vs non-mandatory attr order only matters when they are part of\n",
        "test_patch": "diff --git a/tests/test_hooks.py b/tests/test_hooks.py\n--- a/tests/test_hooks.py\n+++ b/tests/test_hooks.py\n@@ -217,6 +217,22 @@ class C:\n         assert \"CAttributes\" == fields_type.__name__\n         assert issubclass(fields_type, tuple)\n \n+    def test_hook_generator(self):\n+        \"\"\"\n+        Ensure that `attrs.fields` are correctly recorded when field_transformer is a generator\n+\n+        Regression test for #1417\n+        \"\"\"\n+\n+        def hook(cls, attribs):\n+            yield from attribs\n+\n+        @attr.s(auto_attribs=True, field_transformer=hook)\n+        class Base:\n+            x: int\n+\n+        assert [\"x\"] == [a.name for a in attr.fields(Base)]\n+\n \n class TestAsDictHook:\n     def test_asdict(self):\n",
        "problem_statement": "Creating a Subclassed instance now errors with `got an unexpected keyword argument`\nWe just noticed this in Airflow CI on upgrading to 25.2.0.\n\nThe error is\n\n```\nERROR    airflow.models.dagbag.DagBag:dagbag.py:394 Failed to import: /opt/airflow/airflow/example_dags/example_dynamic_task_mapping.py\nTraceback (most recent call last):\n  File \"/opt/airflow/airflow/models/dagbag.py\", line 384, in parse\n    loader.exec_module(new_module)\n  File \"<frozen importlib._bootstrap_external>\", line 999, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n  File \"/opt/airflow/airflow/example_dags/example_dynamic_task_mapping.py\", line 27, in <module>\n    with DAG(dag_id=\"example_dynamic_task_mapping\", schedule=None, start_date=datetime(2022, 3, 4)) as dag:\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: DAG.__init__() got an unexpected keyword argument 'dag_id'\n```\n\n(Yes, I know your view on subclassing. I don't disagree either)\n\nMinimal repro case:\n\n```python\nimport attrs\n\ndef _all_after_dag_id_to_kw_only(cls, fields: list[attrs.Attribute]):\n    i = iter(fields)\n    f = next(i)\n    if f.name != \"dag_id\":\n        raise RuntimeError(\"dag_id was not the first field\")\n    yield f\n\n    for f in i:\n        yield f.evolve(kw_only=True)\n\n\n@attrs.define(field_transformer=_all_after_dag_id_to_kw_only)\nclass Base:\n    dag_id: str\n    has_default: str = \"default\"\n\n\n@attrs.define()\nclass Subclass(Base):\n    other: bool\n\n\nx = Subclass(dag_id=\"foo\", other=False)\n\nprint(repr(x))\nprint(attrs.__version__)\n```\n",
        "hints_text": "https://github.com/python-attrs/attrs/pull/1401 might have caused it\nMight do, yes, but the minimal example is not failing, so it's some quirk of what we are doing in Airflow\ncc @jamesmurphy-mc \npls provide a repro and I'll see if I can do anything before leaving for my vacation tomorrow afternoon\nI updated the example to include `help(Subclass.__init__)`;\n\nOn 25.1.0 we see this:\n```\n__init__(self, dag_id: str, other: bool, *, has_default: str = 'default') -> None\n    Method generated by attrs for class Subclass.\n```\n\nOn 25.2.0 we see this:\n```\n__init__(self, other: bool) -> None\n    Method generated by attrs for class Subclass.\n```\n@hynek No rush at all!, we are happy to pin to !latest for now\nI have got a simple reproducer. Let me try that.\ncc @sscherfke for good measure\n@tirkarthi I've got a reproducer now. Top post has been updated.\n@ashb Thanks, I got the same one but didn't to subclass.\n\n```python\nimport attrs\n\ndef _all_after_dag_id_to_kw_only(cls, fields: list[attrs.Attribute]):\n    i = iter(fields)\n    f = next(i)\n    if f.name != \"dag_id\":\n        raise RuntimeError(\"dag_id was not the first field\")\n    yield f\n\n    for f in i:\n        yield f.evolve(kw_only=True)\n\n\n@attrs.define(repr=False, field_transformer=_all_after_dag_id_to_kw_only, slots=False)\nclass DAG:\n    dag_id: str = attrs.field(kw_only=False, validator=attrs.validators.instance_of(str))\n\n\ndag = DAG(dag_id=\"test\")\nprint(dag)\n```\n\n```\n(.venv) \u279c  airflow git:(main) \u2717 python /tmp/attrs_repro.py\n<__main__.DAG object at 0x7f69c5305bd0>\n(.venv) \u279c  airflow git:(main) \u2717 pip install attrs==25.2.0\nCollecting attrs==25.2.0\n  Downloading attrs-25.2.0-py3-none-any.whl.metadata (11 kB)\nDownloading attrs-25.2.0-py3-none-any.whl (64 kB)\n   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 64.0/64.0 kB 1.5 MB/s eta 0:00:00\nInstalling collected packages: attrs\n  Attempting uninstall: attrs\n    Found existing installation: attrs 25.1.0\n    Uninstalling attrs-25.1.0:\n      Successfully uninstalled attrs-25.1.0\nERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\nydb 3.18.15 requires protobuf<5.0.0,>=3.13.0, but you have protobuf 5.29.3 which is incompatible.\nSuccessfully installed attrs-25.2.0\n\n[notice] A new release of pip is available: 24.0 -> 25.0.1\n[notice] To update, run: pip install --upgrade pip\n(.venv) \u279c  airflow git:(main) \u2717 python /tmp/attrs_repro.py \nTraceback (most recent call last):\n  File \"/tmp/attrs_repro.py\", line 19, in <module>\n    dag = DAG(dag_id=\"test\")\n          ^^^^^^^^^^^^^^^^^^\nTypeError: DAG.__init__() got an unexpected keyword argument 'dag_id'\n```\nWalking up the stack to where the field transformer is called, I notice that base_attrs is an empty list, even though collect_mro is true. \nDebugging continues!\n`print(inspect.signature(DAG))`\n\nOn 24.2.0 : `(dag_id: str) -> None`\nOn 25.2.0 : `() -> None`\n\n\nOh, this might be part of the problem, Base.__attrs_attrs__ is empty when a field transformer is used:\n\n```python\n\nimport attrs\n\nprint(f\"{attrs.__version__=}\")\ndef _all_after_dag_id_to_kw_only(cls, fields: list[attrs.Attribute]):\n    i = iter(fields)\n    f = next(i)\n    if f.name != \"dag_id\":\n        raise RuntimeError(\"dag_id was not the first field\")\n    yield f\n\n    for f in i:\n        yield f.evolve(kw_only=True)\n\n\n@attrs.define(field_transformer=_all_after_dag_id_to_kw_only)\nclass Base:\n    dag_id: str\n    has_default: str = \"default\"\n\nprint(attrs.fields(Base))\n```\n\nPrints:\n\n```\nattrs.__version__='25.2.0'\n()\n```\nAhhh, got it.\n\nThe issue is that the field transformer is defined as a generator, so it's exhausted once looking for the `a.init` and `a.kw_only` args, then it's empty in the uses elsewhere in `_transform_attr` \n> Ahhh, got it.\n\n\ud83c\udf89\n\n> The issue is that the field transformer is defined as a generator, so it's exhausted once looking for the `a.init` and `a.kw_only` args, then it's empty in the uses elsewhere in `_transform_attr`\n\nWithout being able to look at the code: sounds like we should be able to convert it to a tuple on first use? Quick PRs with tests welcome. ;)\nYup, that was exactly my plan, `inspect.isgenerator()` + tuple.",
        "created_at": "2025-03-12T16:48:42Z",
        "version": "25.2"
    }
}