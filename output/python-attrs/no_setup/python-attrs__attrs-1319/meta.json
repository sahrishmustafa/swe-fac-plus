{
    "task_id": "python-attrs__attrs-1319",
    "setup_info": {
        "repo_path": "testbed/python-attrs__attrs-1319_2025-07-03_17-42-35",
        "repo_cache_path": "testbed/python-attrs/attrs_cache"
    },
    "task_info": {
        "repo": "python-attrs/attrs",
        "pull_number": 1319,
        "instance_id": "python-attrs__attrs-1319",
        "issue_numbers": [
            "1284"
        ],
        "base_commit": "689a0e64012d1e576ebd99e786a254bc537582c6",
        "patch": "diff --git a/src/attr/_make.py b/src/attr/_make.py\n--- a/src/attr/_make.py\n+++ b/src/attr/_make.py\n@@ -2207,15 +2207,17 @@ def _attrs_to_init_script(\n         # leading comma & kw_only args\n         args += f\"{', ' if args else ''}*, {', '.join(kw_only_args)}\"\n         pre_init_kw_only_args = \", \".join(\n-            [f\"{kw_arg}={kw_arg}\" for kw_arg in kw_only_args]\n+            [\n+                f\"{kw_arg_name}={kw_arg_name}\"\n+                # We need to remove the defaults from the kw_only_args.\n+                for kw_arg_name in (kwa.split(\"=\")[0] for kwa in kw_only_args)\n+            ]\n         )\n-        pre_init_args += (\n-            \", \" if pre_init_args else \"\"\n-        )  # handle only kwargs and no regular args\n+        pre_init_args += \", \" if pre_init_args else \"\"\n         pre_init_args += pre_init_kw_only_args\n \n     if call_pre_init and pre_init_has_args:\n-        # If pre init method has arguments, pass same arguments as `__init__`\n+        # If pre init method has arguments, pass same arguments as `__init__`.\n         lines[0] = f\"self.__attrs_pre_init__({pre_init_args})\"\n \n     # Python 3.7 doesn't allow backslashes in f strings.\n",
        "test_patch": "diff --git a/tests/test_make.py b/tests/test_make.py\n--- a/tests/test_make.py\n+++ b/tests/test_make.py\n@@ -694,6 +694,25 @@ def __attrs_pre_init__(self2, y):\n \n         assert 12 == getattr(c, \"z\", None)\n \n+    @pytest.mark.usefixtures(\"with_and_without_validation\")\n+    def test_pre_init_kw_only_work_with_defaults(self):\n+        \"\"\"\n+        Default values together with kw_only don't break __attrs__pre_init__.\n+        \"\"\"\n+        val = None\n+\n+        @attr.define\n+        class KWOnlyAndDefault:\n+            kw_and_default: int = attr.field(kw_only=True, default=3)\n+\n+            def __attrs_pre_init__(self, *, kw_and_default):\n+                nonlocal val\n+                val = kw_and_default\n+\n+        inst = KWOnlyAndDefault()\n+\n+        assert 3 == val == inst.kw_and_default\n+\n     @pytest.mark.usefixtures(\"with_and_without_validation\")\n     def test_post_init(self):\n         \"\"\"\n",
        "problem_statement": "`kw_only` with `default` breaks `__attrs_pre_init__` call\nThe following code raises SyntaxError\r\n```python\r\nfrom attrs import define, field\r\n\r\n@define\r\nclass A:\r\n    a: int = field(kw_only=True, default=3)\r\n\r\n    def __attrs_pre_init__(self, _):\r\n        pass\r\n```\r\n```python\r\nTraceback (most recent call last):\r\n  File \"/home/user/attrs_pre_init.py\", line 4, in <module>\r\n    @define\r\n     ^^^^^^\r\n  File \"/home/user/.venv/lib/python3.12/site-packages/attr/_next_gen.py\", line 153, in define\r\n    return wrap(maybe_cls)\r\n           ^^^^^^^^^^^^^^^\r\n  File \"/home/user/.venv/lib/python3.12/site-packages/attr/_next_gen.py\", line 144, in wrap\r\n    return do_it(cls, True)\r\n           ^^^^^^^^^^^^^^^^\r\n  File \"/home/user/.venv/lib/python3.12/site-packages/attr/_next_gen.py\", line 90, in do_it\r\n    return attrs(\r\n           ^^^^^^\r\n  File \"/home/user/.venv/lib/python3.12/site-packages/attr/_make.py\", line 1715, in attrs\r\n    return wrap(maybe_cls)\r\n           ^^^^^^^^^^^^^^^\r\n  File \"/home/user/.venv/lib/python3.12/site-packages/attr/_make.py\", line 1694, in wrap\r\n    builder.add_init()\r\n  File \"/home/user/.venv/lib/python3.12/site-packages/attr/_make.py\", line 1090, in add_init\r\n    _make_init(\r\n  File \"/home/user/.venv/lib/python3.12/site-packages/attr/_make.py\", line 2181, in _make_init\r\n    init = _make_method(\r\n           ^^^^^^^^^^^^^\r\n  File \"/home/user/.venv/lib/python3.12/site-packages/attr/_make.py\", line 345, in _make_method\r\n    _compile_and_eval(script, globs, locs, filename)\r\n  File \"/home/user/.venv/lib/python3.12/site-packages/attr/_make.py\", line 317, in _compile_and_eval\r\n    bytecode = compile(script, filename, \"exec\")\r\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"<attrs generated init __main__.A>\", line 2\r\n    self.__attrs_pre_init__(a=attr_dict['a'].default=a=attr_dict['a'].default)\r\n                                                    ^\r\nSyntaxError: invalid syntax\r\n```\r\n\n",
        "hints_text": "",
        "created_at": "2024-08-02T07:12:18Z",
        "version": "23.2"
    }
}