diff --git a/src/attr/_make.py b/src/attr/_make.py
--- a/src/attr/_make.py
+++ b/src/attr/_make.py
@@ -897,7 +897,7 @@ def __init__(self, default, validator, repr, cmp, hash, init, convert,
         self.default = default
         # If validator is a list/tuple, wrap it using helper validator.
         if validator and isinstance(validator, (list, tuple)):
-            self._validator = _AndValidator(tuple(validator))
+            self._validator = and_(*validator)
         else:
             self._validator = validator
         self.repr = repr
@@ -911,37 +911,18 @@ def validator(self, meth):
         """
         Decorator that adds *meth* to the list of validators.
 
-        Returns meth unchanged.
+        Returns *meth* unchanged.
         """
-        if not isinstance(self._validator, _AndValidator):
-            self._validator = _AndValidator(
-                (self._validator,) if self._validator else ()
-            )
-        self._validator.add(meth)
+        if self._validator is None:
+            self._validator = meth
+        else:
+            self._validator = and_(self._validator, meth)
         return meth
 
 
 _CountingAttr = _add_cmp(_add_repr(_CountingAttr))
 
 
-@attributes(slots=True)
-class _AndValidator(object):
-    """
-    Compose many validators to a single one.
-    """
-    _validators = attr()
-
-    def __call__(self, inst, attr, value):
-        for v in self._validators:
-            v(inst, attr, value)
-
-    def add(self, validator):
-        """
-        Add *validator*.  Shouldn't be called after the class is done.
-        """
-        self._validators += (validator,)
-
-
 @attributes(slots=True)
 class Factory(object):
     """
@@ -981,3 +962,40 @@ def make_class(name, attrs, bases=(object,), **attributes_arguments):
         raise TypeError("attrs argument must be a dict or a list.")
 
     return attributes(**attributes_arguments)(type(name, bases, cls_dict))
+
+
+# These are required by whithin this module so we define them here and merely
+# import into .validators.
+
+
+@attributes(slots=True)
+class _AndValidator(object):
+    """
+    Compose many validators to a single one.
+    """
+    _validators = attr()
+
+    def __call__(self, inst, attr, value):
+        for v in self._validators:
+            v(inst, attr, value)
+
+
+def and_(*validators):
+    """
+    A validator that composes multiple validators into one.
+
+    When called on a value, it runs all wrapped validators.
+
+    :param validators: Arbitrary number of validators.
+    :type validators: callables
+
+    .. versionadded:: 17.1.0
+    """
+    vals = []
+    for validator in validators:
+        vals.extend(
+            validator._validators if isinstance(validator, _AndValidator)
+            else [validator]
+        )
+
+    return _AndValidator(tuple(vals))
diff --git a/src/attr/validators.py b/src/attr/validators.py
--- a/src/attr/validators.py
+++ b/src/attr/validators.py
@@ -4,7 +4,15 @@
 
 from __future__ import absolute_import, division, print_function
 
-from ._make import attr, attributes
+from ._make import attr, attributes, and_, _AndValidator
+
+
+__all__ = [
+    "and_",
+    "instance_of",
+    "optional",
+    "provides",
+]
 
 
 @attributes(repr=False, slots=True)
@@ -93,12 +101,13 @@ class _OptionalValidator(object):
     def __call__(self, inst, attr, value):
         if value is None:
             return
-        return self.validator(inst, attr, value)
+
+        self.validator(inst, attr, value)
 
     def __repr__(self):
         return (
-            "<optional validator for {type} or None>"
-            .format(type=repr(self.validator))
+            "<optional validator for {what} or None>"
+            .format(what=repr(self.validator))
         )
 
 
@@ -108,6 +117,13 @@ def optional(validator):
     which can be set to ``None`` in addition to satisfying the requirements of
     the sub-validator.
 
-    :param validator: A validator that is used for non-``None`` values.
+    :param validator: A validator (or a list of validators) that is used for
+        non-``None`` values.
+    :type validator: callable or :class:`list` of callables.
+
+    .. versionadded:: 15.1.0
+    .. versionchanged:: 17.1.0 *validator* can be a list of validators.
     """
+    if isinstance(validator, list):
+        return _OptionalValidator(_AndValidator(validator))
     return _OptionalValidator(validator)
