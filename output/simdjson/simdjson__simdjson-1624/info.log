2025-07-08 06:19:16.520 | INFO     | Model API request cost info: input_tokens=1063, output_tokens=667, cost=0.009328
2025-07-08 06:19:16.598 | DEBUG    | Trying to select search APIs in json. Try 1 of 5.
2025-07-08 06:19:19.270 | INFO     | Model API request cost info: input_tokens=1335, output_tokens=334, cost=0.006678
2025-07-08 06:19:19.271 | DEBUG    | {
    "API_calls": [
        "browse_file_for_environment_info(\"CMakeLists.txt\", \"Identify compiler requirements, required libraries, build steps for tests, and test execution commands.\")",
        "browse_file_for_environment_info(\"README.md\", \"Look for instructions on prerequisites, building the project, and running tests.\")",
        "browse_file_for_environment_info(\"CONTRIBUTING.md\", \"Look for instructions on developer setup, building, and running tests, especially test-specific dependencies or frameworks.\")",
        "browse_file_for_environment_info(\".travis.yml\", \"Identify build environment (OS, compiler versions), dependencies, and test commands.\")",
        "browse_folder(\".github/\", \"2\")"
    ],
    "collected_information": "The plan is to understand the build system by examining `CMakeLists.txt` for build requirements, test definitions, and execution commands. It will also check `README.md` and `CONTRIBUTING.md` for setup, build, and test instructions. Additionally, CI/CD configuration files (like `.travis.yml`) will be inspected for environment details and commands. The .github/ folder will be browsed to locate specific CI workflow files. After these steps, the collected information will be analyzed to determine the base image, necessary packages, compilation steps, and specific commands to run `tests/ondemand/ondemand_json_pointer_tests.cpp`.",
    "terminate": false
}
2025-07-08 06:19:19.271 | DEBUG    | Extracted a valid json
2025-07-08 06:19:19.281 | INFO     | entering browse
2025-07-08 06:19:19.281 | INFO     | cmake_minimum_required(VERSION 3.14)

project(
    simdjson
    # The version number is modified by tools/release.py
    VERSION 0.9.1
    DESCRIPTION "Parsing gigabytes of JSON per second"
    HOMEPAGE_URL "https://simdjson.org/"
    LANGUAGES CXX C
)

set(SIMDJSON_GITHUB_REPOSITORY "https://github.com/simdjson/simdjson")

string(
    COMPARE EQUAL
    "${CMAKE_SOURCE_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}"
    is_top_project
)

# ---- Options, variables ----

# These version numbers are modified by tools/release.py
set(SIMDJSON_LIB_VERSION "8.0.0" CACHE STRING "simdjson library version")
set(SIMDJSON_LIB_SOVERSION "8" CACHE STRING "simdjson library soversion")

option(SIMDJSON_ENABLE_THREADS "Link with thread support" ON)

include(cmake/simdjson-props.cmake)
include(cmake/implementation-flags.cmake)
include(cmake/exception-flags.cmake)

option(SIMDJSON_DISABLE_DEPRECATED_API "Disables deprecated APIs" OFF)
if(SIMDJSON_DISABLE_DEPRECATED_API)
  simdjson_add_props(
      target_compile_definitions PUBLIC
      SIMDJSON_DISABLE_DEPRECATED_API=1
  )
endif()

option(SIMDJSON_DEVELOPMENT_CHECKS "Enable development-time aids, such as \
checks for incorrect API usage. Enabled by default in DEBUG." OFF)
if(SIMDJSON_DEVELOPMENT_CHECKS)
  simdjson_add_props(
      target_compile_definitions PUBLIC
      SIMDJSON_DEVELOPMENT_CHECKS
  )
endif()

if(is_top_project)
  option(SIMDJSON_DEVELOPER_MODE "Enable targets for developing simdjson" OFF)
  option(BUILD_SHARED_LIBS "Build simdjson as a shared library" OFF)

  if("$ENV{CI}")
    set(SIMDJSON_DEVELOPER_MODE ON CACHE INTERNAL "")
  endif()
endif()

include(cmake/handle-deprecations.cmake)

if(SIMDJSON_DEVELOPER_MODE)
  include(cmake/developer-options.cmake)
else()
  message(STATUS "Building only the library. Advanced users may want to turn SIMDJSON_DEVELOPER_MODE to ON, e.g., via -D SIMDJSON_DEVELOPER_MODE=ON.")
endif()

# ---- simdjson library ----

add_library(simdjson src/simdjson.cpp)
add_library(simdjson::simdjson ALIAS simdjson)

set_target_properties(
    simdjson PROPERTIES
    VERSION "${SIMDJSON_LIB_VERSION}"
    SOVERSION "${SIMDJSON_LIB_SOVERSION}"
    # FIXME: symbols should be hidden by default
    WINDOWS_EXPORT_ALL_SYMBOLS YES
)

# FIXME: Use proper CMake integration for exports
if(MSVC AND BUILD_SHARED_LIBS)
  target_compile_definitions(
      simdjson
      PRIVATE SIMDJSON_BUILDING_WINDOWS_DYNAMIC_LIBRARY=1
      INTERFACE SIMDJSON_USING_WINDOWS_DYNAMIC_LIBRARY=1
  )
endif()

simdjson_add_props(
    target_include_directories
    PUBLIC "$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>"
    PRIVATE "$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/src>"
)

simdjson_add_props(target_compile_features PUBLIC cxx_std_11)

# workaround for GNU GCC poor AVX load/store code generation
if(
    CMAKE_CXX_COMPILER_ID STREQUAL "GNU"
    AND CMAKE_SYSTEM_PROCESSOR MATCHES "^(i.86|x86(_64)?)$"
)
  simdjson_add_props(
      target_compile_options PRIVATE
      -mno-avx256-split-unaligned-load -mno-avx256-split-unaligned-store
  )
endif()

if(SIMDJSON_ENABLE_THREADS)
  find_package(Threads REQUIRED)
  simdjson_add_props(target_link_libraries PUBLIC Threads::Threads)
  simdjson_add_props(target_compile_definitions PUBLIC SIMDJSON_THREADS_ENABLED=1)
endif()

simdjson_apply_props(simdjson)

# ---- Install rules ----

include(CMakePackageConfigHelpers)
include(GNUInstallDirs)

install(
    FILES singleheader/simdjson.h
    DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
    COMPONENT simdjson_Development
)

install(
    TARGETS simdjson
    EXPORT simdjsonTargets
    RUNTIME COMPONENT simdjson_Runtime
    LIBRARY COMPONENT simdjson_Runtime
    NAMELINK_COMPONENT simdjson_Development
    ARCHIVE COMPONENT simdjson_Development
    INCLUDES DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
)

configure_file(cmake/simdjson-config.cmake.in simdjson-config.cmake @ONLY)

write_basic_package_version_file(
    simdjson-config-version.cmake
    COMPATIBILITY SameMinorVersion
)

set(
    SIMDJSON_INSTALL_CMAKEDIR "${CMAKE_INSTALL_LIBDIR}/cmake/simdjson"
    CACHE STRING "CMake package config location relative to the install prefix"
)
mark_as_advanced(SIMDJSON_INSTALL_CMAKEDIR)

install(
    FILES
    "${PROJECT_BINARY_DIR}/simdjson-config.cmake"
    "${PROJECT_BINARY_DIR}/simdjson-config-version.cmake"
    DESTINATION "${SIMDJSON_INSTALL_CMAKEDIR}"
    COMPONENT simdjson_Development
)

install(
    EXPORT simdjsonTargets
    NAMESPACE simdjson::
    DESTINATION "${SIMDJSON_INSTALL_CMAKEDIR}"
    COMPONENT example_Development
)

#
# CPack
#
if(is_top_project)
  set(CPACK_PACKAGE_VENDOR "Daniel Lemire")
  set(CPACK_PACKAGE_CONTACT "lemire@gmail.com")
  set(CPACK_RESOURCE_FILE_LICENSE "${PROJECT_SOURCE_DIR}/LICENSE")
  set(CPACK_RESOURCE_FILE_README "${PROJECT_SOURCE_DIR}/README.md")

  set(CPACK_RPM_PACKAGE_LICENSE "${PROJECT_SOURCE_DIR}/LICENSE")

  set(CPACK_SOURCE_GENERATOR "TGZ;ZIP")

  include(CPack)
endif()

# ---- Developer mode extras ----

if(NOT SIMDJSON_DEVELOPER_MODE)
  return()
elseif(NOT is_top_project)
  message(AUTHOR_WARNING "Developer mode is intended for developers of simdjson")
endif()

simdjson_apply_props(simdjson-internal-flags)

set(
    SIMDJSON_USER_CMAKECACHE
    "${CMAKE_BINARY_DIR}/.simdjson-user-CMakeCache.txt"
)
add_custom_target(
    simdjson-user-cmakecache
    COMMAND "${CMAKE_COMMAND}"
    -D "BINARY_DIR=${CMAKE_BINARY_DIR}"
    -D "USER_CMAKECACHE=${SIMDJSON_USER_CMAKECACHE}"
    -P "${PROJECT_SOURCE_DIR}/cmake/simdjson-user-cmakecache.cmake"
    VERBATIM
)

# Setup tests
enable_testing()
# So we can build just tests with "make all_tests"
add_custom_target(all_tests)

add_subdirectory(windows)
add_subdirectory(dependencies) ## This needs to be before tools because of cxxopts
add_subdirectory(tools)  ## This needs to be before tests because of cxxopts

# Data: jsonexamples is left with only the bare essential.
# most of the data has been moved to https://github.com/simdjson/simdjson-data
add_subdirectory(jsonexamples)


add_subdirectory(singleheader)



#
# Compile tools / tests / benchmarks
#
add_subdirectory(tests)
add_subdirectory(examples)
add_subdirectory(benchmark)
add_subdirectory(fuzz)

#
# Source files should be just ASCII
#
find_program(FIND find)
find_program(FILE file)
find_program(GREP grep)
if(FIND AND FILE AND GREP)
  add_test(
      NAME just_ascii
      COMMAND sh -c "\
${FIND} include src windows tools singleheader tests examples benchmark \
-path benchmark/checkperf-reference -prune -name '*.h' -o -name '*.cpp' \
-type f -exec ${FILE} '{}' \; | ${GREP} -qv ASCII || exit 0  && exit 1"
      WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}"
  )
endif()

##
## In systems like R, libraries must not use stderr or abort to be acceptable.
## Thus we make it a hard rule that one is not allowed to call abort or stderr.
## The sanitized builds are allowed to abort.
##
if(NOT SIMDJSON_SANITIZE)
  find_program(GREP grep)
  find_program(NM nm)
  if((NOT GREP) OR (NOT NM))
    message("grep and nm are unavailable on this system.")
  else()
    add_test(
      NAME "avoid_abort"
      # Under FreeBSD, the __cxa_guard_abort symbol may appear but it is fine.
      # So we want to look for <space><possibly _>abort as a test.
      COMMAND sh -c "${NM}  $<TARGET_FILE_NAME:simdjson> |  ${GREP} ' _*abort' || exit 0  && exit 1"
      WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
    )
    add_test(
      NAME "avoid_cout"
      COMMAND sh -c "${NM}  $<TARGET_FILE_NAME:simdjson> |  ${GREP} ' _*cout' || exit 0  && exit 1"
      WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
    )
    add_test(
      NAME "avoid_cerr"
      COMMAND sh -c "${NM}  $<TARGET_FILE_NAME:simdjson> |  ${GREP} ' _*cerr' || exit 0  && exit 1"
      WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
    )
    add_test(
      NAME "avoid_printf"
      COMMAND sh -c "${NM}  $<TARGET_FILE_NAME:simdjson> |  ${GREP} ' _*printf' || exit 0  && exit 1"
      WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
    )
    add_test(
      NAME "avoid_stdout"
      COMMAND sh -c "${NM}  $<TARGET_FILE_NAME:simdjson> |  ${GREP} stdout || exit 0 && exit 1"
      WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
    )
    add_test(
      NAME "avoid_stderr"
      COMMAND sh -c "${NM}  $<TARGET_FILE_NAME:simdjson> |  ${GREP} stderr || exit 0 && exit 1"
      WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
    )
  endif()
endif()

2025-07-08 06:19:19.282 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-08 06:19:26.846 | INFO     | Model API request cost info: input_tokens=3033, output_tokens=393, cost=0.011513
2025-07-08 06:19:26.848 | SUCCESS  | Successfully extracted environment config
2025-07-08 06:19:26.848 | INFO     | ******
2025-07-08 06:19:26.848 | INFO     | Compiler Requirements:
- C++ compiler (supporting C++11 standard or newer)
- C compiler
- Specific workarounds for GNU GCC are present, indicating support.
- `MSVC` is also explicitly checked, implying support.

Required Libraries:
- Threads (conditionally required based on `SIMDJSON_ENABLE_THREADS` option)
- `cxxopts` (appears to be a dependency handled within the `dependencies` subdirectory, required by tools and tests)

Build Steps for Tests:
1.  **Configure with developer mode enabled**:
    `cmake -S . -B build -D SIMDJSON_DEVELOPER_MODE=ON`
    *Note*: `SIMDJSON_DEVELOPER_MODE` is automatically `ON` if the `$ENV{CI}` environment variable is set.
2.  **Build the project**:
    `cmake --build build`
    Alternatively, a custom target `all_tests` is provided which can be built directly with `make all_tests` (if using Makefile generator).

Test Execution Commands:
- Test framework: CTest
- Test command: `ctest` (executed from the build directory, e.g., `cd build && ctest`)
- The `enable_testing()` command activates CTest.
- Several specific tests are defined using `add_test`, which `ctest` will automatically discover and run:
    - `just_ascii` (checks for non-ASCII characters in source files)
    - `avoid_abort`
    - `avoid_cout`
    - `avoid_cerr`
    - `avoid_printf`
    - `avoid_stdout`
    - `avoid_stderr`
    These "avoid" tests are skipped if `SIMDJSON_SANITIZE` is enabled.
2025-07-08 06:19:26.848 | INFO     | ******
2025-07-08 06:19:26.848 | DEBUG    | Result of dispatch_intent: ('Compiler Requirements:\n- C++ compiler (supporting C++11 standard or newer)\n- C compiler\n- Specific workarounds for GNU GCC are present, indicating support.\n- `MSVC` is also explicitly checked, implying support.\n\nRequired Libraries:\n- Threads (conditionally required based on `SIMDJSON_ENABLE_THREADS` option)\n- `cxxopts` (appears to be a dependency handled within the `dependencies` subdirectory, required by tools and tests)\n\nBuild Steps for Tests:\n1.  **Configure with developer mode enabled**:\n    `cmake -S . -B build -D SIMDJSON_DEVELOPER_MODE=ON`\n    *Note*: `SIMDJSON_DEVELOPER_MODE` is automatically `ON` if the `$ENV{CI}` environment variable is set.\n2.  **Build the project**:\n    `cmake --build build`\n    Alternatively, a custom target `all_tests` is provided which can be built directly with `make all_tests` (if using Makefile generator).\n\nTest Execution Commands:\n- Test framework: CTest\n- Test command: `ctest` (executed from the build directory, e.g., `cd build && ctest`)\n- The `enable_testing()` command activates CTest.\n- Several specific tests are defined using `add_test`, which `ctest` will automatically discover and run:\n    - `just_ascii` (checks for non-ASCII characters in source files)\n    - `avoid_abort`\n    - `avoid_cout`\n    - `avoid_cerr`\n    - `avoid_printf`\n    - `avoid_stdout`\n    - `avoid_stderr`\n    These "avoid" tests are skipped if `SIMDJSON_SANITIZE` is enabled.', 'Get File Info', True)
2025-07-08 06:19:26.848 | INFO     | entering browse
2025-07-08 06:19:26.851 | INFO     | 
![Ubuntu 18.04 CI](https://github.com/simdjson/simdjson/workflows/Ubuntu%2018.04%20CI%20(GCC%207)/badge.svg)
[![Ubuntu 20.04 CI](https://github.com/simdjson/simdjson/workflows/Ubuntu%2020.04%20CI%20(GCC%209)/badge.svg)](https://simdjson.org/plots.html)
![VS16-CI](https://github.com/simdjson/simdjson/workflows/VS16-CI/badge.svg)
![MinGW64-CI](https://github.com/simdjson/simdjson/workflows/MinGW64-CI/badge.svg)
[![][license img]][license]  [![Doxygen Documentation](https://img.shields.io/badge/docs-doxygen-green.svg)](https://simdjson.org/api/0.9.0/index.html)

simdjson : Parsing gigabytes of JSON per second
===============================================

<img src="images/logo.png" width="10%" style="float: right">
JSON is everywhere on the Internet. Servers spend a *lot* of time parsing it. We need a fresh
approach. The simdjson library uses commonly available SIMD instructions and microparallel algorithms
to parse JSON 4x  faster than RapidJSON and 25x faster than JSON for Modern C++.

* **Fast:** Over 4x faster than commonly used production-grade JSON parsers.
* **Record Breaking Features:** Minify JSON  at 6 GB/s, validate UTF-8  at 13 GB/s,  NDJSON at 3.5 GB/s.
* **Easy:** First-class, easy to use and carefully documented APIs.
* **Strict:** Full JSON and UTF-8 validation, lossless parsing. Performance with no compromises.
* **Automatic:** Selects a CPU-tailored parser at runtime. No configuration needed.
* **Reliable:** From memory allocation to error handling, simdjson's design avoids surprises.
* **Peer Reviewed:** Our research appears in venues like VLDB Journal, Software: Practice and Experience.

This library is part of the [Awesome Modern C++](https://awesomecpp.com) list.

Table of Contents
-----------------

* [Quick Start](#quick-start)
* [Documentation](#documentation)
* [Performance results](#performance-results)
* [Real-world usage](#real-world-usage)
* [Bindings and Ports of simdjson](#bindings-and-ports-of-simdjson)
* [About simdjson](#about-simdjson)
* [Funding](#funding)
* [Contributing to simdjson](#contributing-to-simdjson)
* [License](#license)

Quick Start
-----------

The simdjson library is easily consumable with a single .h and .cpp file.

0. Prerequisites: `g++` (version 7 or better) or `clang++` (version 6 or better), and a 64-bit
   system with a command-line shell (e.g., Linux, macOS, freeBSD). We also support programming
   environments like Visual Studio and Xcode, but different steps are needed.
1. Pull [simdjson.h](singleheader/simdjson.h) and [simdjson.cpp](singleheader/simdjson.cpp) into a
   directory, along with the sample file [twitter.json](jsonexamples/twitter.json).

   ```
   wget https://raw.githubusercontent.com/simdjson/simdjson/master/singleheader/simdjson.h https://raw.githubusercontent.com/simdjson/simdjson/master/singleheader/simdjson.cpp https://raw.githubusercontent.com/simdjson/simdjson/master/jsonexamples/twitter.json
   ```
2. Create `quickstart.cpp`:

```c++
#include "simdjson.h"
using namespace simdjson;
int main(void) {
    ondemand::parser parser;
    padded_string json = padded_string::load("twitter.json");
    ondemand::document tweets = parser.iterate(json);
    std::cout << uint64_t(tweets["search_metadata"]["count"]) << " results." << std::endl;
}

   ```
3. `c++ -o quickstart quickstart.cpp simdjson.cpp`
4. `./quickstart`
   ```
   100 results.
   ```

Documentation
-------------

Usage documentation is available:

* [Basics](doc/basics.md) is an overview of how to use simdjson and its APIs.
* [Performance](doc/performance.md) shows some more advanced scenarios and how to tune for them.
* [Implementation Selection](doc/implementation-selection.md) describes runtime CPU detection and
  how you can work with it.
* [API](https://simdjson.org/api/0.9.0/annotated.html) contains the automatically generated API documentation.

Performance results
-------------------

The simdjson library uses three-quarters less instructions than state-of-the-art parser [RapidJSON](https://rapidjson.org). To our knowledge, simdjson is the first fully-validating JSON parser
to run at [gigabytes per second](https://en.wikipedia.org/wiki/Gigabyte) (GB/s) on commodity processors. It can parse millions of JSON documents per second on a single core.

The following figure represents parsing speed in GB/s for parsing various files
on an Intel Skylake processor (3.4 GHz) using the GNU GCC 10 compiler (with the -O3 flag).
We compare against the best and fastest C++ libraries on benchmarks that load and process the data.
The simdjson library offers full unicode ([UTF-8](https://en.wikipedia.org/wiki/UTF-8)) validation and exact
number parsing.

<img src="doc/rome.png" width="60%">

The simdjson library offers high speed whether it processes tiny files (e.g., 300 bytes)
or larger files (e.g., 3MB). The following plot presents parsing
speed for [synthetic files over various sizes generated with a script](https://github.com/simdjson/simdjson_experiments_vldb2019/blob/master/experiments/growing/gen.py) on a 3.4 GHz Skylake processor (GNU GCC 9, -O3).

<img src="doc/growing.png" width="60%">

[All our experiments are reproducible](https://github.com/simdjson/simdjson_experiments_vldb2019).


For NDJSON files, we can exceed 3 GB/s with [our  multithreaded parsing functions](https://github.com/simdjson/simdjson/blob/master/doc/parse_many.md).



Real-world usage
----------------

- [Microsoft FishStore](https://github.com/microsoft/FishStore)
- [Yandex ClickHouse](https://github.com/yandex/ClickHouse)
- [Clang Build Analyzer](https://github.com/aras-p/ClangBuildAnalyzer)
- [Shopify HeapProfiler](https://github.com/Shopify/heap-profiler)

If you are planning to use simdjson in a product, please work from one of our releases.

Bindings and Ports of simdjson
------------------------------

We distinguish between "bindings" (which just wrap the C++ code) and a port to another programming language (which reimplements everything).

- [ZippyJSON](https://github.com/michaeleisel/zippyjson): Swift bindings for the simdjson project.
- [libpy_simdjson](https://github.com/gerrymanoim/libpy_simdjson/): high-speed Python bindings for simdjson using [libpy](https://github.com/quantopian/libpy).
- [pysimdjson](https://github.com/TkTech/pysimdjson): Python bindings for the simdjson project.
- [cysimdjson](https://github.com/TeskaLabs/cysimdjson): high-speed Python bindings for the simdjson project.
- [simdjson-rs](https://github.com/simd-lite): Rust port.
- [simdjson-rust](https://github.com/SunDoge/simdjson-rust): Rust wrapper (bindings).
- [SimdJsonSharp](https://github.com/EgorBo/SimdJsonSharp): C# version for .NET Core (bindings and full port).
- [simdjson_nodejs](https://github.com/luizperes/simdjson_nodejs): Node.js bindings for the simdjson project.
- [simdjson_php](https://github.com/crazyxman/simdjson_php): PHP bindings for the simdjson project.
- [simdjson_ruby](https://github.com/saka1/simdjson_ruby): Ruby bindings for the simdjson project.
- [fast_jsonparser](https://github.com/anilmaurya/fast_jsonparser): Ruby bindings for the simdjson project.
- [simdjson-go](https://github.com/minio/simdjson-go): Go port using Golang assembly.
- [rcppsimdjson](https://github.com/eddelbuettel/rcppsimdjson): R bindings.
- [simdjson_erlang](https://github.com/ChomperT/simdjson_erlang): erlang bindings.
- [lua-simdjson](https://github.com/FourierTransformer/lua-simdjson): lua bindings.


About simdjson
--------------

The simdjson library takes advantage of modern microarchitectures, parallelizing with SIMD vector
instructions, reducing branch misprediction, and reducing data dependency to take advantage of each
CPU's multiple execution cores.

Some people [enjoy reading our paper](https://arxiv.org/abs/1902.08318): A description of the design
and implementation of simdjson is in our research article:
- Geoff Langdale, Daniel Lemire, [Parsing Gigabytes of JSON per Second](https://arxiv.org/abs/1902.08318), VLDB Journal 28 (6), 2019.

We have an in-depth paper focused on the UTF-8 validation:

- John Keiser, Daniel Lemire, [Validating UTF-8 In Less Than One Instruction Per Byte](https://arxiv.org/abs/2010.03090), Software: Practice & Experience 51 (5), 2021.

We also have an informal [blog post providing some background and context](https://branchfree.org/2019/02/25/paper-parsing-gigabytes-of-json-per-second/).

For the video inclined, <br />
[![simdjson at QCon San Francisco 2019](http://img.youtube.com/vi/wlvKAT7SZIQ/0.jpg)](http://www.youtube.com/watch?v=wlvKAT7SZIQ)<br />
(it was the best voted talk, we're kinda proud of it).

Funding
-------

The work is supported by the Natural Sciences and Engineering Research Council of Canada under grant
number RGPIN-2017-03910.

[license]: LICENSE
[license img]: https://img.shields.io/badge/License-Apache%202-blue.svg

Contributing to simdjson
------------------------

Head over to [CONTRIBUTING.md](CONTRIBUTING.md) for information on contributing to simdjson, and
[HACKING.md](HACKING.md) for information on source, building, and architecture/design.

License
-------

This code is made available under the [Apache License 2.0](https://www.apache.org/licenses/LICENSE-2.0.html).

Under Windows, we build some tools using the windows/dirent_portable.h file (which is outside our library code): it under the liberal (business-friendly) MIT license.

For compilers that do not support [C++17](https://en.wikipedia.org/wiki/C%2B%2B17), we bundle the string-view library which is published under the [Boost license](http://www.boost.org/LICENSE_1_0.txt). Like the Apache license, the Boost license is a permissive license allowing commercial redistribution.

For efficient number serialization, we bundle Florian Loitsch's implementation of the Grisu2 algorithm for binary to decimal floating-point numbers. The implementation was slightly modified by JSON for Modern C++ library. Both Florian Loitsch's implementation and JSON for Modern C++ are provided under the MIT license.

For runtime dispatching, we use some code from the PyTorch project licensed under 3-clause BSD.

2025-07-08 06:19:26.852 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-08 06:19:33.815 | INFO     | Model API request cost info: input_tokens=3323, output_tokens=224, cost=0.010548
2025-07-08 06:19:33.816 | SUCCESS  | Successfully extracted environment config
2025-07-08 06:19:33.816 | INFO     | ******
2025-07-08 06:19:33.816 | INFO     | Runtime Requirements:
- g++ (version 7 or better) or clang++ (version 6 or better)
- 64-bit system (e.g., Linux, macOS, freeBSD)
- Visual Studio and Xcode are also supported environments.

Building the project:
In `quickstart` example:
- Download `simdjson.h`, `simdjson.cpp`, and `twitter.json` files.
- Compile with: `c++ -o quickstart quickstart.cpp simdjson.cpp`

Testing:
- The `README.md` provides an example execution: `./quickstart` after building the quickstart example.
- For performance experiments and benchmarks, refer to the external repository: `https://github.com/simdjson/simdjson_experiments_vldb2019`.
- For more detailed instructions on building and testing the project, refer to `CONTRIBUTING.md` and `HACKING.md` files mentioned in the README.
2025-07-08 06:19:33.816 | INFO     | ******
2025-07-08 06:19:33.816 | DEBUG    | Result of dispatch_intent: ('Runtime Requirements:\n- g++ (version 7 or better) or clang++ (version 6 or better)\n- 64-bit system (e.g., Linux, macOS, freeBSD)\n- Visual Studio and Xcode are also supported environments.\n\nBuilding the project:\nIn `quickstart` example:\n- Download `simdjson.h`, `simdjson.cpp`, and `twitter.json` files.\n- Compile with: `c++ -o quickstart quickstart.cpp simdjson.cpp`\n\nTesting:\n- The `README.md` provides an example execution: `./quickstart` after building the quickstart example.\n- For performance experiments and benchmarks, refer to the external repository: `https://github.com/simdjson/simdjson_experiments_vldb2019`.\n- For more detailed instructions on building and testing the project, refer to `CONTRIBUTING.md` and `HACKING.md` files mentioned in the README.', 'Get File Info', True)
2025-07-08 06:19:33.817 | INFO     | entering browse
2025-07-08 06:19:33.817 | INFO     | Contributing
============

The simdjson library is an open project written in C++. Contributions are invited. Contributors
agree to the project's license.

We have an extensive list of issues, and contributions toward any of these issues is invited.
Contributions can take the form of code samples, better documentation or design ideas.

In particular, the following contributions are invited:

- The library is focused on performance. Well-documented performance optimization are invited.
- Fixes to known or newly discovered bugs are always welcome. Typically, a bug fix should come with
  a test demonstrating that the bug has been fixed.
- The simdjson library is advanced software and maintainability and flexibility are always a
  concern. Specific contributions to improve maintainability and flexibility are invited.

We discourage the following types of contributions:

- Code refactoring. We all have our preferences as to how code should be written, but unnecessary
  refactoring can waste time and introduce new bugs. If you believe that refactoring is needed, you
  first must explain how it helps in concrete terms. Does it improve the performance?
- Applications of new language features for their own sake. Using advanced C++ language constructs
  is actually a negative as it may reduce portability (to old compilers, old standard libraries and
  systems) and reduce accessibility (to programmers that have not kept up), so it must be offsetted
  by clear gains like performance or maintainability. When in doubt, avoid advanced C++ features
  (beyond C++11).
- Style formatting. In general, please abstain from reformatting code just to make it look prettier.
  Though code formatting is important, it can also be a waste of time if several contributors try to
  tweak the code base toward their own preference. Please do not introduce unneeded white-space
  changes.

In short, most code changes should either bring new features or better performance. We want to avoid unmotivated code changes.


Specific rules
----------

We have few hard rules, but we have some:

- Printing to standard output or standard error (`stderr`, `stdout`, `std::cerr`, `std::cout`) in the core library is forbidden. This follows from the [Writing R Extensions](https://cran.r-project.org/doc/manuals/R-exts.html) manual which states that "Compiled code should not write to stdout or stderr".
- Calls to `abort()` are forbidden in the core library. This follows from the [Writing R Extensions](https://cran.r-project.org/doc/manuals/R-exts.html) manual which states that "Under no circumstances should your compiled code ever call abort or exit".
- All source code files (.h, .cpp) must be ASCII.
- All C macros introduced in public headers need to be prefixed with either `SIMDJSON_` or `simdjson_`.
- We avoid trailing white space characters within lines. That is, your lines of code should not terminate with unnecessary spaces. Generally, please avoid making unnecessary changes to white-space characters when contributing code.

Tools, tests and benchmarks are not held to these same strict rules.

General Guidelines
----------

Contributors are encouraged to :

- Document their changes. Though we do not enforce a rule regarding code comments, we prefer that non-trivial algorithms and techniques be somewhat documented in the code.
- Follow as much as possible the existing code style. We do not enforce a specific code style, but we prefer consistency.
- Modify as few lines of code as possible when working on an issue. The more lines you modify, the harder it is for your fellow human beings to understand what is going on.
- Tools may report "problems" with the code, but we never delegate programming to tools: if there is a problem with the code, we need to understand it. Thus we will not "fix" code merely to please a static analyzer if we do not understand.
- Provide tests for any new feature. We will not merge a new feature without tests.

Pull Requests
--------------

Pull requests are always invited. However, we ask that you follow these guidelines:

- It is wiser to discuss your ideas first as part of an issue before you start coding. If you omit this step and code first, be prepare to have your code receive scrutiny and be dropped.
- Users should provide a rationale for their changes. Does it improve performance? Does it add a feature? Does it improve maintainability? Does fix a bug? This must be explicitly stated as part of the pull request. Do not propose changes based on taste or intuition. We do not delegate programming to tools: that some tool suggested a code change is not reason enough to change the code.
   1. When your code improves performance, please document the gains with a benchmark using hard numbers.
   2. If your code fixes a bug, please be either fix a failing test, or propose a new test.
   3. Other types of changes must be clearly motivated. We openly discourage changes with no identifiable benefits.
- Changes should be focused and minimal. You should change as few lines of code as possible. Please do not reformat or touch files needlessly.
- New features must be accompanied of new tests, in general.
- Your code should pass our continuous-integration tests. It is your responsibility to ensure that your proposal pass the tests. We do not merge pull requests that would break our build.
   - An exception to this would be changes to non-code files, such as documentation and assets, or trivial changes to code, such as comments, where it is encouraged to explicitly ask for skipping a CI run using the `[skip ci]` prefix in your Pull Request title **and** in the first line of the most recent commit in a push. Example for such a commit: `[skip ci] Fixed typo in power_of_ten's docs`
   This benefits the project in such a way that the CI pipeline is not burdened by running jobs on changes that don't change any behavior in the code, which reduces wait times for other Pull Requests that do change behavior and require testing.

If the benefits of your proposed code remain unclear, we may choose to discard your code: that is not an insult, we frequently discard our own code. We may also consider various alternatives and choose another path. Again, that is not an insult or a sign that you have wasted your time.

Style
-----

Our formatting style is inspired by the LLVM style.
The simdjson library is written using the snake case: when a variable or a function is a phrase,  each space is replaced by an underscore character, and the first letter of each word written in lowercase.  Compile-time constants are written entirely in uppercase with the same underscore convention.

Code of Conduct
---------------

Though we do not have a formal code of conduct, we will not tolerate bullying, bigotry or
intimidation. Everyone is welcome to contribute. If you have concerns, you can raise them privately with the core team members (e.g., D. Lemire, J. Keiser).

We welcome contributions from women and less represented groups. If you need help, please reach out.

Consider the following points when engaging with the project:

- We discourage arguments from authority: ideas are discusssed on their own merits and not based on who stated it.
- Be mindful that what you may view as an aggression is maybe merely a difference of opinion or a misunderstanding.
- Be mindful that a collection of small aggressions, even if mild in isolation, can become harmful.

Getting Started Hacking
-----------------------

An overview of simdjson's directory structure, with pointers to architecture and design
considerations and other helpful notes, can be found at [HACKING.md](HACKING.md).

2025-07-08 06:19:33.817 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-08 06:19:41.285 | INFO     | Model API request cost info: input_tokens=2021, output_tokens=330, cost=0.008353
2025-07-08 06:19:41.286 | SUCCESS  | Successfully extracted environment config
2025-07-08 06:19:41.286 | INFO     | ******
2025-07-08 06:19:41.286 | INFO     | The `CONTRIBUTING.md` file primarily outlines the philosophy, guidelines, and expectations for contributions to the `simdjson` C++ library rather than providing explicit setup or testing commands.

Developer Setup / Building:
- The document mentions `simdjson` is an "open project written in C++".
- For detailed setup instructions, it explicitly points to `HACKING.md`: "An overview of simdjson's directory structure, with pointers to architecture and design considerations and other helpful notes, can be found at [HACKING.md](HACKING.md)."

Testing:
- **General Requirements**:
    - Bug fixes should typically come with a test demonstrating the fix.
    - New features must be accompanied by new tests.
    - Contributions are expected to pass "continuous-integration tests". It is the contributor's responsibility to ensure this.
    - If a code change fixes a bug, contributors should either fix a failing test or propose a new test.
    - When improving performance, gains should be documented with benchmarks and hard numbers.
- **Test-specific dependencies/frameworks**: Not explicitly mentioned, but implied by "continuous-integration tests" and the C++ language. No specific C++ testing framework is named.
- **Test Commands**: No explicit commands are provided in this document.
- **CI Control**: Commits to non-code files or trivial changes can skip CI runs by using `[skip ci]` prefix in the Pull Request title and the first line of the most recent commit.
2025-07-08 06:19:41.286 | INFO     | ******
2025-07-08 06:19:41.286 | DEBUG    | Result of dispatch_intent: ('The `CONTRIBUTING.md` file primarily outlines the philosophy, guidelines, and expectations for contributions to the `simdjson` C++ library rather than providing explicit setup or testing commands.\n\nDeveloper Setup / Building:\n- The document mentions `simdjson` is an "open project written in C++".\n- For detailed setup instructions, it explicitly points to `HACKING.md`: "An overview of simdjson\'s directory structure, with pointers to architecture and design considerations and other helpful notes, can be found at [HACKING.md](HACKING.md)."\n\nTesting:\n- **General Requirements**:\n    - Bug fixes should typically come with a test demonstrating the fix.\n    - New features must be accompanied by new tests.\n    - Contributions are expected to pass "continuous-integration tests". It is the contributor\'s responsibility to ensure this.\n    - If a code change fixes a bug, contributors should either fix a failing test or propose a new test.\n    - When improving performance, gains should be documented with benchmarks and hard numbers.\n- **Test-specific dependencies/frameworks**: Not explicitly mentioned, but implied by "continuous-integration tests" and the C++ language. No specific C++ testing framework is named.\n- **Test Commands**: No explicit commands are provided in this document.\n- **CI Control**: Commits to non-code files or trivial changes can skip CI runs by using `[skip ci]` prefix in the Pull Request title and the first line of the most recent commit.', 'Get File Info', True)
2025-07-08 06:19:41.286 | INFO     | entering browse
2025-07-08 06:19:41.289 | INFO     | language: cpp

dist: bionic

arch:
  - ppc64le

cache:
  directories:
    - $HOME/.dep_cache

env:
  global:
    - simdjson_DEPENDENCY_CACHE_DIR=$HOME/.dep_cache

matrix:
  include:
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
      env:
        - COMPILER="CC=gcc-8 && CXX=g++-8"
      compiler: gcc-8

    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-9
      env:
        - COMPILER="CC=gcc-9 && CXX=g++-9"
      compiler: gcc-9

    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-10
      env:
        - COMPILER="CC=gcc-10 && CXX=g++-10"
      compiler: gcc-10

# The sanitizer runs fail systematically
#    - os: linux
#      addons:
#        apt:
#          sources:
#            - ubuntu-toolchain-r-test
#          packages:
#            - g++-10
#      env:
#        - COMPILER="CC=gcc-10 && CXX=g++-10"
#        - SANITIZE="on"
#      compiler: gcc-10-sanitize

    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-10
      env:
        - COMPILER="CC=gcc-10 && CXX=g++-10"
        - STATIC="on"
      compiler: gcc-10-static

    - os: linux
      addons:
        apt:
          sources:
            - llvm-toolchain-bionic-6.0
          packages:
            - clang-6.0
      env:
        - COMPILER="CC=clang-6.0 && CXX=clang++-6.0"
      compiler: clang-6

    - os: linux
      addons:
        apt:
          sources:
            - llvm-toolchain-bionic-7
          packages:
            - clang-7
      env:
        - COMPILER="CC=clang-7 && CXX=clang++-7"
      compiler: clang-7

    - os: linux
      addons:
        apt:
          sources:
            - llvm-toolchain-bionic-8
          packages:
            - clang-8
      env:
        - COMPILER="CC=clang-8 && CXX=clang++-8"
      compiler: clang-8

    - os: linux
      addons:
        apt:
          sources:
            - llvm-toolchain-bionic-9
          packages:
            - clang-9
      env:
        - COMPILER="CC=clang-9 && CXX=clang++-9"
      compiler: clang-9

    - os: linux
      addons:
        apt:
          packages:
            - clang-10
          sources:
            - ubuntu-toolchain-r-test
            - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
      env:
        - COMPILER="CC=clang-10 && CXX=clang++-10"
      compiler: clang-10

    - os: linux
      addons:
        apt:
          packages:
            - clang-10
          sources:
            - ubuntu-toolchain-r-test
            - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
      env:
        - COMPILER="CC=clang-10 && CXX=clang++-10"
        - STATIC="on"
      compiler: clang-10-static

# The clang sanitizer runs fail frequently at setup time
#    - os: linux
#      addons:
#        apt:
#          packages:
#            - clang-10
#          sources:
#            - ubuntu-toolchain-r-test
#            - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main'
#              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
#      env:
#        - COMPILER="CC=clang-10 && CXX=clang++-10"
#        - SANITIZE="on"
#      compiler: clang-10-sanitize

before_install:
  - eval "${COMPILER}"

install:
  - wget -q -O - "https://raw.githubusercontent.com/simdjson/debian-ppa/master/key.gpg" | sudo apt-key add -
  - sudo apt-add-repository "deb https://raw.githubusercontent.com/simdjson/debian-ppa/master simdjson main"
  - sudo apt-get -qq update
  - sudo apt-get purge cmake cmake-data
  - sudo apt-get -t simdjson -y install cmake
  - export CMAKE_CXX_FLAGS="-maltivec -mcpu=power9 -mtune=power9"
  - export CMAKE_C_FLAGS="${CMAKE_CXX_FLAGS}"
  - export CMAKE_FLAGS="-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS} -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS} -DSIMDJSON_IMPLEMENTATION=ppc64;fallback";
  - if [[ "${SANITIZE}" == "on" ]]; then
      export CMAKE_FLAGS="${CMAKE_FLAGS} -DSIMDJSON_SANITIZE=ON";
      export ASAN_OPTIONS="detect_leaks=0";
    fi
  - if [[ "${STATIC}" == "on" ]]; then
      export CMAKE_FLAGS="${CMAKE_FLAGS} -DBUILD_SHARED_LIBS=OFF";
    fi
  - export CTEST_FLAGS="-j4 --output-on-failure -LE explicitonly"

script:
  - mkdir build
  - cd build
  - cmake $CMAKE_FLAGS ..
  - cmake --build . -- -j2
  - SIMDJSON_FORCE_IMPLEMENTATION=ppc64 ctest $CTEST_FLAGS -L per_implementation
  - SIMDJSON_FORCE_IMPLEMENTATION=fallback ctest $CTEST_FLAGS -L per_implementation
  - ctest $CTEST_FLAGS -LE "acceptance|per_implementation"

2025-07-08 06:19:41.289 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-08 06:19:46.006 | INFO     | Model API request cost info: input_tokens=2014, output_tokens=543, cost=0.010465
2025-07-08 06:19:46.007 | SUCCESS  | Successfully extracted environment config
2025-07-08 06:19:46.007 | INFO     | ******
2025-07-08 06:19:46.008 | INFO     | Runtime Requirements:
- Language: C++
- Operating System: Linux (Ubuntu Bionic 18.04)
- Architectures: ppc64le

Build Environment (Compilers):
- GCC: 8, 9, 10
- Clang: 6.0, 7, 8, 9, 10

List of dependencies:
- apt packages: g++-8, g++-9, g++-10, clang-6.0, clang-7, clang-8, clang-9, clang-10
- cmake (version installed via simdjson PPA)

Key environment variables:
- `simdjson_DEPENDENCY_CACHE_DIR=$HOME/.dep_cache`
- `COMPILER` (e.g., `CC=gcc-8 && CXX=g++-8`, `CC=clang-10 && CXX=clang++-10`)
- `CMAKE_CXX_FLAGS="-maltivec -mcpu=power9 -mtune=power9"`
- `CMAKE_C_FLAGS="${CMAKE_CXX_FLAGS}"`
- `CMAKE_FLAGS="-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS} -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS} -DSIMDJSON_IMPLEMENTATION=ppc64;fallback"`
- `SANITIZE="on"` (conditionally adds `-DSIMDJSON_SANITIZE=ON` to `CMAKE_FLAGS` and `ASAN_OPTIONS="detect_leaks=0"`)
- `STATIC="on"` (conditionally adds `-DBUILD_SHARED_LIBS=OFF` to `CMAKE_FLAGS`)
- `ASAN_OPTIONS="detect_leaks=0"` (if `SANITIZE` is "on")
- `CTEST_FLAGS="-j4 --output-on-failure -LE explicitonly"`

Testing:
- Test framework: CTest
- Setup commands:
    - mkdir build
    - cd build
    - cmake $CMAKE_FLAGS ..
    - cmake --build . -- -j2
- Test commands:
    - SIMDJSON_FORCE_IMPLEMENTATION=ppc64 ctest $CTEST_FLAGS -L per_implementation
    - SIMDJSON_FORCE_IMPLEMENTATION=fallback ctest $CTEST_FLAGS -L per_implementation
    - ctest $CTEST_FLAGS -LE "acceptance|per_implementation"
2025-07-08 06:19:46.008 | INFO     | ******
2025-07-08 06:19:46.008 | DEBUG    | Result of dispatch_intent: ('Runtime Requirements:\n- Language: C++\n- Operating System: Linux (Ubuntu Bionic 18.04)\n- Architectures: ppc64le\n\nBuild Environment (Compilers):\n- GCC: 8, 9, 10\n- Clang: 6.0, 7, 8, 9, 10\n\nList of dependencies:\n- apt packages: g++-8, g++-9, g++-10, clang-6.0, clang-7, clang-8, clang-9, clang-10\n- cmake (version installed via simdjson PPA)\n\nKey environment variables:\n- `simdjson_DEPENDENCY_CACHE_DIR=$HOME/.dep_cache`\n- `COMPILER` (e.g., `CC=gcc-8 && CXX=g++-8`, `CC=clang-10 && CXX=clang++-10`)\n- `CMAKE_CXX_FLAGS="-maltivec -mcpu=power9 -mtune=power9"`\n- `CMAKE_C_FLAGS="${CMAKE_CXX_FLAGS}"`\n- `CMAKE_FLAGS="-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS} -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS} -DSIMDJSON_IMPLEMENTATION=ppc64;fallback"`\n- `SANITIZE="on"` (conditionally adds `-DSIMDJSON_SANITIZE=ON` to `CMAKE_FLAGS` and `ASAN_OPTIONS="detect_leaks=0"`)\n- `STATIC="on"` (conditionally adds `-DBUILD_SHARED_LIBS=OFF` to `CMAKE_FLAGS`)\n- `ASAN_OPTIONS="detect_leaks=0"` (if `SANITIZE` is "on")\n- `CTEST_FLAGS="-j4 --output-on-failure -LE explicitonly"`\n\nTesting:\n- Test framework: CTest\n- Setup commands:\n    - mkdir build\n    - cd build\n    - cmake $CMAKE_FLAGS ..\n    - cmake --build . -- -j2\n- Test commands:\n    - SIMDJSON_FORCE_IMPLEMENTATION=ppc64 ctest $CTEST_FLAGS -L per_implementation\n    - SIMDJSON_FORCE_IMPLEMENTATION=fallback ctest $CTEST_FLAGS -L per_implementation\n    - ctest $CTEST_FLAGS -LE "acceptance|per_implementation"', 'Get File Info', True)
2025-07-08 06:19:46.008 | DEBUG    | Result of dispatch_intent: ('You are browsing the path: /home/sahrish/Desktop/swe-bench/swe-factory-local/testbed/simdjson__simdjson-1624_2025-07-08_04-24-15/.github. The browsing Depth is 2.\nStructure of this path:\n\npull_request_template.md\n\nISSUE_TEMPLATE/\n\n    feature_request.md\n\n    standard-issue-template.md\n\n    bug_report.md\n\nworkflows/\n\n    ubuntu20-noexcept.yml\n\n    vs16-clang-ci.yml\n\n    mingw-ci.yml\n\n    ubuntu18.yml\n\n    mingw64-ci.yml\n\n    ubuntu20-checkperf.yml\n\n    ubuntu20-threadsani.yml\n\n    ubuntu20-nothread.yml\n\n    vs16-arm-ci.yml\n\n    vs15-ci.yml\n\n    ubuntu18-checkperf.yml\n\n    ubuntu20.yml\n\n    msys2.yml\n\n    vs16-ninja-ci.yml\n\n    ubuntu18-threadsani.yml\n\n    fix-trailing-whitespace.yml\n\n    vs16-noexcept-ci.yml\n\n    power-fuzz.yml\n\n    fuzzers.yml\n\n    vs16-ci.yml\n\n    msys2-clang.yml\n\n    alpine.yml\n\n', 'folder structure collected', True)
2025-07-08 06:20:02.278 | INFO     | Model API request cost info: input_tokens=3676, output_tokens=1078, cost=0.019970
2025-07-08 06:20:11.089 | INFO     | Model API request cost info: input_tokens=4853, output_tokens=531, cost=0.017442
2025-07-08 06:20:11.098 | DEBUG    | Trying to select search APIs in json. Try 1 of 5.
2025-07-08 06:20:14.375 | INFO     | Model API request cost info: input_tokens=1198, output_tokens=476, cost=0.007755
2025-07-08 06:20:14.376 | DEBUG    | {
  "API_calls": [],
  "collected_information": "Yes, I have collected enough information to write both the Dockerfile and the evaluation script.\n\nSummary of Collected Information:\n\n*   **Build System:** The project uses CMake for its build system, indicated by `CMakeLists.txt` and its usage in CI configurations.\n*   **Language & Compiler:** It's a C++ project requiring a C++11 (or newer) compatible compiler (g++ version 7+ or clang++ version 6+ are explicitly supported). Ubuntu's `build-essential` and specific `g++` or `clang` packages should suffice.\n*   **Operating System:** Linux, specifically Ubuntu 20.04 (as implied by the .travis.yml using Ubuntu 18.04 and later versions being compatible with the specified compiler requirements).\n*   **Dependencies:** Core dependencies are `cmake` and standard C/C++ development tools (`build-essential`). No other language-specific package managers (like pip, npm) are required for the core build and tests.\n*   **Build Process:**\n    *   Create a build directory (e.g., `build`).\n    *   Configure with CMake: `cmake .. -DSIMDJSON_DEVELOPER_MODE=ON`. The `SIMDJSON_DEVELOPER_MODE=ON` flag is crucial for ensuring tests are built.\n    *   Build the project: `cmake --build .`\n*   **Test Framework:** CTest is used for running tests.\n*   **Test Execution:** Tests are executed from the build directory using `ctest`. To run a specific test, the `-R` (regex) option can be used with `ctest`, matching the name of the test target in CMake. For `tests/ondemand/ondemand_json_pointer_tests.cpp`, the likely test name within CTest is `ondemand_json_pointer_tests`.\n*   **CI/CD Insights:** The `.travis.yml` file provided explicit details on compiler versions, build commands, environment variables, and CTest flags, which are highly valuable for a reproducible environment setup.",
  "terminate": true
}
2025-07-08 06:20:14.376 | DEBUG    | Extracted a valid json
2025-07-08 06:20:14.381 | INFO     | Trying to extract a dockerfile. Try 1 of 3.
2025-07-08 06:20:25.525 | INFO     | Model API request cost info: input_tokens=2975, output_tokens=772, cost=0.015158
2025-07-08 06:20:25.526 | INFO     | Raw dockerfile and produced in try 1. Writing dockerfile into file.
2025-07-08 06:20:25.549 | INFO     | Trying to extract a eval script. Try 1 of 3.
2025-07-08 06:20:37.716 | INFO     | Model API request cost info: input_tokens=3629, output_tokens=657, cost=0.015643
2025-07-08 06:20:37.716 | INFO     | Raw script and produced in try 1. Writing script into file.
2025-07-08 06:30:38.199 | DEBUG    | Result of dispatch_intent: ('Image built successfully!\nContainer b780035d5f4a14d8ba4c88203f783d51a01ca156c541147db960c5a3a2f0cffb started.\nPatch applied successfully.\nNote: Git diff changed after test execution.\nFind test_output.txt! Waiting for analysis. ', 'Docker image simdjson__simdjson-1624-dockerfile1:latest built successfully.\nContainer started.\nPatch applied.\nGit diff changed.\nObtain test results successfully.', True)
2025-07-08 06:30:38.202 | DEBUG    | Trying to analyze the test log. Try 1 of 3.
2025-07-08 06:30:43.727 | INFO     | Model API request cost info: input_tokens=8943, output_tokens=62, cost=0.022978
2025-07-08 06:30:43.728 | DEBUG    | {
    "is_finish": true,
    "guidance_for_write_dockerfile_agent": "",
    "guidance_for_write_eval_script_agent": "",
    "guidance_for_context_retrieval_agent": ""
}
2025-07-08 06:30:43.728 | DEBUG    | Extracted a valid json
2025-07-08 06:30:43.792 | INFO     | Removed project repository at testbed/simdjson__simdjson-1624_2025-07-08_04-24-15
2025-07-08 06:30:43.794 | INFO     | Task simdjson__simdjson-1624 completed successfully.
