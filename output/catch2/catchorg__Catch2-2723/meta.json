{
    "task_id": "catchorg__Catch2-2723",
    "setup_info": {
        "repo_path": "testbed/catchorg__Catch2-2723_2025-06-30_16-30-35",
        "repo_cache_path": "testbed/catchorg/Catch2_cache"
    },
    "task_info": {
        "repo": "catchorg/Catch2",
        "pull_number": 2723,
        "instance_id": "catchorg__Catch2-2723",
        "issue_numbers": [
            "2719"
        ],
        "base_commit": "4acc51828f7f93f3b2058a63f54d112af4034503",
        "patch": "diff --git a/src/catch2/internal/catch_run_context.cpp b/src/catch2/internal/catch_run_context.cpp\n--- a/src/catch2/internal/catch_run_context.cpp\n+++ b/src/catch2/internal/catch_run_context.cpp\n@@ -20,6 +20,7 @@\n #include <catch2/internal/catch_output_redirect.hpp>\n #include <catch2/internal/catch_assertion_handler.hpp>\n #include <catch2/internal/catch_test_failure_exception.hpp>\n+#include <catch2/internal/catch_result_type.hpp>\n \n #include <cassert>\n #include <algorithm>\n@@ -293,13 +294,14 @@ namespace Catch {\n             m_messageScopes.clear();\n         }\n \n-        // Reset working state\n-        resetAssertionInfo();\n+        // Reset working state. assertion info will be reset after\n+        // populateReaction is run if it is needed\n         m_lastResult = CATCH_MOVE( result );\n     }\n     void RunContext::resetAssertionInfo() {\n         m_lastAssertionInfo.macroName = StringRef();\n         m_lastAssertionInfo.capturedExpression = \"{Unknown expression after the reported line}\"_sr;\n+        m_lastAssertionInfo.resultDisposition = ResultDisposition::Normal;\n     }\n \n     void RunContext::notifyAssertionStarted( AssertionInfo const& info ) {\n@@ -447,6 +449,7 @@ namespace Catch {\n         AssertionResult result(m_lastAssertionInfo, CATCH_MOVE(tempResult));\n \n         assertionEnded(CATCH_MOVE(result) );\n+        resetAssertionInfo();\n \n         handleUnfinishedSections();\n \n@@ -583,6 +586,7 @@ namespace Catch {\n             reportExpr(info, ResultWas::ExpressionFailed, &expr, negated );\n             populateReaction( reaction );\n         }\n+        resetAssertionInfo();\n     }\n     void RunContext::reportExpr(\n             AssertionInfo const &info,\n@@ -621,6 +625,7 @@ namespace Catch {\n             // considered \"OK\"\n             reaction.shouldSkip = true;\n         }\n+        resetAssertionInfo();\n     }\n     void RunContext::handleUnexpectedExceptionNotThrown(\n             AssertionInfo const& info,\n@@ -641,6 +646,7 @@ namespace Catch {\n         AssertionResult assertionResult{ info, CATCH_MOVE(data) };\n         assertionEnded( CATCH_MOVE(assertionResult) );\n         populateReaction( reaction );\n+        resetAssertionInfo();\n     }\n \n     void RunContext::populateReaction( AssertionReaction& reaction ) {\n@@ -658,6 +664,7 @@ namespace Catch {\n         data.message = \"Exception translation was disabled by CATCH_CONFIG_FAST_COMPILE\"s;\n         AssertionResult assertionResult{ info, CATCH_MOVE( data ) };\n         assertionEnded( CATCH_MOVE(assertionResult) );\n+        resetAssertionInfo();\n     }\n     void RunContext::handleNonExpr(\n             AssertionInfo const &info,\n@@ -672,6 +679,7 @@ namespace Catch {\n         const auto isOk = assertionResult.isOk();\n         assertionEnded( CATCH_MOVE(assertionResult) );\n         if ( !isOk ) { populateReaction( reaction ); }\n+        resetAssertionInfo();\n     }\n \n \n",
        "test_patch": "diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt\n--- a/tests/CMakeLists.txt\n+++ b/tests/CMakeLists.txt\n@@ -78,6 +78,7 @@ endif(MSVC) #Temporary workaround\n set(TEST_SOURCES\n         ${SELF_TEST_DIR}/TestRegistrations.cpp\n         ${SELF_TEST_DIR}/IntrospectiveTests/Algorithms.tests.cpp\n+        ${SELF_TEST_DIR}/IntrospectiveTests/AssertionHandler.tests.cpp\n         ${SELF_TEST_DIR}/IntrospectiveTests/Clara.tests.cpp\n         ${SELF_TEST_DIR}/IntrospectiveTests/CmdLine.tests.cpp\n         ${SELF_TEST_DIR}/IntrospectiveTests/CmdLineHelpers.tests.cpp\ndiff --git a/tests/SelfTest/IntrospectiveTests/AssertionHandler.tests.cpp b/tests/SelfTest/IntrospectiveTests/AssertionHandler.tests.cpp\nnew file mode 100644\n--- /dev/null\n+++ b/tests/SelfTest/IntrospectiveTests/AssertionHandler.tests.cpp\n@@ -0,0 +1,17 @@\n+\n+//              Copyright Catch2 Authors\n+// Distributed under the Boost Software License, Version 1.0.\n+//   (See accompanying file LICENSE.txt or copy at\n+//        https://www.boost.org/LICENSE_1_0.txt)\n+\n+// SPDX-License-Identifier: BSL-1.0\n+\n+#include <catch2/catch_test_macros.hpp>\n+\n+TEST_CASE( \"Incomplete AssertionHandler\", \"[assertion-handler][!shouldfail]\" ) {\n+    Catch::AssertionHandler catchAssertionHandler(\n+        \"REQUIRE\"_catch_sr,\n+        CATCH_INTERNAL_LINEINFO,\n+        \"Dummy\",\n+        Catch::ResultDisposition::Normal );\n+}\ndiff --git a/tests/SelfTest/UsageTests/Misc.tests.cpp b/tests/SelfTest/UsageTests/Misc.tests.cpp\n--- a/tests/SelfTest/UsageTests/Misc.tests.cpp\n+++ b/tests/SelfTest/UsageTests/Misc.tests.cpp\n@@ -217,6 +217,18 @@ TEST_CASE(\"Testing checked-if 3\", \"[checked-if][!shouldfail]\") {\n     SUCCEED();\n }\n \n+[[noreturn]]\n+TEST_CASE(\"Testing checked-if 4\", \"[checked-if][!shouldfail]\") {\n+    CHECKED_ELSE(true) {}\n+    throw std::runtime_error(\"Uncaught exception should fail!\");\n+}\n+\n+[[noreturn]]\n+TEST_CASE(\"Testing checked-if 5\", \"[checked-if][!shouldfail]\") {\n+    CHECKED_ELSE(false) {}\n+    throw std::runtime_error(\"Uncaught exception should fail!\");\n+}\n+\n TEST_CASE( \"xmlentitycheck\" ) {\n     SECTION( \"embedded xml: <test>it should be possible to embed xml characters, such as <, \\\" or &, or even whole <xml>documents</xml> within an attribute</test>\" ) {\n         SUCCEED(); // We need this here to stop it failing due to no tests\n",
        "problem_statement": "Exception is treated as passing when used CHECKED_ELSE before in xml reporter\n**Describe the bug**\r\nAfter CHECKED_ELSE(true) {} is being run, any exception being thrown in the tests are suppressed and treated as passing when using xml reporter. Using console reporter reports failure.\r\n\r\nAfter CHECKED_ELSE(false) {} is being run, any exception being thrown are suppressed in both console and xml reporter.\r\n\r\n**Expected behavior**\r\nBoth the console reporter and xml reporter should behave exactly the same, that the exception is reported and test counted as failure in both cases.\r\n\r\n**Reproduction steps**\r\nSteps to reproduce the bug.\r\n<!-- Usually this means a small and self-contained piece of code that uses Catch and specifying compiler flags if relevant. -->\r\n```\r\n#include <catch2/catch_test_macros.hpp>\r\n#include <exception>\r\n\r\nTEST_CASE(\"Testing\") {\r\n    CHECKED_ELSE(true) {}\r\n    throw std::runtime_error(\"it is an error\");\r\n}\r\n```\r\nRunning it with \r\n./test -r xml\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Catch2TestRun name=\"test\" rng-seed=\"3025144594\" xml-format-version=\"2\" catch\r\n  <TestCase name=\"Testing\" filename=\"/home/ross/workspace/catch2-xml/test.cpp\r\n    <OverallResult success=\"true\" skips=\"0\"/>\r\n  </TestCase>\r\n  <OverallResults successes=\"1\" failures=\"0\" expectedFailures=\"0\" skips=\"0\"/>\r\n  <OverallResultsCases successes=\"1\" failures=\"0\" expectedFailures=\"0\" skips=\r\n</Catch2TestRun>\r\n```\r\nAnd running it directly with\r\n./test\r\n```\r\n...\r\n/home/ross/workspace/catch2-xml/test.cpp:4: FAILED:\r\n  {Unknown expression after the reported line}\r\ndue to unexpected exception with message:\r\n  it is an error\r\n\r\n===============================================================================\r\ntest cases: 1 | 1 failed\r\nassertions: 2 | 1 passed | 1 failed\r\n```\r\nAnd if the argument inside CHECKED_ELSE is false, exception is suppressed for both console and xml reporter. It also looks like a bug.\r\n\r\n```\r\n#include <catch2/catch_test_macros.hpp>\r\n#include <exception>\r\n\r\nTEST_CASE(\"Testing\") {\r\n    CHECKED_ELSE(false) {}\r\n    throw std::runtime_error(\"it is an error\");\r\n}\r\n```\r\nRunning\r\n./test -r xml\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Catch2TestRun name=\"test\" rng-seed=\"3270933764\" xml-format-version=\"2\" catch2-version=\"3.3.2\">\r\n  <TestCase name=\"Testing\" filename=\"/home/ross/workspace/catch2-xml/test.cpp\" line=\"4\">\r\n    <OverallResult success=\"true\" skips=\"0\"/>\r\n  </TestCase>\r\n  <OverallResults successes=\"0\" failures=\"0\" expectedFailures=\"0\" skips=\"0\"/>\r\n  <OverallResultsCases successes=\"1\" failures=\"0\" expectedFailures=\"0\" skips=\"0\"/>\r\n</Catch2TestRun>\r\n```\r\nRunning \r\n./test \r\n```\r\nRandomness seeded to: 1751265161\r\n===============================================================================\r\ntest cases: 1 | 1 passed\r\nassertions: - none -\r\n```\r\n**Platform information:**\r\n<!-- Fill in any extra information that might be important for your issue. -->\r\n - OS: **Ubuntu jammy**\r\n - Compiler+version: **clang++-15**\r\n - Catch version: **v3.3.2**\r\n\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n\n",
        "hints_text": "",
        "created_at": "2023-07-21T17:31:25Z",
        "version": "3.4"
    }
}