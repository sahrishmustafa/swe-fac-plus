[
  {
    "repo": "catchorg/Catch2",
    "pull_number": 2554,
    "instance_id": "catchorg__Catch2-2554",
    "issue_numbers": [
      "878"
    ],
    "base_commit": "8ce92d2c7288b6b3261caf1c016f8a779b6a8efc",
    "patch": "diff --git a/src/catch2/reporters/catch_reporter_compact.cpp b/src/catch2/reporters/catch_reporter_compact.cpp\n--- a/src/catch2/reporters/catch_reporter_compact.cpp\n+++ b/src/catch2/reporters/catch_reporter_compact.cpp\n@@ -18,22 +18,6 @@\n \n #include <ostream>\n \n-namespace {\n-\n-    constexpr Catch::StringRef bothOrAll( std::uint64_t count ) {\n-        switch (count) {\n-        case 1:\n-            return Catch::StringRef{};\n-        case 2:\n-            return \"both \"_catch_sr;\n-        default:\n-            return \"all \"_catch_sr;\n-        }\n-    }\n-\n-} // anon namespace\n-\n-\n namespace Catch {\n namespace {\n \n@@ -48,42 +32,6 @@ namespace {\n     static constexpr Catch::StringRef compactPassedString = \"passed\"_sr;\n #endif\n \n-// Colour, message variants:\n-// - white: No tests ran.\n-// -   red: Failed [both/all] N test cases, failed [both/all] M assertions.\n-// - white: Passed [both/all] N test cases (no assertions).\n-// -   red: Failed N tests cases, failed M assertions.\n-// - green: Passed [both/all] N tests cases with M assertions.\n-void printTotals(std::ostream& out, const Totals& totals, ColourImpl* colourImpl) {\n-    if (totals.testCases.total() == 0) {\n-        out << \"No tests ran.\";\n-    } else if (totals.testCases.failed == totals.testCases.total()) {\n-        auto guard = colourImpl->guardColour( Colour::ResultError ).engage( out );\n-        const StringRef qualify_assertions_failed =\n-            totals.assertions.failed == totals.assertions.total() ?\n-            bothOrAll(totals.assertions.failed) : StringRef{};\n-        out <<\n-            \"Failed \" << bothOrAll(totals.testCases.failed)\n-            << pluralise(totals.testCases.failed, \"test case\"_sr) << \", \"\n-            \"failed \" << qualify_assertions_failed <<\n-            pluralise(totals.assertions.failed, \"assertion\"_sr) << '.';\n-    } else if (totals.assertions.total() == 0) {\n-        out <<\n-            \"Passed \" << bothOrAll(totals.testCases.total())\n-            << pluralise(totals.testCases.total(), \"test case\"_sr)\n-            << \" (no assertions).\";\n-    } else if (totals.assertions.failed) {\n-        out << colourImpl->guardColour( Colour::ResultError ) <<\n-            \"Failed \" << pluralise(totals.testCases.failed, \"test case\"_sr) << \", \"\n-            \"failed \" << pluralise(totals.assertions.failed, \"assertion\"_sr) << '.';\n-    } else {\n-        out << colourImpl->guardColour( Colour::ResultSuccess ) <<\n-            \"Passed \" << bothOrAll(totals.testCases.passed)\n-            << pluralise(totals.testCases.passed, \"test case\"_sr) <<\n-            \" with \" << pluralise(totals.assertions.passed, \"assertion\"_sr) << '.';\n-    }\n-}\n-\n // Implementation of CompactReporter formatting\n class AssertionPrinter {\n public:\n@@ -291,7 +239,7 @@ class AssertionPrinter {\n         }\n \n         void CompactReporter::testRunEnded( TestRunStats const& _testRunStats ) {\n-            printTotals( m_stream, _testRunStats.totals, m_colour.get() );\n+            printTestRunTotals( m_stream, *m_colour, _testRunStats.totals );\n             m_stream << \"\\n\\n\" << std::flush;\n             StreamingReporterBase::testRunEnded( _testRunStats );\n         }\ndiff --git a/src/catch2/reporters/catch_reporter_console.cpp b/src/catch2/reporters/catch_reporter_console.cpp\n--- a/src/catch2/reporters/catch_reporter_console.cpp\n+++ b/src/catch2/reporters/catch_reporter_console.cpp\n@@ -491,7 +491,7 @@ void ConsoleReporter::testCaseEnded(TestCaseStats const& _testCaseStats) {\n }\n void ConsoleReporter::testRunEnded(TestRunStats const& _testRunStats) {\n     printTotalsDivider(_testRunStats.totals);\n-    printTotals(_testRunStats.totals);\n+    printTestRunTotals( m_stream, *m_colour, _testRunStats.totals );\n     m_stream << '\\n' << std::flush;\n     StreamingReporterBase::testRunEnded(_testRunStats);\n }\n@@ -598,82 +598,6 @@ void ConsoleReporter::printHeaderString(std::string const& _string, std::size_t\n            << '\\n';\n }\n \n-struct SummaryColumn {\n-\n-    SummaryColumn( std::string _label, Colour::Code _colour )\n-    :   label( CATCH_MOVE( _label ) ),\n-        colour( _colour ) {}\n-    SummaryColumn addRow( std::uint64_t count ) {\n-        ReusableStringStream rss;\n-        rss << count;\n-        std::string row = rss.str();\n-        for (auto& oldRow : rows) {\n-            while (oldRow.size() < row.size())\n-                oldRow = ' ' + oldRow;\n-            while (oldRow.size() > row.size())\n-                row = ' ' + row;\n-        }\n-        rows.push_back(row);\n-        return *this;\n-    }\n-\n-    std::string label;\n-    Colour::Code colour;\n-    std::vector<std::string> rows;\n-\n-};\n-\n-void ConsoleReporter::printTotals( Totals const& totals ) {\n-    if (totals.testCases.total() == 0) {\n-        m_stream << m_colour->guardColour( Colour::Warning )\n-                 << \"No tests ran\\n\";\n-    } else if (totals.assertions.total() > 0 && totals.testCases.allPassed()) {\n-        m_stream << m_colour->guardColour( Colour::ResultSuccess )\n-                 << \"All tests passed\";\n-        m_stream << \" (\"\n-            << pluralise(totals.assertions.passed, \"assertion\"_sr) << \" in \"\n-            << pluralise(totals.testCases.passed, \"test case\"_sr) << ')'\n-            << '\\n';\n-    } else {\n-\n-        std::vector<SummaryColumn> columns;\n-        columns.push_back(SummaryColumn(\"\", Colour::None)\n-                          .addRow(totals.testCases.total())\n-                          .addRow(totals.assertions.total()));\n-        columns.push_back(SummaryColumn(\"passed\", Colour::Success)\n-                          .addRow(totals.testCases.passed)\n-                          .addRow(totals.assertions.passed));\n-        columns.push_back(SummaryColumn(\"failed\", Colour::ResultError)\n-                          .addRow(totals.testCases.failed)\n-                          .addRow(totals.assertions.failed));\n-        columns.push_back(SummaryColumn(\"failed as expected\", Colour::ResultExpectedFailure)\n-                          .addRow(totals.testCases.failedButOk)\n-                          .addRow(totals.assertions.failedButOk));\n-\n-        printSummaryRow(\"test cases\"_sr, columns, 0);\n-        printSummaryRow(\"assertions\"_sr, columns, 1);\n-    }\n-}\n-void ConsoleReporter::printSummaryRow(StringRef label, std::vector<SummaryColumn> const& cols, std::size_t row) {\n-    for (auto col : cols) {\n-        std::string const& value = col.rows[row];\n-        if (col.label.empty()) {\n-            m_stream << label << \": \";\n-            if ( value != \"0\" ) {\n-                m_stream << value;\n-            } else {\n-                m_stream << m_colour->guardColour( Colour::Warning )\n-                         << \"- none -\";\n-            }\n-        } else if (value != \"0\") {\n-            m_stream << m_colour->guardColour( Colour::LightGrey ) << \" | \"\n-                     << m_colour->guardColour( col.colour ) << value << ' '\n-                     << col.label;\n-        }\n-    }\n-    m_stream << '\\n';\n-}\n-\n void ConsoleReporter::printTotalsDivider(Totals const& totals) {\n     if (totals.testCases.total() > 0) {\n         std::size_t failedRatio = makeRatio(totals.testCases.failed, totals.testCases.total());\n@@ -701,9 +625,6 @@ void ConsoleReporter::printTotalsDivider(Totals const& totals) {\n     }\n     m_stream << '\\n';\n }\n-void ConsoleReporter::printSummaryDivider() {\n-    m_stream << lineOfChars('-') << '\\n';\n-}\n \n } // end namespace Catch\n \ndiff --git a/src/catch2/reporters/catch_reporter_console.hpp b/src/catch2/reporters/catch_reporter_console.hpp\n--- a/src/catch2/reporters/catch_reporter_console.hpp\n+++ b/src/catch2/reporters/catch_reporter_console.hpp\n@@ -13,7 +13,6 @@\n \n namespace Catch {\n     // Fwd decls\n-    struct SummaryColumn;\n     class TablePrinter;\n \n     class ConsoleReporter final : public StreamingReporterBase {\n@@ -57,12 +56,7 @@ namespace Catch {\n         // subsequent lines\n         void printHeaderString(std::string const& _string, std::size_t indent = 0);\n \n-\n-        void printTotals(Totals const& totals);\n-        void printSummaryRow(StringRef label, std::vector<SummaryColumn> const& cols, std::size_t row);\n-\n         void printTotalsDivider(Totals const& totals);\n-        void printSummaryDivider();\n \n         bool m_headerPrinted = false;\n         bool m_testRunInfoPrinted = false;\ndiff --git a/src/catch2/reporters/catch_reporter_helpers.cpp b/src/catch2/reporters/catch_reporter_helpers.cpp\n--- a/src/catch2/reporters/catch_reporter_helpers.cpp\n+++ b/src/catch2/reporters/catch_reporter_helpers.cpp\n@@ -235,4 +235,102 @@ namespace Catch {\n         out << \"\\n\\n\" << std::flush;\n     }\n \n+    namespace {\n+        class SummaryColumn {\n+        public:\n+            SummaryColumn( std::string suffix, Colour::Code colour ):\n+                m_suffix( CATCH_MOVE( suffix ) ), m_colour( colour ) {}\n+\n+            SummaryColumn&& addRow( std::uint64_t count ) && {\n+                std::string row = std::to_string(count);\n+                auto const new_width = std::max( m_width, row.size() );\n+                if ( new_width > m_width ) {\n+                    for ( auto& oldRow : m_rows ) {\n+                        oldRow.insert( 0, new_width - m_width, ' ' );\n+                    }\n+                } else {\n+                    row.insert( 0, m_width - row.size(), ' ' );\n+                }\n+                m_width = new_width;\n+                m_rows.push_back( row );\n+                return std::move( *this );\n+            }\n+\n+            std::string const& getSuffix() const { return m_suffix; }\n+            Colour::Code getColour() const { return m_colour; }\n+            std::string const& getRow( std::size_t index ) const {\n+                return m_rows[index];\n+            }\n+\n+        private:\n+            std::string m_suffix;\n+            Colour::Code m_colour;\n+            std::size_t m_width = 0;\n+            std::vector<std::string> m_rows;\n+        };\n+\n+        void printSummaryRow( std::ostream& stream,\n+                              ColourImpl& colour,\n+                              StringRef label,\n+                              std::vector<SummaryColumn> const& cols,\n+                              std::size_t row ) {\n+            for ( auto const& col : cols ) {\n+                auto const& value = col.getRow( row );\n+                auto const& suffix = col.getSuffix();\n+                if ( suffix.empty() ) {\n+                    stream << label << \": \";\n+                    if ( value != \"0\" ) {\n+                        stream << value;\n+                    } else {\n+                        stream << colour.guardColour( Colour::Warning )\n+                               << \"- none -\";\n+                    }\n+                } else if ( value != \"0\" ) {\n+                    stream << colour.guardColour( Colour::LightGrey ) << \" | \"\n+                           << colour.guardColour( col.getColour() ) << value\n+                           << ' ' << suffix;\n+                }\n+            }\n+            stream << '\\n';\n+        }\n+    } // namespace\n+\n+    void printTestRunTotals( std::ostream& stream,\n+                             ColourImpl& streamColour,\n+                             Totals const& totals ) {\n+        if ( totals.testCases.total() == 0 ) {\n+            stream << streamColour.guardColour( Colour::Warning )\n+                   << \"No tests ran\\n\";\n+            return;\n+        }\n+\n+        if ( totals.assertions.total() > 0 && totals.testCases.allPassed() ) {\n+            stream << streamColour.guardColour( Colour::ResultSuccess )\n+                   << \"All tests passed\";\n+            stream << \" (\"\n+                   << pluralise( totals.assertions.passed, \"assertion\"_sr )\n+                   << \" in \"\n+                   << pluralise( totals.testCases.passed, \"test case\"_sr )\n+                   << ')' << '\\n';\n+            return;\n+        }\n+\n+        std::vector<SummaryColumn> columns;\n+        columns.push_back( SummaryColumn( \"\", Colour::None )\n+                               .addRow( totals.testCases.total() )\n+                               .addRow( totals.assertions.total() ) );\n+        columns.push_back( SummaryColumn( \"passed\", Colour::Success )\n+                               .addRow( totals.testCases.passed )\n+                               .addRow( totals.assertions.passed ) );\n+        columns.push_back( SummaryColumn( \"failed\", Colour::ResultError )\n+                               .addRow( totals.testCases.failed )\n+                               .addRow( totals.assertions.failed ) );\n+        columns.push_back(\n+            SummaryColumn( \"failed as expected\", Colour::ResultExpectedFailure )\n+                .addRow( totals.testCases.failedButOk )\n+                .addRow( totals.assertions.failedButOk ) );\n+        printSummaryRow( stream, streamColour, \"test cases\"_sr, columns, 0 );\n+        printSummaryRow( stream, streamColour, \"assertions\"_sr, columns, 1 );\n+    }\n+\n } // namespace Catch\ndiff --git a/src/catch2/reporters/catch_reporter_helpers.hpp b/src/catch2/reporters/catch_reporter_helpers.hpp\n--- a/src/catch2/reporters/catch_reporter_helpers.hpp\n+++ b/src/catch2/reporters/catch_reporter_helpers.hpp\n@@ -14,6 +14,7 @@\n \n #include <catch2/internal/catch_list.hpp>\n #include <catch2/interfaces/catch_interfaces_config.hpp>\n+#include <catch2/catch_totals.hpp>\n \n namespace Catch {\n \n@@ -80,6 +81,15 @@ namespace Catch {\n                            bool isFiltered,\n                            Verbosity verbosity );\n \n+    /**\n+     * Prints test run totals to the provided stream in user-friendly format\n+     *\n+     * Used by the console and compact reporters.\n+     */\n+    void printTestRunTotals( std::ostream& stream,\n+                      ColourImpl& streamColour,\n+                      Totals const& totals );\n+\n } // end namespace Catch\n \n #endif // CATCH_REPORTER_HELPERS_HPP_INCLUDED\n",
    "test_patch": "diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt\n--- a/tests/CMakeLists.txt\n+++ b/tests/CMakeLists.txt\n@@ -336,7 +336,7 @@ set_tests_properties(ApprovalTests\n )\n \n add_test(NAME RegressionCheck-1670 COMMAND $<TARGET_FILE:SelfTest> \"#1670 regression check\" -c A -r compact)\n-set_tests_properties(RegressionCheck-1670 PROPERTIES PASS_REGULAR_EXPRESSION \"Passed 1 test case with 2 assertions.\")\n+set_tests_properties(RegressionCheck-1670 PROPERTIES PASS_REGULAR_EXPRESSION \"All tests passed \\\\(2 assertions in 1 test case\\\\)\")\n \n add_test(NAME VersionCheck COMMAND $<TARGET_FILE:SelfTest> -h)\n set_tests_properties(VersionCheck PROPERTIES PASS_REGULAR_EXPRESSION \"Catch2 v${PROJECT_VERSION}\")\ndiff --git a/tests/ExtraTests/CMakeLists.txt b/tests/ExtraTests/CMakeLists.txt\n--- a/tests/ExtraTests/CMakeLists.txt\n+++ b/tests/ExtraTests/CMakeLists.txt\n@@ -210,7 +210,7 @@ add_test(NAME DeferredStaticChecks COMMAND DeferredStaticChecks -r compact)\n set_tests_properties(\n     DeferredStaticChecks\n   PROPERTIES\n-    PASS_REGULAR_EXPRESSION \"Failed 1 test case, failed all 3 assertions.\"\n+    PASS_REGULAR_EXPRESSION \"test cases: 1 \\\\| 1 failed\\nassertions: 3 \\\\| 3 failed\"\n )\n \n \n",
    "problem_statement": "Compact reporter does not handle [!shouldfail] properly\n## Description\r\nCompact reporter does not handle the `[!shouldfail]` tag properly. Given this code (from #876):\r\n```cpp\r\nbool thisThrows() {\r\n    throw std::runtime_error(\"Boom\");\r\n}\r\n\r\nTEST_CASE(\"#748 - captures with unexpected exceptions\", \"[!shouldfail]\") {\r\n    int answer = 42;\r\n    CAPTURE(answer);\r\n    // the message should be printed on the first two sections but not on the third\r\n    SECTION(\"outside assertions\") {\r\n        thisThrows();\r\n    }\r\n    SECTION(\"inside REQUIRE_NOTHROW\") {\r\n        REQUIRE_NOTHROW(thisThrows());\r\n    }\r\n    SECTION(\"inside REQUIRE_THROWS\") {\r\n        REQUIRE_THROWS(thisThrows());\r\n    }\r\n}\r\n```\r\ncompact reporter's output is\r\n```\r\n<snip>\r\nPassed all 0 test cases with 1 assertion.\r\n```\r\nwhich, while kind-of correct, is surprising. Standard console reporter's output looks like this:\r\n```\r\n<snip>\r\ntest cases: 1 | 1 failed as expected\r\nassertions: 3 | 1 passed | 2 failed as expected\r\n```\r\nwhich is much clearer about what happened and should be in some way replicated by the compact reporter.\r\n\r\n\r\n### Extra information\r\n* Catch version: **v1.8.2**\r\n\n",
    "hints_text": "I thought a bit about how this might look like but any attempts to have all the information on a single line ended up being quite messy (and it will only get worse with #2360). How about we just copy the output format from the console reporter exactly, save for the \"totals divider\"?\nYeah, that seems fine.\nOkay, stylistically, would you prefer (1) a common base class for console and compact reporter, (2) free functions used by both or (3) code duplication?\n2) or 3), depending on how annoying the signature would be. I don't think the console and compact reporters should have a shared base class.",
    "created_at": "2022-10-24T12:27:56Z",
    "version": "3.1",
    "dockerfile": "FROM --platform=linux/x86_64 ubuntu:20.04\nARG DEBIAN_FRONTEND=noninteractive\nENV TZ=Etc/UTC\n\n# Install essential tools and system dependencies\nRUN apt update && \\\n    apt install -y \\\n    git \\\n    build-essential \\\n    cmake \\\n    ninja-build \\\n    python3 \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Set working directory\nWORKDIR /testbed/\n\n# Clone the repository and checkout the specific commit\nRUN git clone https://github.com/catchorg/Catch2.git /testbed/ && \\\n    cd /testbed/ && \\\n    git reset --hard 8ce92d2c7288b6b3261caf1c016f8a779b6a8efc",
    "eval_script": "#!/bin/bash\nset -uxo pipefail\n\n# Navigate to the repository root as defined in the Dockerfile\ncd /testbed\n\n# Reset target test files to ensure a clean state before applying patch\n# This ensures that git apply operates on the original file content for the specified files.\ngit checkout 8ce92d2c7288b6b3261caf1c016f8a779b6a8efc \"tests/CMakeLists.txt\" \"tests/ExtraTests/CMakeLists.txt\"\n\n# Apply the test patch to the specified files\n# The actual content of the patch will be programmatically inserted at the placeholder.\ngit apply -v - <<'EOF_114329324912'\ndiff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt\n--- a/tests/CMakeLists.txt\n+++ b/tests/CMakeLists.txt\n@@ -336,7 +336,7 @@ set_tests_properties(ApprovalTests\n )\n \n add_test(NAME RegressionCheck-1670 COMMAND $<TARGET_FILE:SelfTest> \"#1670 regression check\" -c A -r compact)\n-set_tests_properties(RegressionCheck-1670 PROPERTIES PASS_REGULAR_EXPRESSION \"Passed 1 test case with 2 assertions.\")\n+set_tests_properties(RegressionCheck-1670 PROPERTIES PASS_REGULAR_EXPRESSION \"All tests passed \\\\(2 assertions in 1 test case\\\\)\")\n \n add_test(NAME VersionCheck COMMAND $<TARGET_FILE:SelfTest> -h)\n set_tests_properties(VersionCheck PROPERTIES PASS_REGULAR_EXPRESSION \"Catch2 v${PROJECT_VERSION}\")\ndiff --git a/tests/ExtraTests/CMakeLists.txt b/tests/ExtraTests/CMakeLists.txt\n--- a/tests/ExtraTests/CMakeLists.txt\n+++ b/tests/ExtraTests/CMakeLists.txt\n@@ -210,7 +210,7 @@ add_test(NAME DeferredStaticChecks COMMAND DeferredStaticChecks -r compact)\n set_tests_properties(\n     DeferredStaticChecks\n   PROPERTIES\n-    PASS_REGULAR_EXPRESSION \"Failed 1 test case, failed all 3 assertions.\"\n+    PASS_REGULAR_EXPRESSION \"test cases: 1 \\\\| 1 failed\\nassertions: 3 \\\\| 3 failed\"\n )\n \n \nEOF_114329324912\n\n# Configure CMake project with the specified flags\n# -Bbuild: Specifies 'build' as the binary directory\n# -H.: Specifies the current directory as the source directory\n# -DCATCH_DEVELOPMENT_BUILD=ON: Enables building tests and development features\n# -DCATCH_BUILD_EXTRA_TESTS=ON: Crucial for including tests from tests/ExtraTests\n# -G Ninja: Specifies Ninja as the build system generator\ncmake -Bbuild -H. \\\n      -DCATCH_DEVELOPMENT_BUILD=ON \\\n      -DCATCH_BUILD_EXTRA_TESTS=ON \\\n      -G Ninja\n\n# Build the project using Ninja, specifying the build directory\n# This command is run from the /testbed (repository root) directory.\nninja -C build\n\n# Handle ApprovalTests: Run the approve.py script to update test baselines.\n# This ensures that ApprovalTests find their expected output, if outputs have changed\n# due to environment or patch. Run from the repository root.\npython3 tools/scripts/approve.py\n\n# Array to store exit codes of individual test runs\ndeclare -a test_exit_codes\n\n# Find and run tests from the main 'tests' directory\n# The SelfTest executable is usually built directly under build/tests/\nfor test_binary in build/tests/SelfTest; do\n    if [ -f \"$test_binary\" ] && [ -x \"$test_binary\" ]; then\n        echo \"Running test: $test_binary\"\n        # Removed --exclude-tag as it's not recognized by the test binaries according to analysis\n        \"$test_binary\"\n        test_exit_codes+=( $? )\n    fi\ndone\n\n# Find and run tests from 'ExtraTests' directory\n# Test executables from ExtraTests are usually built directly under build/tests/ExtraTests/\nfor test_binary in build/tests/ExtraTests/*; do\n    if [ -f \"$test_binary\" ] && [ -x \"$test_binary\" ]; then\n        echo \"Running extra test: $test_binary\"\n        # Removed --exclude-tag as it's not recognized by the test binaries according to analysis\n        \"$test_binary\"\n        test_exit_codes+=( $? )\n    fi\ndone\n\n# Determine overall exit code\n# If any individual test run returned a non-zero exit code, the overall result is a failure.\nrc=0\nfor code in \"${test_exit_codes[@]}\"; do\n    if [ \"$code\" -ne 0 ]; then\n        rc=1\n        break\n    fi\ndone\n\n# Echo the final exit code for the judge to process\necho \"OMNIGRIL_EXIT_CODE=$rc\"\n\n# Clean up: Reset the target test files to their original state\n# This command is run from the /testbed (repository root) directory.\ngit checkout 8ce92d2c7288b6b3261caf1c016f8a779b6a8efc \"tests/CMakeLists.txt\" \"tests/ExtraTests/CMakeLists.txt\"",
    "eval_script_skeleton": "#!/bin/bash\nset -uxo pipefail\n\n# Navigate to the repository root as defined in the Dockerfile\ncd /testbed\n\n# Reset target test files to ensure a clean state before applying patch\n# This ensures that git apply operates on the original file content for the specified files.\ngit checkout 8ce92d2c7288b6b3261caf1c016f8a779b6a8efc \"tests/CMakeLists.txt\" \"tests/ExtraTests/CMakeLists.txt\"\n\n# Apply the test patch to the specified files\n# The actual content of the patch will be programmatically inserted at the placeholder.\ngit apply -v - <<'EOF_114329324912'\n[CONTENT OF TEST PATCH]\nEOF_114329324912\n\n# Configure CMake project with the specified flags\n# -Bbuild: Specifies 'build' as the binary directory\n# -H.: Specifies the current directory as the source directory\n# -DCATCH_DEVELOPMENT_BUILD=ON: Enables building tests and development features\n# -DCATCH_BUILD_EXTRA_TESTS=ON: Crucial for including tests from tests/ExtraTests\n# -G Ninja: Specifies Ninja as the build system generator\ncmake -Bbuild -H. \\\n      -DCATCH_DEVELOPMENT_BUILD=ON \\\n      -DCATCH_BUILD_EXTRA_TESTS=ON \\\n      -G Ninja\n\n# Build the project using Ninja, specifying the build directory\n# This command is run from the /testbed (repository root) directory.\nninja -C build\n\n# Handle ApprovalTests: Run the approve.py script to update test baselines.\n# This ensures that ApprovalTests find their expected output, if outputs have changed\n# due to environment or patch. Run from the repository root.\npython3 tools/scripts/approve.py\n\n# Array to store exit codes of individual test runs\ndeclare -a test_exit_codes\n\n# Find and run tests from the main 'tests' directory\n# The SelfTest executable is usually built directly under build/tests/\nfor test_binary in build/tests/SelfTest; do\n    if [ -f \"$test_binary\" ] && [ -x \"$test_binary\" ]; then\n        echo \"Running test: $test_binary\"\n        # Removed --exclude-tag as it's not recognized by the test binaries according to analysis\n        \"$test_binary\"\n        test_exit_codes+=( $? )\n    fi\ndone\n\n# Find and run tests from 'ExtraTests' directory\n# Test executables from ExtraTests are usually built directly under build/tests/ExtraTests/\nfor test_binary in build/tests/ExtraTests/*; do\n    if [ -f \"$test_binary\" ] && [ -x \"$test_binary\" ]; then\n        echo \"Running extra test: $test_binary\"\n        # Removed --exclude-tag as it's not recognized by the test binaries according to analysis\n        \"$test_binary\"\n        test_exit_codes+=( $? )\n    fi\ndone\n\n# Determine overall exit code\n# If any individual test run returned a non-zero exit code, the overall result is a failure.\nrc=0\nfor code in \"${test_exit_codes[@]}\"; do\n    if [ \"$code\" -ne 0 ]; then\n        rc=1\n        break\n    fi\ndone\n\n# Echo the final exit code for the judge to process\necho \"OMNIGRIL_EXIT_CODE=$rc\"\n\n# Clean up: Reset the target test files to their original state\n# This command is run from the /testbed (repository root) directory.\ngit checkout 8ce92d2c7288b6b3261caf1c016f8a779b6a8efc \"tests/CMakeLists.txt\" \"tests/ExtraTests/CMakeLists.txt\""
  },
  {
    "repo": "catchorg/Catch2",
    "pull_number": 2723,
    "instance_id": "catchorg__Catch2-2723",
    "issue_numbers": [
      "2719"
    ],
    "base_commit": "4acc51828f7f93f3b2058a63f54d112af4034503",
    "patch": "diff --git a/src/catch2/internal/catch_run_context.cpp b/src/catch2/internal/catch_run_context.cpp\n--- a/src/catch2/internal/catch_run_context.cpp\n+++ b/src/catch2/internal/catch_run_context.cpp\n@@ -20,6 +20,7 @@\n #include <catch2/internal/catch_output_redirect.hpp>\n #include <catch2/internal/catch_assertion_handler.hpp>\n #include <catch2/internal/catch_test_failure_exception.hpp>\n+#include <catch2/internal/catch_result_type.hpp>\n \n #include <cassert>\n #include <algorithm>\n@@ -293,13 +294,14 @@ namespace Catch {\n             m_messageScopes.clear();\n         }\n \n-        // Reset working state\n-        resetAssertionInfo();\n+        // Reset working state. assertion info will be reset after\n+        // populateReaction is run if it is needed\n         m_lastResult = CATCH_MOVE( result );\n     }\n     void RunContext::resetAssertionInfo() {\n         m_lastAssertionInfo.macroName = StringRef();\n         m_lastAssertionInfo.capturedExpression = \"{Unknown expression after the reported line}\"_sr;\n+        m_lastAssertionInfo.resultDisposition = ResultDisposition::Normal;\n     }\n \n     void RunContext::notifyAssertionStarted( AssertionInfo const& info ) {\n@@ -447,6 +449,7 @@ namespace Catch {\n         AssertionResult result(m_lastAssertionInfo, CATCH_MOVE(tempResult));\n \n         assertionEnded(CATCH_MOVE(result) );\n+        resetAssertionInfo();\n \n         handleUnfinishedSections();\n \n@@ -583,6 +586,7 @@ namespace Catch {\n             reportExpr(info, ResultWas::ExpressionFailed, &expr, negated );\n             populateReaction( reaction );\n         }\n+        resetAssertionInfo();\n     }\n     void RunContext::reportExpr(\n             AssertionInfo const &info,\n@@ -621,6 +625,7 @@ namespace Catch {\n             // considered \"OK\"\n             reaction.shouldSkip = true;\n         }\n+        resetAssertionInfo();\n     }\n     void RunContext::handleUnexpectedExceptionNotThrown(\n             AssertionInfo const& info,\n@@ -641,6 +646,7 @@ namespace Catch {\n         AssertionResult assertionResult{ info, CATCH_MOVE(data) };\n         assertionEnded( CATCH_MOVE(assertionResult) );\n         populateReaction( reaction );\n+        resetAssertionInfo();\n     }\n \n     void RunContext::populateReaction( AssertionReaction& reaction ) {\n@@ -658,6 +664,7 @@ namespace Catch {\n         data.message = \"Exception translation was disabled by CATCH_CONFIG_FAST_COMPILE\"s;\n         AssertionResult assertionResult{ info, CATCH_MOVE( data ) };\n         assertionEnded( CATCH_MOVE(assertionResult) );\n+        resetAssertionInfo();\n     }\n     void RunContext::handleNonExpr(\n             AssertionInfo const &info,\n@@ -672,6 +679,7 @@ namespace Catch {\n         const auto isOk = assertionResult.isOk();\n         assertionEnded( CATCH_MOVE(assertionResult) );\n         if ( !isOk ) { populateReaction( reaction ); }\n+        resetAssertionInfo();\n     }\n \n \n",
    "test_patch": "diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt\n--- a/tests/CMakeLists.txt\n+++ b/tests/CMakeLists.txt\n@@ -78,6 +78,7 @@ endif(MSVC) #Temporary workaround\n set(TEST_SOURCES\n         ${SELF_TEST_DIR}/TestRegistrations.cpp\n         ${SELF_TEST_DIR}/IntrospectiveTests/Algorithms.tests.cpp\n+        ${SELF_TEST_DIR}/IntrospectiveTests/AssertionHandler.tests.cpp\n         ${SELF_TEST_DIR}/IntrospectiveTests/Clara.tests.cpp\n         ${SELF_TEST_DIR}/IntrospectiveTests/CmdLine.tests.cpp\n         ${SELF_TEST_DIR}/IntrospectiveTests/CmdLineHelpers.tests.cpp\ndiff --git a/tests/SelfTest/IntrospectiveTests/AssertionHandler.tests.cpp b/tests/SelfTest/IntrospectiveTests/AssertionHandler.tests.cpp\nnew file mode 100644\n--- /dev/null\n+++ b/tests/SelfTest/IntrospectiveTests/AssertionHandler.tests.cpp\n@@ -0,0 +1,17 @@\n+\n+//              Copyright Catch2 Authors\n+// Distributed under the Boost Software License, Version 1.0.\n+//   (See accompanying file LICENSE.txt or copy at\n+//        https://www.boost.org/LICENSE_1_0.txt)\n+\n+// SPDX-License-Identifier: BSL-1.0\n+\n+#include <catch2/catch_test_macros.hpp>\n+\n+TEST_CASE( \"Incomplete AssertionHandler\", \"[assertion-handler][!shouldfail]\" ) {\n+    Catch::AssertionHandler catchAssertionHandler(\n+        \"REQUIRE\"_catch_sr,\n+        CATCH_INTERNAL_LINEINFO,\n+        \"Dummy\",\n+        Catch::ResultDisposition::Normal );\n+}\ndiff --git a/tests/SelfTest/UsageTests/Misc.tests.cpp b/tests/SelfTest/UsageTests/Misc.tests.cpp\n--- a/tests/SelfTest/UsageTests/Misc.tests.cpp\n+++ b/tests/SelfTest/UsageTests/Misc.tests.cpp\n@@ -217,6 +217,18 @@ TEST_CASE(\"Testing checked-if 3\", \"[checked-if][!shouldfail]\") {\n     SUCCEED();\n }\n \n+[[noreturn]]\n+TEST_CASE(\"Testing checked-if 4\", \"[checked-if][!shouldfail]\") {\n+    CHECKED_ELSE(true) {}\n+    throw std::runtime_error(\"Uncaught exception should fail!\");\n+}\n+\n+[[noreturn]]\n+TEST_CASE(\"Testing checked-if 5\", \"[checked-if][!shouldfail]\") {\n+    CHECKED_ELSE(false) {}\n+    throw std::runtime_error(\"Uncaught exception should fail!\");\n+}\n+\n TEST_CASE( \"xmlentitycheck\" ) {\n     SECTION( \"embedded xml: <test>it should be possible to embed xml characters, such as <, \\\" or &, or even whole <xml>documents</xml> within an attribute</test>\" ) {\n         SUCCEED(); // We need this here to stop it failing due to no tests\n",
    "problem_statement": "Exception is treated as passing when used CHECKED_ELSE before in xml reporter\n**Describe the bug**\r\nAfter CHECKED_ELSE(true) {} is being run, any exception being thrown in the tests are suppressed and treated as passing when using xml reporter. Using console reporter reports failure.\r\n\r\nAfter CHECKED_ELSE(false) {} is being run, any exception being thrown are suppressed in both console and xml reporter.\r\n\r\n**Expected behavior**\r\nBoth the console reporter and xml reporter should behave exactly the same, that the exception is reported and test counted as failure in both cases.\r\n\r\n**Reproduction steps**\r\nSteps to reproduce the bug.\r\n<!-- Usually this means a small and self-contained piece of code that uses Catch and specifying compiler flags if relevant. -->\r\n```\r\n#include <catch2/catch_test_macros.hpp>\r\n#include <exception>\r\n\r\nTEST_CASE(\"Testing\") {\r\n    CHECKED_ELSE(true) {}\r\n    throw std::runtime_error(\"it is an error\");\r\n}\r\n```\r\nRunning it with \r\n./test -r xml\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Catch2TestRun name=\"test\" rng-seed=\"3025144594\" xml-format-version=\"2\" catch\r\n  <TestCase name=\"Testing\" filename=\"/home/ross/workspace/catch2-xml/test.cpp\r\n    <OverallResult success=\"true\" skips=\"0\"/>\r\n  </TestCase>\r\n  <OverallResults successes=\"1\" failures=\"0\" expectedFailures=\"0\" skips=\"0\"/>\r\n  <OverallResultsCases successes=\"1\" failures=\"0\" expectedFailures=\"0\" skips=\r\n</Catch2TestRun>\r\n```\r\nAnd running it directly with\r\n./test\r\n```\r\n...\r\n/home/ross/workspace/catch2-xml/test.cpp:4: FAILED:\r\n  {Unknown expression after the reported line}\r\ndue to unexpected exception with message:\r\n  it is an error\r\n\r\n===============================================================================\r\ntest cases: 1 | 1 failed\r\nassertions: 2 | 1 passed | 1 failed\r\n```\r\nAnd if the argument inside CHECKED_ELSE is false, exception is suppressed for both console and xml reporter. It also looks like a bug.\r\n\r\n```\r\n#include <catch2/catch_test_macros.hpp>\r\n#include <exception>\r\n\r\nTEST_CASE(\"Testing\") {\r\n    CHECKED_ELSE(false) {}\r\n    throw std::runtime_error(\"it is an error\");\r\n}\r\n```\r\nRunning\r\n./test -r xml\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Catch2TestRun name=\"test\" rng-seed=\"3270933764\" xml-format-version=\"2\" catch2-version=\"3.3.2\">\r\n  <TestCase name=\"Testing\" filename=\"/home/ross/workspace/catch2-xml/test.cpp\" line=\"4\">\r\n    <OverallResult success=\"true\" skips=\"0\"/>\r\n  </TestCase>\r\n  <OverallResults successes=\"0\" failures=\"0\" expectedFailures=\"0\" skips=\"0\"/>\r\n  <OverallResultsCases successes=\"1\" failures=\"0\" expectedFailures=\"0\" skips=\"0\"/>\r\n</Catch2TestRun>\r\n```\r\nRunning \r\n./test \r\n```\r\nRandomness seeded to: 1751265161\r\n===============================================================================\r\ntest cases: 1 | 1 passed\r\nassertions: - none -\r\n```\r\n**Platform information:**\r\n<!-- Fill in any extra information that might be important for your issue. -->\r\n - OS: **Ubuntu jammy**\r\n - Compiler+version: **clang++-15**\r\n - Catch version: **v3.3.2**\r\n\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n\n",
    "hints_text": "",
    "created_at": "2023-07-21T17:31:25Z",
    "version": "3.4",
    "dockerfile": "FROM --platform=linux/x86_64 ubuntu:20.04\nARG DEBIAN_FRONTEND=noninteractive\nENV TZ=Etc/UTC\n\n# Install essential tools and system dependencies\n# build-essential for g++ and other build tools\n# cmake minimum version 3.10 required\n# ninja-build as the specified CMake generator\n# python3 required by the root CMakeLists.txt\n# git for cloning the repository\nRUN apt update && \\\n    apt install -y \\\n    git \\\n    build-essential \\\n    cmake \\\n    ninja-build \\\n    python3 \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Set working directory to /testbed/\nWORKDIR /testbed/\n\n# Clone the repository and checkout the specific commit SHA\n# Note: The provided commit SHA (4acc51828f7f93f3b2058a63f54d112af403450) is used as provided.\nRUN git clone https://github.com/catchorg/Catch2.git /testbed/ && \\\n    cd /testbed/ && \\\n    git reset --hard 4acc51828f7f93f3b2058a63f54d112af403450 && \\\n    git remote remove origin\n\n# Create a build directory and configure the project with CMake\n# CMAKE_BUILD_TYPE=Release for an optimized build\n# CMAKE_CXX_STANDARD=17 specifies the C++ standard\n# CATCH_DEVELOPMENT_BUILD=ON is crucial for building and enabling tests\n# -G Ninja specifies Ninja as the build system generator\nRUN cmake -Bbuild -H. \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_CXX_STANDARD=17 \\\n    -DCMAKE_CXX_STANDARD_REQUIRED=ON \\\n    -DCMAKE_CXX_EXTENSIONS=OFF \\\n    -DCATCH_DEVELOPMENT_BUILD=ON \\\n    -G Ninja\n\n# Build the project using Ninja from within the build directory\n# This command compiles the source code and creates executables, including tests.\nRUN cmake --build build\n\n# Set environment variable for CTest output, helpful for debugging test failures.\nENV CTEST_OUTPUT_ON_FAILURE=1",
    "eval_script": "#!/bin/bash\nset -uxo pipefail\n\n# Navigate to the repository root as defined in the Dockerfile\ncd /testbed\n\n# Reset target test files to ensure a clean state before applying patch.\n# This ensures that git apply operates on the original file content for the specified files.\ngit checkout 4acc51828f7f93f3b2058a63f54d112af4034503 \"tests/CMakeLists.txt\" \"tests/SelfTest/UsageTests/Misc.tests.cpp\"\n\n# Apply the test patch to the specified files.\n# The actual content of the patch will be programmatically inserted at the placeholder.\ngit apply -v - <<'EOF_114329324912'\ndiff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt\n--- a/tests/CMakeLists.txt\n+++ b/tests/CMakeLists.txt\n@@ -78,6 +78,7 @@ endif(MSVC) #Temporary workaround\n set(TEST_SOURCES\n         ${SELF_TEST_DIR}/TestRegistrations.cpp\n         ${SELF_TEST_DIR}/IntrospectiveTests/Algorithms.tests.cpp\n+        ${SELF_TEST_DIR}/IntrospectiveTests/AssertionHandler.tests.cpp\n         ${SELF_TEST_DIR}/IntrospectiveTests/Clara.tests.cpp\n         ${SELF_TEST_DIR}/IntrospectiveTests/CmdLine.tests.cpp\n         ${SELF_TEST_DIR}/IntrospectiveTests/CmdLineHelpers.tests.cpp\ndiff --git a/tests/SelfTest/IntrospectiveTests/AssertionHandler.tests.cpp b/tests/SelfTest/IntrospectiveTests/AssertionHandler.tests.cpp\nnew file mode 100644\n--- /dev/null\n+++ b/tests/SelfTest/IntrospectiveTests/AssertionHandler.tests.cpp\n@@ -0,0 +1,17 @@\n+\n+//              Copyright Catch2 Authors\n+// Distributed under the Boost Software License, Version 1.0.\n+//   (See accompanying file LICENSE.txt or copy at\n+//        https://www.boost.org/LICENSE_1_0.txt)\n+\n+// SPDX-License-Identifier: BSL-1.0\n+\n+#include <catch2/catch_test_macros.hpp>\n+\n+TEST_CASE( \"Incomplete AssertionHandler\", \"[assertion-handler][!shouldfail]\" ) {\n+    Catch::AssertionHandler catchAssertionHandler(\n+        \"REQUIRE\"_catch_sr,\n+        CATCH_INTERNAL_LINEINFO,\n+        \"Dummy\",\n+        Catch::ResultDisposition::Normal );\n+}\ndiff --git a/tests/SelfTest/UsageTests/Misc.tests.cpp b/tests/SelfTest/UsageTests/Misc.tests.cpp\n--- a/tests/SelfTest/UsageTests/Misc.tests.cpp\n+++ b/tests/SelfTest/UsageTests/Misc.tests.cpp\n@@ -217,6 +217,18 @@ TEST_CASE(\"Testing checked-if 3\", \"[checked-if][!shouldfail]\") {\n     SUCCEED();\n }\n \n+[[noreturn]]\n+TEST_CASE(\"Testing checked-if 4\", \"[checked-if][!shouldfail]\") {\n+    CHECKED_ELSE(true) {}\n+    throw std::runtime_error(\"Uncaught exception should fail!\");\n+}\n+\n+[[noreturn]]\n+TEST_CASE(\"Testing checked-if 5\", \"[checked-if][!shouldfail]\") {\n+    CHECKED_ELSE(false) {}\n+    throw std::runtime_error(\"Uncaught exception should fail!\");\n+}\n+\n TEST_CASE( \"xmlentitycheck\" ) {\n     SECTION( \"embedded xml: <test>it should be possible to embed xml characters, such as <, \\\" or &, or even whole <xml>documents</xml> within an attribute</test>\" ) {\n         SUCCEED(); // We need this here to stop it failing due to no tests\nEOF_114329324912\n\n# Re-configure CMake project with the specified flags after applying the patch.\n# This is crucial if tests/CMakeLists.txt was modified, to reflect changes in the build system.\n# -Bbuild: Specifies 'build' as the binary directory\n# -H.: Specifies the current directory as the source directory\n# -DCMAKE_BUILD_TYPE=Release: For an optimized build\n# -DCMAKE_CXX_STANDARD=17: Specifies the C++ standard\n# -DCATCH_DEVELOPMENT_BUILD=ON: Crucial for building tests and development features\n# -G Ninja: Specifies Ninja as the build system generator\ncmake -Bbuild -H. \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_CXX_STANDARD=17 \\\n    -DCMAKE_CXX_STANDARD_REQUIRED=ON \\\n    -DCMAKE_CXX_EXTENSIONS=OFF \\\n    -DCATCH_DEVELOPMENT_BUILD=ON \\\n    -G Ninja\n\n# Re-build the project using CMake's build command, specifying the build directory.\n# This command compiles the source code and creates executables, including tests,\n# picking up any changes from the patch and re-configuration.\ncmake --build build\n\n# Execute the SelfTest binary directly.\n# The test log analysis agent indicated that ctest failed to discover tests,\n# so directly running the compiled test executable is the workaround.\n./build/tests/SelfTest\nrc=$? # Capture the exit code of the test binary execution\n\n# Echo the final exit code for the judge to process\necho \"OMNIGRIL_EXIT_CODE=$rc\"\n\n# Clean up: Reset the target test files to their original state,\n# ensuring the repository is left in a clean state after the tests.\ngit checkout 4acc51828f7f93f3b2058a63f54d112af4034503 \"tests/CMakeLists.txt\" \"tests/SelfTest/UsageTests/Misc.tests.cpp\"",
    "eval_script_skeleton": "#!/bin/bash\nset -uxo pipefail\n\n# Navigate to the repository root as defined in the Dockerfile\ncd /testbed\n\n# Reset target test files to ensure a clean state before applying patch.\n# This ensures that git apply operates on the original file content for the specified files.\ngit checkout 4acc51828f7f93f3b2058a63f54d112af4034503 \"tests/CMakeLists.txt\" \"tests/SelfTest/UsageTests/Misc.tests.cpp\"\n\n# Apply the test patch to the specified files.\n# The actual content of the patch will be programmatically inserted at the placeholder.\ngit apply -v - <<'EOF_114329324912'\n[CONTENT OF TEST PATCH]\nEOF_114329324912\n\n# Re-configure CMake project with the specified flags after applying the patch.\n# This is crucial if tests/CMakeLists.txt was modified, to reflect changes in the build system.\n# -Bbuild: Specifies 'build' as the binary directory\n# -H.: Specifies the current directory as the source directory\n# -DCMAKE_BUILD_TYPE=Release: For an optimized build\n# -DCMAKE_CXX_STANDARD=17: Specifies the C++ standard\n# -DCATCH_DEVELOPMENT_BUILD=ON: Crucial for building tests and development features\n# -G Ninja: Specifies Ninja as the build system generator\ncmake -Bbuild -H. \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_CXX_STANDARD=17 \\\n    -DCMAKE_CXX_STANDARD_REQUIRED=ON \\\n    -DCMAKE_CXX_EXTENSIONS=OFF \\\n    -DCATCH_DEVELOPMENT_BUILD=ON \\\n    -G Ninja\n\n# Re-build the project using CMake's build command, specifying the build directory.\n# This command compiles the source code and creates executables, including tests,\n# picking up any changes from the patch and re-configuration.\ncmake --build build\n\n# Execute the SelfTest binary directly.\n# The test log analysis agent indicated that ctest failed to discover tests,\n# so directly running the compiled test executable is the workaround.\n./build/tests/SelfTest\nrc=$? # Capture the exit code of the test binary execution\n\n# Echo the final exit code for the judge to process\necho \"OMNIGRIL_EXIT_CODE=$rc\"\n\n# Clean up: Reset the target test files to their original state,\n# ensuring the repository is left in a clean state after the tests.\ngit checkout 4acc51828f7f93f3b2058a63f54d112af4034503 \"tests/CMakeLists.txt\" \"tests/SelfTest/UsageTests/Misc.tests.cpp\""
  }
]