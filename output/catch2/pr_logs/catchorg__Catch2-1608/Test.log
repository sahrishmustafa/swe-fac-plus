Filters: [messages]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SelfTest is a Catch v2.7.2 host application.
Run with -? for options

-------------------------------------------------------------------------------
INFO and WARN do not abort tests
-------------------------------------------------------------------------------
/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:12
...............................................................................

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:14: 
warning:
  this is a message
  this is a warning

-------------------------------------------------------------------------------
#1455 - INFO and WARN can start with a linebreak
-------------------------------------------------------------------------------
/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:17
...............................................................................

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:21: 
warning:
  
This info message starts with a linebreak
  
This warning message starts with a linebreak

-------------------------------------------------------------------------------
SUCCEED counts as a test pass
-------------------------------------------------------------------------------
/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:24
...............................................................................

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:25: PASSED:
with message:
  this is a success

-------------------------------------------------------------------------------
INFO gets logged on failure
-------------------------------------------------------------------------------
/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:28
...............................................................................

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:32: FAILED:
  REQUIRE( a == 1 )
with expansion:
  2 == 1
with messages:
  this message should be logged
  so should this

-------------------------------------------------------------------------------
INFO gets logged on failure, even if captured before successful assertions
-------------------------------------------------------------------------------
/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:35
...............................................................................

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:38: PASSED:
  CHECK( a == 2 )
with expansion:
  2 == 2
with message:
  this message may be logged later

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:42: FAILED:
  CHECK( a == 1 )
with expansion:
  2 == 1
with messages:
  this message may be logged later
  this message should be logged

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:46: FAILED:
  CHECK( a == 0 )
with expansion:
  2 == 0
with messages:
  this message may be logged later
  this message should be logged
  and this, but later

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:50: PASSED:
  CHECK( a == 2 )
with expansion:
  2 == 2
with messages:
  this message may be logged later
  this message should be logged
  and this, but later
  but not this

-------------------------------------------------------------------------------
FAIL aborts the test
-------------------------------------------------------------------------------
/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:53
...............................................................................

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:54: FAILED:
explicitly with message:
  This is a failure

-------------------------------------------------------------------------------
FAIL_CHECK does not abort the test
-------------------------------------------------------------------------------
/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:58
...............................................................................

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:59: FAILED:
explicitly with message:
  This is a failure

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:60: warning:
  This message appears in the output

-------------------------------------------------------------------------------
FAIL does not require an argument
-------------------------------------------------------------------------------
/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:63
...............................................................................

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:64: FAILED:

-------------------------------------------------------------------------------
SUCCEED does not require an argument
-------------------------------------------------------------------------------
/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:67
...............................................................................

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:68: PASSED:

-------------------------------------------------------------------------------
Output from all sections is reported
  one
-------------------------------------------------------------------------------
/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:72
...............................................................................

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:73: FAILED:
explicitly with message:
  Message from section one

-------------------------------------------------------------------------------
Output from all sections is reported
  two
-------------------------------------------------------------------------------
/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:76
...............................................................................

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:77: FAILED:
explicitly with message:
  Message from section two

Message from section one
Message from section two
-------------------------------------------------------------------------------
INFO is reset for each loop
-------------------------------------------------------------------------------
/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:108
...............................................................................

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:113: PASSED:
  REQUIRE( i < 10 )
with expansion:
  0 < 10
with messages:
  current counter 0
  i := 0

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:113: PASSED:
  REQUIRE( i < 10 )
with expansion:
  1 < 10
with messages:
  current counter 1
  i := 1

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:113: PASSED:
  REQUIRE( i < 10 )
with expansion:
  2 < 10
with messages:
  current counter 2
  i := 2

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:113: PASSED:
  REQUIRE( i < 10 )
with expansion:
  3 < 10
with messages:
  current counter 3
  i := 3

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:113: PASSED:
  REQUIRE( i < 10 )
with expansion:
  4 < 10
with messages:
  current counter 4
  i := 4

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:113: PASSED:
  REQUIRE( i < 10 )
with expansion:
  5 < 10
with messages:
  current counter 5
  i := 5

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:113: PASSED:
  REQUIRE( i < 10 )
with expansion:
  6 < 10
with messages:
  current counter 6
  i := 6

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:113: PASSED:
  REQUIRE( i < 10 )
with expansion:
  7 < 10
with messages:
  current counter 7
  i := 7

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:113: PASSED:
  REQUIRE( i < 10 )
with expansion:
  8 < 10
with messages:
  current counter 8
  i := 8

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:113: PASSED:
  REQUIRE( i < 10 )
with expansion:
  9 < 10
with messages:
  current counter 9
  i := 9

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:113: FAILED:
  REQUIRE( i < 10 )
with expansion:
  10 < 10
with messages:
  current counter 10
  i := 10

-------------------------------------------------------------------------------
The NO_FAIL macro reports a failure but does not fail the test
-------------------------------------------------------------------------------
/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:117
...............................................................................

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:118: FAILED - but was ok:
  CHECK_NOFAIL( 1 == 2 )

-------------------------------------------------------------------------------
just failure
-------------------------------------------------------------------------------
/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:124
...............................................................................

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:125: FAILED:
explicitly with message:
  Previous info should not be seen

-------------------------------------------------------------------------------
Pointers can be converted to strings
-------------------------------------------------------------------------------
/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:136
...............................................................................

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:138: warning:
  actual address of p: 0x7ffd7d46df0c

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:139: warning:
  toString(p): 0x00007ffd7d46df0c

-------------------------------------------------------------------------------
CAPTURE can deal with complex expressions
-------------------------------------------------------------------------------
/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:207
...............................................................................

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:212: PASSED:
with messages:
  a := 1
  b := 2
  c := 3
  a + b := 3
  a+b := 3
  c > b := true
  a == 1 := true

-------------------------------------------------------------------------------
CAPTURE can deal with complex expressions involving commas
-------------------------------------------------------------------------------
/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:244
...............................................................................

/testbed/projects/SelfTest/UsageTests/Message.tests.cpp:251: PASSED:
with messages:
  std::vector<int>{1, 2, 3}[0, 1, 2] := 3
  std::vector<int>{1, 2, 3}[(0, 1)] := 2
  std::vector<int>{1, 2, 3}[0] := 1
  (helper_1436<int, int>{12, -12}) := { 12, -12 }
  (helper_1436<int, int>(-12, 12)) := { -12, 12 }
  (1, 2) := 2
  (2, 3) := 3

===============================================================================
test cases: 19 | 11 passed |  8 failed
assertions: 26 | 16 passed | 10 failed

OMNIGRIL_EXIT_CODE=10
