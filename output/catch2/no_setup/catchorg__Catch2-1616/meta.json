{
    "task_id": "catchorg__Catch2-1616",
    "setup_info": {
        "repo_path": "testbed/catchorg__Catch2-1616_2025-06-29_23-16-37",
        "repo_cache_path": "testbed/catchorg/Catch2_cache"
    },
    "task_info": {
        "repo": "catchorg/Catch2",
        "pull_number": 1616,
        "instance_id": "catchorg__Catch2-1616",
        "issue_numbers": [
            "1186"
        ],
        "base_commit": "00347f1e79260e76d5072cca5b3636868397dda5",
        "patch": "diff --git a/include/catch.hpp b/include/catch.hpp\n--- a/include/catch.hpp\n+++ b/include/catch.hpp\n@@ -53,7 +53,6 @@\n #include \"internal/catch_test_registry.h\"\n #include \"internal/catch_capture.hpp\"\n #include \"internal/catch_section.h\"\n-#include \"internal/catch_benchmark.h\"\n #include \"internal/catch_interfaces_exception.h\"\n #include \"internal/catch_approx.h\"\n #include \"internal/catch_compiler_capabilities.h\"\n@@ -79,6 +78,10 @@\n #include \"internal/catch_external_interfaces.h\"\n #endif\n \n+#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)\n+#include \"internal/benchmark/catch_benchmark.hpp\"\n+#endif\n+\n #endif // ! CATCH_CONFIG_IMPL_ONLY\n \n #ifdef CATCH_IMPL\n@@ -89,6 +92,7 @@\n #include \"internal/catch_default_main.hpp\"\n #endif\n \n+\n #if !defined(CATCH_CONFIG_IMPL_ONLY)\n \n #ifdef CLARA_CONFIG_MAIN_NOT_DEFINED\n@@ -188,6 +192,13 @@\n #define CATCH_THEN( desc )      INTERNAL_CATCH_DYNAMIC_SECTION( \"     Then: \" << desc )\n #define CATCH_AND_THEN( desc )  INTERNAL_CATCH_DYNAMIC_SECTION( \"      And: \" << desc )\n \n+#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)\n+#define CATCH_BENCHMARK(...) \\\n+    INTERNAL_CATCH_BENCHMARK(INTERNAL_CATCH_UNIQUE_NAME(____C_A_T_C_H____B_E_N_C_H____), INTERNAL_CATCH_GET_1_ARG(__VA_ARGS__,,), INTERNAL_CATCH_GET_2_ARG(__VA_ARGS__,,))\n+#define CATCH_BENCHMARK_ADVANCED(name) \\\n+    INTERNAL_CATCH_BENCHMARK_ADVANCED(INTERNAL_CATCH_UNIQUE_NAME(____C_A_T_C_H____B_E_N_C_H____), name)\n+#endif // CATCH_CONFIG_ENABLE_BENCHMARKING\n+\n // If CATCH_CONFIG_PREFIX_ALL is not defined then the CATCH_ prefix is not required\n #else\n \n@@ -283,6 +294,13 @@\n #define THEN( desc )      INTERNAL_CATCH_DYNAMIC_SECTION( \"     Then: \" << desc )\n #define AND_THEN( desc )  INTERNAL_CATCH_DYNAMIC_SECTION( \"      And: \" << desc )\n \n+#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)\n+#define BENCHMARK(...) \\\n+    INTERNAL_CATCH_BENCHMARK(INTERNAL_CATCH_UNIQUE_NAME(____C_A_T_C_H____B_E_N_C_H____), INTERNAL_CATCH_GET_1_ARG(__VA_ARGS__,,), INTERNAL_CATCH_GET_2_ARG(__VA_ARGS__,,))\n+#define BENCHMARK_ADVANCED(name) \\\n+    INTERNAL_CATCH_BENCHMARK_ADVANCED(INTERNAL_CATCH_UNIQUE_NAME(____C_A_T_C_H____B_E_N_C_H____), name)\n+#endif // CATCH_CONFIG_ENABLE_BENCHMARKING\n+\n using Catch::Detail::Approx;\n \n #else // CATCH_CONFIG_DISABLE\ndiff --git a/include/internal/benchmark/catch_benchmark.hpp b/include/internal/benchmark/catch_benchmark.hpp\nnew file mode 100644\n--- /dev/null\n+++ b/include/internal/benchmark/catch_benchmark.hpp\n@@ -0,0 +1,122 @@\n+/*\n+ *  Created by Joachim on 16/04/2019.\n+ *  Adapted from donated nonius code.\n+ *\n+ *  Distributed under the Boost Software License, Version 1.0. (See accompanying\n+ *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n+ */\n+\n+ // Benchmark\n+#ifndef TWOBLUECUBES_CATCH_BENCHMARK_HPP_INCLUDED\n+#define TWOBLUECUBES_CATCH_BENCHMARK_HPP_INCLUDED\n+\n+#include \"../catch_config.hpp\"\n+#include \"../catch_context.h\"\n+#include \"../catch_interfaces_reporter.h\"\n+#include \"../catch_test_registry.h\"\n+\n+#include \"catch_chronometer.hpp\"\n+#include \"catch_clock.hpp\"\n+#include \"catch_environment.hpp\"\n+#include \"catch_execution_plan.hpp\"\n+#include \"detail/catch_estimate_clock.hpp\"\n+#include \"detail/catch_complete_invoke.hpp\"\n+#include \"detail/catch_analyse.hpp\"\n+#include \"detail/catch_benchmark_function.hpp\"\n+#include \"detail/catch_run_for_at_least.hpp\"\n+\n+#include <algorithm>\n+#include <functional>\n+#include <string>\n+#include <vector>\n+#include <cmath>\n+\n+namespace Catch {\n+    namespace Benchmark {\n+        struct Benchmark {\n+            Benchmark(std::string &&name)\n+                : name(std::move(name)) {}\n+\n+            template <class FUN>\n+            Benchmark(std::string &&name, FUN &&func)\n+                : fun(std::move(func)), name(std::move(name)) {}\n+\n+            template <typename Clock>\n+            ExecutionPlan<FloatDuration<Clock>> prepare(const IConfig &cfg, Environment<FloatDuration<Clock>> env) const {\n+                auto min_time = env.clock_resolution.mean * Detail::minimum_ticks;\n+                auto run_time = std::max(min_time, std::chrono::duration_cast<decltype(min_time)>(Detail::warmup_time));\n+                auto&& test = Detail::run_for_at_least<Clock>(std::chrono::duration_cast<ClockDuration<Clock>>(run_time), 1, fun);\n+                int new_iters = static_cast<int>(std::ceil(min_time * test.iterations / test.elapsed));\n+                return { new_iters, test.elapsed / test.iterations * new_iters * cfg.benchmarkSamples(), fun, std::chrono::duration_cast<FloatDuration<Clock>>(Detail::warmup_time), Detail::warmup_iterations };\n+            }\n+\n+            template <typename Clock = default_clock>\n+            void run() {\n+                IConfigPtr cfg = getCurrentContext().getConfig();\n+\n+                auto env = Detail::measure_environment<Clock>();\n+\n+                getResultCapture().benchmarkPreparing(name);\n+                CATCH_TRY{\n+                    auto plan = user_code([&] {\n+                        return prepare<Clock>(*cfg, env);\n+                    });\n+\n+                    BenchmarkInfo info {\n+                        name,\n+                        plan.estimated_duration.count(),\n+                        plan.iterations_per_sample,\n+                        cfg->benchmarkSamples(),\n+                        cfg->benchmarkResamples(),\n+                        env.clock_resolution.mean.count(),\n+                        env.clock_cost.mean.count()\n+                    };\n+\n+                    getResultCapture().benchmarkStarting(info);\n+\n+                    auto samples = user_code([&] {\n+                        return plan.template run<Clock>(*cfg, env);\n+                    });\n+\n+                    auto analysis = Detail::analyse(*cfg, env, samples.begin(), samples.end());\n+                    BenchmarkStats<std::chrono::duration<double, std::nano>> stats{ info, analysis.samples, analysis.mean, analysis.standard_deviation, analysis.outliers, analysis.outlier_variance };\n+                    getResultCapture().benchmarkEnded(stats);\n+\n+                } CATCH_CATCH_ALL{\n+                    if (translateActiveException() != Detail::benchmarkErrorMsg) // benchmark errors have been reported, otherwise rethrow.\n+                        std::rethrow_exception(std::current_exception());\n+                }\n+            }\n+\n+            // sets lambda to be used in fun *and* executes benchmark!\n+            template <typename Fun,\n+                typename std::enable_if<!Detail::is_related<Fun, Benchmark>::value, int>::type = 0>\n+                Benchmark & operator=(Fun func) {\n+                fun = Detail::BenchmarkFunction(func);\n+                run();\n+                return *this;\n+            }\n+\n+            explicit operator bool() {\n+                return true;\n+            }\n+\n+        private:\n+            Detail::BenchmarkFunction fun;\n+            std::string name;\n+        };\n+    }\n+} // namespace Catch\n+\n+#define INTERNAL_CATCH_GET_1_ARG(arg1, arg2, ...) arg1\n+#define INTERNAL_CATCH_GET_2_ARG(arg1, arg2, ...) arg2\n+\n+#define INTERNAL_CATCH_BENCHMARK(BenchmarkName, name, benchmarkIndex)\\\n+    if( Catch::Benchmark::Benchmark BenchmarkName{name} ) \\\n+        BenchmarkName = [&](int benchmarkIndex)\n+\n+#define INTERNAL_CATCH_BENCHMARK_ADVANCED(BenchmarkName, name)\\\n+    if( Catch::Benchmark::Benchmark BenchmarkName{name} ) \\\n+        BenchmarkName = [&]\n+\n+#endif // TWOBLUECUBES_CATCH_BENCHMARK_HPP_INCLUDED\ndiff --git a/include/internal/benchmark/catch_chronometer.hpp b/include/internal/benchmark/catch_chronometer.hpp\nnew file mode 100644\n--- /dev/null\n+++ b/include/internal/benchmark/catch_chronometer.hpp\n@@ -0,0 +1,71 @@\n+/*\n+ *  Created by Joachim on 16/04/2019.\n+ *  Adapted from donated nonius code.\n+ *\n+ *  Distributed under the Boost Software License, Version 1.0. (See accompanying\n+ *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n+ */\n+\n+// User-facing chronometer\n+\n+#ifndef TWOBLUECUBES_CATCH_CHRONOMETER_HPP_INCLUDED\n+#define TWOBLUECUBES_CATCH_CHRONOMETER_HPP_INCLUDED\n+\n+#include \"catch_clock.hpp\"\n+#include \"catch_optimizer.hpp\"\n+#include \"detail/catch_complete_invoke.hpp\"\n+#include \"../catch_meta.hpp\"\n+\n+namespace Catch {\n+    namespace Benchmark {\n+        namespace Detail {\n+            struct ChronometerConcept {\n+                virtual void start() = 0;\n+                virtual void finish() = 0;\n+                virtual ~ChronometerConcept() = default;\n+            };\n+            template <typename Clock>\n+            struct ChronometerModel final : public ChronometerConcept {\n+                void start() override { started = Clock::now(); }\n+                void finish() override { finished = Clock::now(); }\n+\n+                ClockDuration<Clock> elapsed() const { return finished - started; }\n+\n+                TimePoint<Clock> started;\n+                TimePoint<Clock> finished;\n+            };\n+        } // namespace Detail\n+\n+        struct Chronometer {\n+        public:\n+            template <typename Fun>\n+            void measure(Fun&& fun) { measure(std::forward<Fun>(fun), is_callable<Fun(int)>()); }\n+\n+            int runs() const { return k; }\n+\n+            Chronometer(Detail::ChronometerConcept& meter, int k)\n+                : impl(&meter)\n+                , k(k) {}\n+\n+        private:\n+            template <typename Fun>\n+            void measure(Fun&& fun, std::false_type) {\n+                measure([&fun](int) { return fun(); }, std::true_type());\n+            }\n+\n+            template <typename Fun>\n+            void measure(Fun&& fun, std::true_type) {\n+                Detail::optimizer_barrier();\n+                impl->start();\n+                for (int i = 0; i < k; ++i) invoke_deoptimized(fun, i);\n+                impl->finish();\n+                Detail::optimizer_barrier();\n+            }\n+\n+            Detail::ChronometerConcept* impl;\n+            int k;\n+        };\n+    } // namespace Benchmark\n+} // namespace Catch\n+\n+#endif // TWOBLUECUBES_CATCH_CHRONOMETER_HPP_INCLUDED\ndiff --git a/include/internal/benchmark/catch_clock.hpp b/include/internal/benchmark/catch_clock.hpp\nnew file mode 100644\n--- /dev/null\n+++ b/include/internal/benchmark/catch_clock.hpp\n@@ -0,0 +1,40 @@\n+/*\n+ *  Created by Joachim on 16/04/2019.\n+ *  Adapted from donated nonius code.\n+ *\n+ *  Distributed under the Boost Software License, Version 1.0. (See accompanying\n+ *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n+ */\n+\n+// Clocks\n+\n+#ifndef TWOBLUECUBES_CATCH_CLOCK_HPP_INCLUDED\n+#define TWOBLUECUBES_CATCH_CLOCK_HPP_INCLUDED\n+\n+#include <chrono>\n+#include <ratio>\n+\n+namespace Catch {\n+    namespace Benchmark {\n+        template <typename Clock>\n+        using ClockDuration = typename Clock::duration;\n+        template <typename Clock>\n+        using FloatDuration = std::chrono::duration<double, typename Clock::period>;\n+\n+        template <typename Clock>\n+        using TimePoint = typename Clock::time_point;\n+\n+        using default_clock = std::chrono::steady_clock;\n+\n+        template <typename Clock>\n+        struct now {\n+            TimePoint<Clock> operator()() const {\n+                return Clock::now();\n+            }\n+        };\n+\n+        using fp_seconds = std::chrono::duration<double, std::ratio<1>>;\n+    } // namespace Benchmark\n+} // namespace Catch\n+\n+#endif // TWOBLUECUBES_CATCH_CLOCK_HPP_INCLUDED\ndiff --git a/include/internal/benchmark/catch_constructor.hpp b/include/internal/benchmark/catch_constructor.hpp\nnew file mode 100644\n--- /dev/null\n+++ b/include/internal/benchmark/catch_constructor.hpp\n@@ -0,0 +1,73 @@\n+/*\n+ *  Created by Joachim on 16/04/2019.\n+ *  Adapted from donated nonius code.\n+ *\n+ *  Distributed under the Boost Software License, Version 1.0. (See accompanying\n+ *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n+ */\n+\n+// Constructor and destructor helpers\n+\n+#ifndef TWOBLUECUBES_CATCH_CONSTRUCTOR_HPP_INCLUDED\n+#define TWOBLUECUBES_CATCH_CONSTRUCTOR_HPP_INCLUDED\n+\n+#include <type_traits>\n+\n+namespace Catch {\n+    namespace Detail {\n+        template <typename T, bool Destruct>\n+        struct ObjectStorage\n+        {\n+            using TStorage = typename std::aligned_storage<sizeof(T), std::alignment_of<T>::value>::type;\n+\n+            ObjectStorage() : data() {}\n+\n+            ObjectStorage(const ObjectStorage& other)\n+            {\n+                new(&data) T(other.stored_object());\n+            }\n+\n+            ObjectStorage(ObjectStorage&& other)\n+            {\n+                new(&data) T(std::move(other.stored_object()));\n+            }\n+\n+            ~ObjectStorage() { destruct_on_exit<T>(); }\n+\n+            template <typename... Args>\n+            void construct(Args&&... args)\n+            {\n+                new (&data) T(std::forward<Args>(args)...);\n+            }\n+\n+            template <bool AllowManualDestruction = !Destruct>\n+            typename std::enable_if<AllowManualDestruction>::type destruct()\n+            {\n+                stored_object().~T();\n+            }\n+\n+        private:\n+            // If this is a constructor benchmark, destruct the underlying object\n+            template <typename U>\n+            void destruct_on_exit(typename std::enable_if<Destruct, U>::type* = 0) { destruct<true>(); }\n+            // Otherwise, don't\n+            template <typename U>\n+            void destruct_on_exit(typename std::enable_if<!Destruct, U>::type* = 0) { }\n+\n+            T& stored_object()\n+            {\n+                return *static_cast<T*>(static_cast<void*>(&data));\n+            }\n+\n+            TStorage data;\n+        };\n+    }\n+\n+    template <typename T>\n+    using storage_for = Detail::ObjectStorage<T, true>;\n+\n+    template <typename T>\n+    using destructable_object = Detail::ObjectStorage<T, false>;\n+}\n+\n+#endif // TWOBLUECUBES_CATCH_CONSTRUCTOR_HPP_INCLUDED\ndiff --git a/include/internal/benchmark/catch_environment.hpp b/include/internal/benchmark/catch_environment.hpp\nnew file mode 100644\n--- /dev/null\n+++ b/include/internal/benchmark/catch_environment.hpp\n@@ -0,0 +1,38 @@\n+/*\n+ *  Created by Joachim on 16/04/2019.\n+ *  Adapted from donated nonius code.\n+ *\n+ *  Distributed under the Boost Software License, Version 1.0. (See accompanying\n+ *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n+ */\n+\n+// Environment information\n+\n+#ifndef TWOBLUECUBES_CATCH_ENVIRONMENT_HPP_INCLUDED\n+#define TWOBLUECUBES_CATCH_ENVIRONMENT_HPP_INCLUDED\n+\n+#include \"catch_clock.hpp\"\n+#include \"catch_outlier_classification.hpp\"\n+\n+namespace Catch {\n+    namespace Benchmark {\n+        template <typename Duration>\n+        struct EnvironmentEstimate {\n+            Duration mean;\n+            OutlierClassification outliers;\n+\n+            template <typename Duration2>\n+            operator EnvironmentEstimate<Duration2>() const {\n+                return { mean, outliers };\n+            }\n+        };\n+        template <typename Clock>\n+        struct Environment {\n+            using clock_type = Clock;\n+            EnvironmentEstimate<FloatDuration<Clock>> clock_resolution;\n+            EnvironmentEstimate<FloatDuration<Clock>> clock_cost;\n+        };\n+    } // namespace Benchmark\n+} // namespace Catch\n+\n+#endif // TWOBLUECUBES_CATCH_ENVIRONMENT_HPP_INCLUDED\ndiff --git a/include/internal/benchmark/catch_estimate.hpp b/include/internal/benchmark/catch_estimate.hpp\nnew file mode 100644\n--- /dev/null\n+++ b/include/internal/benchmark/catch_estimate.hpp\n@@ -0,0 +1,31 @@\n+/*\n+ *  Created by Joachim on 16/04/2019.\n+ *  Adapted from donated nonius code.\n+ *\n+ *  Distributed under the Boost Software License, Version 1.0. (See accompanying\n+ *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n+ */\n+\n+ // Statistics estimates\n+\n+#ifndef TWOBLUECUBES_CATCH_ESTIMATE_HPP_INCLUDED\n+#define TWOBLUECUBES_CATCH_ESTIMATE_HPP_INCLUDED\n+\n+namespace Catch {\n+    namespace Benchmark {\n+        template <typename Duration>\n+        struct Estimate {\n+            Duration point;\n+            Duration lower_bound;\n+            Duration upper_bound;\n+            double confidence_interval;\n+\n+            template <typename Duration2>\n+            operator Estimate<Duration2>() const {\n+                return { point, lower_bound, upper_bound, confidence_interval };\n+            }\n+        };\n+    } // namespace Benchmark\n+} // namespace Catch\n+\n+#endif // TWOBLUECUBES_CATCH_ESTIMATE_HPP_INCLUDED\ndiff --git a/include/internal/benchmark/catch_execution_plan.hpp b/include/internal/benchmark/catch_execution_plan.hpp\nnew file mode 100644\n--- /dev/null\n+++ b/include/internal/benchmark/catch_execution_plan.hpp\n@@ -0,0 +1,58 @@\n+/*\n+ *  Created by Joachim on 16/04/2019.\n+ *  Adapted from donated nonius code.\n+ *\n+ *  Distributed under the Boost Software License, Version 1.0. (See accompanying\n+ *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n+ */\n+\n+ // Execution plan\n+\n+#ifndef TWOBLUECUBES_CATCH_EXECUTION_PLAN_HPP_INCLUDED\n+#define TWOBLUECUBES_CATCH_EXECUTION_PLAN_HPP_INCLUDED\n+\n+#include \"../catch_config.hpp\"\n+#include \"catch_clock.hpp\"\n+#include \"catch_environment.hpp\"\n+#include \"detail/catch_benchmark_function.hpp\"\n+#include \"detail/catch_repeat.hpp\"\n+#include \"detail/catch_run_for_at_least.hpp\"\n+\n+#include <algorithm>\n+\n+namespace Catch {\n+    namespace Benchmark {\n+        template <typename Duration>\n+        struct ExecutionPlan {\n+            int iterations_per_sample;\n+            Duration estimated_duration;\n+            Detail::BenchmarkFunction benchmark;\n+            Duration warmup_time;\n+            int warmup_iterations;\n+\n+            template <typename Duration2>\n+            operator ExecutionPlan<Duration2>() const {\n+                return { iterations_per_sample, estimated_duration, benchmark, warmup_time, warmup_iterations };\n+            }\n+\n+            template <typename Clock>\n+            std::vector<FloatDuration<Clock>> run(const IConfig &cfg, Environment<FloatDuration<Clock>> env) const {\n+                // warmup a bit\n+                Detail::run_for_at_least<Clock>(std::chrono::duration_cast<ClockDuration<Clock>>(warmup_time), warmup_iterations, Detail::repeat(now<Clock>{}));\n+\n+                std::vector<FloatDuration<Clock>> times;\n+                times.reserve(cfg.benchmarkSamples());\n+                std::generate_n(std::back_inserter(times), cfg.benchmarkSamples(), [this, env] {\n+                    Detail::ChronometerModel<Clock> model;\n+                    this->benchmark(Chronometer(model, iterations_per_sample));\n+                    auto sample_time = model.elapsed() - env.clock_cost.mean;\n+                    if (sample_time < FloatDuration<Clock>::zero()) sample_time = FloatDuration<Clock>::zero();\n+                    return sample_time / iterations_per_sample;\n+                });\n+                return times;\n+            }\n+        };\n+    } // namespace Benchmark\n+} // namespace Catch\n+\n+#endif // TWOBLUECUBES_CATCH_EXECUTION_PLAN_HPP_INCLUDED\ndiff --git a/include/internal/benchmark/catch_optimizer.hpp b/include/internal/benchmark/catch_optimizer.hpp\nnew file mode 100644\n--- /dev/null\n+++ b/include/internal/benchmark/catch_optimizer.hpp\n@@ -0,0 +1,68 @@\n+/*\n+ *  Created by Joachim on 16/04/2019.\n+ *  Adapted from donated nonius code.\n+ *\n+ *  Distributed under the Boost Software License, Version 1.0. (See accompanying\n+ *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n+ */\n+\n+ // Hinting the optimizer\n+\n+#ifndef TWOBLUECUBES_CATCH_OPTIMIZER_HPP_INCLUDED\n+#define TWOBLUECUBES_CATCH_OPTIMIZER_HPP_INCLUDED\n+\n+#if defined(_MSC_VER)\n+#   include <atomic> // atomic_thread_fence\n+#endif\n+\n+namespace Catch {\n+    namespace Benchmark {\n+#if defined(__GNUC__) || defined(__clang__)\n+        template <typename T>\n+        inline void keep_memory(T* p) {\n+            asm volatile(\"\" : : \"g\"(p) : \"memory\");\n+        }\n+        inline void keep_memory() {\n+            asm volatile(\"\" : : : \"memory\");\n+        }\n+\n+        namespace Detail {\n+            inline void optimizer_barrier() { keep_memory(); }\n+        } // namespace Detail\n+#elif defined(_MSC_VER)\n+\n+#pragma optimize(\"\", off)\n+        template <typename T>\n+        inline void keep_memory(T* p) {\n+            // thanks @milleniumbug\n+            *reinterpret_cast<char volatile*>(p) = *reinterpret_cast<char const volatile*>(p);\n+        }\n+        // TODO equivalent keep_memory()\n+#pragma optimize(\"\", on)\n+\n+        namespace Detail {\n+            inline void optimizer_barrier() {\n+                std::atomic_thread_fence(std::memory_order_seq_cst);\n+            }\n+        } // namespace Detail\n+\n+#endif\n+\n+        template <typename T>\n+        inline void deoptimize_value(T&& x) {\n+            keep_memory(&x);\n+        }\n+\n+        template <typename Fn, typename... Args>\n+        inline auto invoke_deoptimized(Fn&& fn, Args&&... args) -> typename std::enable_if<!std::is_same<void, decltype(fn(args...))>::value>::type {\n+            deoptimize_value(std::forward<Fn>(fn) (std::forward<Args...>(args...)));\n+        }\n+\n+        template <typename Fn, typename... Args>\n+        inline auto invoke_deoptimized(Fn&& fn, Args&&... args) -> typename std::enable_if<std::is_same<void, decltype(fn(args...))>::value>::type {\n+            std::forward<Fn>(fn) (std::forward<Args...>(args...));\n+        }\n+    } // namespace Benchmark\n+} // namespace Catch\n+\n+#endif // TWOBLUECUBES_CATCH_OPTIMIZER_HPP_INCLUDED\ndiff --git a/include/internal/benchmark/catch_outlier_classification.hpp b/include/internal/benchmark/catch_outlier_classification.hpp\nnew file mode 100644\n--- /dev/null\n+++ b/include/internal/benchmark/catch_outlier_classification.hpp\n@@ -0,0 +1,29 @@\n+/*\n+ *  Created by Joachim on 16/04/2019.\n+ *  Adapted from donated nonius code.\n+ *\n+ *  Distributed under the Boost Software License, Version 1.0. (See accompanying\n+ *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n+ */\n+\n+// Outlier information\n+#ifndef TWOBLUECUBES_CATCH_OUTLIERS_HPP_INCLUDED\n+#define TWOBLUECUBES_CATCH_OUTLIERS_HPP_INCLUDED\n+\n+namespace Catch {\n+    namespace Benchmark {\n+        struct OutlierClassification {\n+            int samples_seen = 0;\n+            int low_severe = 0;     // more than 3 times IQR below Q1\n+            int low_mild = 0;       // 1.5 to 3 times IQR below Q1\n+            int high_mild = 0;      // 1.5 to 3 times IQR above Q3\n+            int high_severe = 0;    // more than 3 times IQR above Q3\n+\n+            int total() const {\n+                return low_severe + low_mild + high_mild + high_severe;\n+            }\n+        };\n+    } // namespace Benchmark\n+} // namespace Catch\n+\n+#endif // TWOBLUECUBES_CATCH_OUTLIERS_HPP_INCLUDED\ndiff --git a/include/internal/benchmark/catch_sample_analysis.hpp b/include/internal/benchmark/catch_sample_analysis.hpp\nnew file mode 100644\n--- /dev/null\n+++ b/include/internal/benchmark/catch_sample_analysis.hpp\n@@ -0,0 +1,50 @@\n+/*\n+ *  Created by Joachim on 16/04/2019.\n+ *  Adapted from donated nonius code.\n+ *\n+ *  Distributed under the Boost Software License, Version 1.0. (See accompanying\n+ *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n+ */\n+\n+// Benchmark results\n+\n+#ifndef TWOBLUECUBES_CATCH_BENCHMARK_RESULTS_HPP_INCLUDED\n+#define TWOBLUECUBES_CATCH_BENCHMARK_RESULTS_HPP_INCLUDED\n+\n+#include \"catch_clock.hpp\"\n+#include \"catch_estimate.hpp\"\n+#include \"catch_outlier_classification.hpp\"\n+\n+#include <algorithm>\n+#include <vector>\n+#include <string>\n+#include <iterator>\n+\n+namespace Catch {\n+    namespace Benchmark {\n+        template <typename Duration>\n+        struct SampleAnalysis {\n+            std::vector<Duration> samples;\n+            Estimate<Duration> mean;\n+            Estimate<Duration> standard_deviation;\n+            OutlierClassification outliers;\n+            double outlier_variance;\n+\n+            template <typename Duration2>\n+            operator SampleAnalysis<Duration2>() const {\n+                std::vector<Duration2> samples2;\n+                samples2.reserve(samples.size());\n+                std::transform(samples.begin(), samples.end(), std::back_inserter(samples2), [](Duration d) { return Duration2(d); });\n+                return {\n+                    std::move(samples2),\n+                    mean,\n+                    standard_deviation,\n+                    outliers,\n+                    outlier_variance,\n+                };\n+            }\n+        };\n+    } // namespace Benchmark\n+} // namespace Catch\n+\n+#endif // TWOBLUECUBES_CATCH_BENCHMARK_RESULTS_HPP_INCLUDED\ndiff --git a/include/internal/benchmark/detail/catch_analyse.hpp b/include/internal/benchmark/detail/catch_analyse.hpp\nnew file mode 100644\n--- /dev/null\n+++ b/include/internal/benchmark/detail/catch_analyse.hpp\n@@ -0,0 +1,78 @@\n+/*\n+ *  Created by Joachim on 16/04/2019.\n+ *  Adapted from donated nonius code.\n+ *\n+ *  Distributed under the Boost Software License, Version 1.0. (See accompanying\n+ *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n+ */\n+\n+ // Run and analyse one benchmark\n+\n+#ifndef TWOBLUECUBES_CATCH_DETAIL_ANALYSE_HPP_INCLUDED\n+#define TWOBLUECUBES_CATCH_DETAIL_ANALYSE_HPP_INCLUDED\n+\n+#include \"../catch_clock.hpp\"\n+#include \"../catch_sample_analysis.hpp\"\n+#include \"catch_stats.hpp\"\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <vector>\n+\n+namespace Catch {\n+    namespace Benchmark {\n+        namespace Detail {\n+            template <typename Duration, typename Iterator>\n+            SampleAnalysis<Duration> analyse(const IConfig &cfg, Environment<Duration>, Iterator first, Iterator last) {\n+                if (!cfg.benchmarkNoAnalysis()) {\n+                    std::vector<double> samples;\n+                    samples.reserve(last - first);\n+                    std::transform(first, last, std::back_inserter(samples), [](Duration d) { return d.count(); });\n+\n+                    auto analysis = Catch::Benchmark::Detail::analyse_samples(cfg.benchmarkConfidenceInterval(), cfg.benchmarkResamples(), samples.begin(), samples.end());\n+                    auto outliers = Catch::Benchmark::Detail::classify_outliers(samples.begin(), samples.end());\n+\n+                    auto wrap_estimate = [](Estimate<double> e) {\n+                        return Estimate<Duration> {\n+                            Duration(e.point),\n+                                Duration(e.lower_bound),\n+                                Duration(e.upper_bound),\n+                                e.confidence_interval,\n+                        };\n+                    };\n+                    std::vector<Duration> samples2;\n+                    samples2.reserve(samples.size());\n+                    std::transform(samples.begin(), samples.end(), std::back_inserter(samples2), [](double d) { return Duration(d); });\n+                    return {\n+                        std::move(samples2),\n+                        wrap_estimate(analysis.mean),\n+                        wrap_estimate(analysis.standard_deviation),\n+                        outliers,\n+                        analysis.outlier_variance,\n+                    };\n+                } else {\n+                    std::vector<Duration> samples; \n+                    samples.reserve(last - first);\n+\n+                    Duration mean = Duration(0);\n+                    int i = 0;\n+                    for (auto it = first; it < last; ++it, ++i) {\n+                        samples.push_back(Duration(*it));\n+                        mean += Duration(*it);\n+                    }\n+                    mean /= i;\n+\n+                    return {\n+                        std::move(samples),\n+                        Estimate<Duration>{mean, mean, mean, 0.0},\n+                        Estimate<Duration>{Duration(0), Duration(0), Duration(0), 0.0},\n+                        OutlierClassification{},\n+                        0.0\n+                    };\n+                }\n+            }\n+        } // namespace Detail\n+    } // namespace Benchmark\n+} // namespace Catch\n+\n+#endif // TWOBLUECUBES_CATCH_DETAIL_ANALYSE_HPP_INCLUDED\ndiff --git a/include/internal/benchmark/detail/catch_benchmark_function.hpp b/include/internal/benchmark/detail/catch_benchmark_function.hpp\nnew file mode 100644\n--- /dev/null\n+++ b/include/internal/benchmark/detail/catch_benchmark_function.hpp\n@@ -0,0 +1,105 @@\n+    /*\n+ *  Created by Joachim on 16/04/2019.\n+ *  Adapted from donated nonius code.\n+ *\n+ *  Distributed under the Boost Software License, Version 1.0. (See accompanying\n+ *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n+ */\n+\n+ // Dumb std::function implementation for consistent call overhead\n+\n+#ifndef TWOBLUECUBES_CATCH_DETAIL_BENCHMARK_FUNCTION_HPP_INCLUDED\n+#define TWOBLUECUBES_CATCH_DETAIL_BENCHMARK_FUNCTION_HPP_INCLUDED\n+\n+#include \"../catch_chronometer.hpp\"\n+#include \"catch_complete_invoke.hpp\"\n+#include \"../../catch_meta.hpp\"\n+\n+#include <cassert>\n+#include <type_traits>\n+#include <utility>\n+#include <memory>\n+\n+namespace Catch {\n+    namespace Benchmark {\n+        namespace Detail {\n+            template <typename T>\n+            using Decay = typename std::decay<T>::type;\n+            template <typename T, typename U>\n+            struct is_related\n+                : std::is_same<Decay<T>, Decay<U>> {};\n+\n+            /// We need to reinvent std::function because every piece of code that might add overhead\n+            /// in a measurement context needs to have consistent performance characteristics so that we\n+            /// can account for it in the measurement.\n+            /// Implementations of std::function with optimizations that aren't always applicable, like\n+            /// small buffer optimizations, are not uncommon.\n+            /// This is effectively an implementation of std::function without any such optimizations;\n+            /// it may be slow, but it is consistently slow.\n+            struct BenchmarkFunction {\n+            private:\n+                struct callable {\n+                    virtual void call(Chronometer meter) const = 0;\n+                    virtual callable* clone() const = 0;\n+                    virtual ~callable() = default;\n+                };\n+                template <typename Fun>\n+                struct model : public callable {\n+                    model(Fun&& fun) : fun(std::move(fun)) {}\n+                    model(Fun const& fun) : fun(fun) {}\n+\n+                    model<Fun>* clone() const override { return new model<Fun>(*this); }\n+\n+                    void call(Chronometer meter) const override {\n+                        call(meter, is_callable<Fun(Chronometer)>());\n+                    }\n+                    void call(Chronometer meter, std::true_type) const {\n+                        fun(meter);\n+                    }\n+                    void call(Chronometer meter, std::false_type) const {\n+                        meter.measure(fun);\n+                    }\n+\n+                    Fun fun;\n+                };\n+\n+                struct do_nothing { void operator()() const {} };\n+\n+                template <typename T>\n+                BenchmarkFunction(model<T>* c) : f(c) {}\n+\n+            public:\n+                BenchmarkFunction()\n+                    : f(new model<do_nothing>{ {} }) {}\n+\n+                template <typename Fun,\n+                    typename std::enable_if<!is_related<Fun, BenchmarkFunction>::value, int>::type = 0>\n+                    BenchmarkFunction(Fun&& fun)\n+                    : f(new model<typename std::decay<Fun>::type>(std::forward<Fun>(fun))) {}\n+\n+                BenchmarkFunction(BenchmarkFunction&& that)\n+                    : f(std::move(that.f)) {}\n+\n+                BenchmarkFunction(BenchmarkFunction const& that)\n+                    : f(that.f->clone()) {}\n+\n+                BenchmarkFunction& operator=(BenchmarkFunction&& that) {\n+                    f = std::move(that.f);\n+                    return *this;\n+                }\n+\n+                BenchmarkFunction& operator=(BenchmarkFunction const& that) {\n+                    f.reset(that.f->clone());\n+                    return *this;\n+                }\n+\n+                void operator()(Chronometer meter) const { f->call(meter); }\n+\n+            private:\n+                std::unique_ptr<callable> f;\n+            };\n+        } // namespace Detail\n+    } // namespace Benchmark\n+} // namespace Catch\n+\n+#endif // TWOBLUECUBES_CATCH_DETAIL_BENCHMARK_FUNCTION_HPP_INCLUDED\ndiff --git a/include/internal/benchmark/detail/catch_complete_invoke.hpp b/include/internal/benchmark/detail/catch_complete_invoke.hpp\nnew file mode 100644\n--- /dev/null\n+++ b/include/internal/benchmark/detail/catch_complete_invoke.hpp\n@@ -0,0 +1,69 @@\n+/*\n+ *  Created by Joachim on 16/04/2019.\n+ *  Adapted from donated nonius code.\n+ *\n+ *  Distributed under the Boost Software License, Version 1.0. (See accompanying\n+ *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n+ */\n+\n+// Invoke with a special case for void\n+\n+#ifndef TWOBLUECUBES_CATCH_DETAIL_COMPLETE_INVOKE_HPP_INCLUDED\n+#define TWOBLUECUBES_CATCH_DETAIL_COMPLETE_INVOKE_HPP_INCLUDED\n+\n+#include \"../../catch_enforce.h\"\n+\n+#include <type_traits>\n+#include <utility>\n+\n+namespace Catch {\n+    namespace Benchmark {\n+        namespace Detail {\n+            template <typename T>\n+            struct CompleteType { using type = T; };\n+            template <>\n+            struct CompleteType<void> { struct type {}; };\n+\n+            template <typename T>\n+            using CompleteType_t = typename CompleteType<T>::type;\n+\n+            template <typename Result>\n+            struct CompleteInvoker {\n+                template <typename Fun, typename... Args>\n+                static Result invoke(Fun&& fun, Args&&... args) {\n+                    return std::forward<Fun>(fun)(std::forward<Args>(args)...);\n+                }\n+            };\n+            template <>\n+            struct CompleteInvoker<void> {\n+                template <typename Fun, typename... Args>\n+                static CompleteType_t<void> invoke(Fun&& fun, Args&&... args) {\n+                    std::forward<Fun>(fun)(std::forward<Args>(args)...);\n+                    return {};\n+                }\n+            };\n+            template <typename Sig>\n+            using ResultOf_t = typename std::result_of<Sig>::type;\n+\n+            // invoke and not return void :(\n+            template <typename Fun, typename... Args>\n+            CompleteType_t<ResultOf_t<Fun(Args...)>> complete_invoke(Fun&& fun, Args&&... args) {\n+                return CompleteInvoker<ResultOf_t<Fun(Args...)>>::invoke(std::forward<Fun>(fun), std::forward<Args>(args)...);\n+            }\n+\n+            const std::string benchmarkErrorMsg = \"a benchmark failed to run successfully\";\n+        } // namespace Detail\n+\n+        template <typename Fun>\n+        Detail::CompleteType_t<Detail::ResultOf_t<Fun()>> user_code(Fun&& fun) {\n+            CATCH_TRY{\n+                return Detail::complete_invoke(std::forward<Fun>(fun));\n+            } CATCH_CATCH_ALL{\n+                getResultCapture().benchmarkFailed(translateActiveException());\n+                CATCH_RUNTIME_ERROR(Detail::benchmarkErrorMsg);\n+            }\n+        }\n+    } // namespace Benchmark\n+} // namespace Catch\n+\n+#endif // TWOBLUECUBES_CATCH_DETAIL_COMPLETE_INVOKE_HPP_INCLUDED\ndiff --git a/include/internal/benchmark/detail/catch_estimate_clock.hpp b/include/internal/benchmark/detail/catch_estimate_clock.hpp\nnew file mode 100644\n--- /dev/null\n+++ b/include/internal/benchmark/detail/catch_estimate_clock.hpp\n@@ -0,0 +1,113 @@\n+/*\n+ *  Created by Joachim on 16/04/2019.\n+ *  Adapted from donated nonius code.\n+ *\n+ *  Distributed under the Boost Software License, Version 1.0. (See accompanying\n+ *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n+ */\n+\n+ // Environment measurement\n+\n+#ifndef TWOBLUECUBES_CATCH_DETAIL_ESTIMATE_CLOCK_HPP_INCLUDED\n+#define TWOBLUECUBES_CATCH_DETAIL_ESTIMATE_CLOCK_HPP_INCLUDED\n+\n+#include \"../catch_clock.hpp\"\n+#include \"../catch_environment.hpp\"\n+#include \"catch_stats.hpp\"\n+#include \"catch_measure.hpp\"\n+#include \"catch_run_for_at_least.hpp\"\n+#include \"../catch_clock.hpp\"\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <tuple>\n+#include <vector>\n+#include <cmath>\n+\n+namespace Catch {\n+    namespace Benchmark {\n+        namespace Detail {\n+            template <typename Clock>\n+            std::vector<double> resolution(int k) {\n+                std::vector<TimePoint<Clock>> times;\n+                times.reserve(k + 1);\n+                std::generate_n(std::back_inserter(times), k + 1, now<Clock>{});\n+\n+                std::vector<double> deltas;\n+                deltas.reserve(k);\n+                std::transform(std::next(times.begin()), times.end(), times.begin(),\n+                    std::back_inserter(deltas),\n+                    [](TimePoint<Clock> a, TimePoint<Clock> b) { return static_cast<double>((a - b).count()); });\n+\n+                return deltas;\n+            }\n+\n+            const auto warmup_iterations = 10000;\n+            const auto warmup_time = std::chrono::milliseconds(100);\n+            const auto minimum_ticks = 1000;\n+            const auto warmup_seed = 10000;\n+            const auto clock_resolution_estimation_time = std::chrono::milliseconds(500);\n+            const auto clock_cost_estimation_time_limit = std::chrono::seconds(1);\n+            const auto clock_cost_estimation_tick_limit = 100000;\n+            const auto clock_cost_estimation_time = std::chrono::milliseconds(10);\n+            const auto clock_cost_estimation_iterations = 10000;\n+\n+            template <typename Clock>\n+            int warmup() {\n+                return run_for_at_least<Clock>(std::chrono::duration_cast<ClockDuration<Clock>>(warmup_time), warmup_seed, &resolution<Clock>)\n+                    .iterations;\n+            }\n+            template <typename Clock>\n+            EnvironmentEstimate<FloatDuration<Clock>> estimate_clock_resolution(int iterations) {\n+                auto r = run_for_at_least<Clock>(std::chrono::duration_cast<ClockDuration<Clock>>(clock_resolution_estimation_time), iterations, &resolution<Clock>)\n+                    .result;\n+                return {\n+                    FloatDuration<Clock>(mean(r.begin(), r.end())),\n+                    classify_outliers(r.begin(), r.end()),\n+                };\n+            }\n+            template <typename Clock>\n+            EnvironmentEstimate<FloatDuration<Clock>> estimate_clock_cost(FloatDuration<Clock> resolution) {\n+                auto time_limit = std::min(resolution * clock_cost_estimation_tick_limit, FloatDuration<Clock>(clock_cost_estimation_time_limit));\n+                auto time_clock = [](int k) {\n+                    return Detail::measure<Clock>([k] {\n+                        for (int i = 0; i < k; ++i) {\n+                            volatile auto ignored = Clock::now();\n+                            (void)ignored;\n+                        }\n+                    }).elapsed;\n+                };\n+                time_clock(1);\n+                int iters = clock_cost_estimation_iterations;\n+                auto&& r = run_for_at_least<Clock>(std::chrono::duration_cast<ClockDuration<Clock>>(clock_cost_estimation_time), iters, time_clock);\n+                std::vector<double> times;\n+                int nsamples = static_cast<int>(std::ceil(time_limit / r.elapsed));\n+                times.reserve(nsamples);\n+                std::generate_n(std::back_inserter(times), nsamples, [time_clock, &r] {\n+                    return static_cast<double>((time_clock(r.iterations) / r.iterations).count());\n+                });\n+                return {\n+                    FloatDuration<Clock>(mean(times.begin(), times.end())),\n+                    classify_outliers(times.begin(), times.end()),\n+                };\n+            }\n+\n+            template <typename Clock>\n+            Environment<FloatDuration<Clock>> measure_environment() {\n+                static Environment<FloatDuration<Clock>>* env = nullptr;\n+                if (env) {\n+                    return *env;\n+                }\n+\n+                auto iters = Detail::warmup<Clock>();\n+                auto resolution = Detail::estimate_clock_resolution<Clock>(iters);\n+                auto cost = Detail::estimate_clock_cost<Clock>(resolution.mean);\n+\n+                env = new Environment<FloatDuration<Clock>>{ resolution, cost };\n+                return *env;\n+            }\n+        } // namespace Detail\n+    } // namespace Benchmark\n+} // namespace Catch\n+\n+#endif // TWOBLUECUBES_CATCH_DETAIL_ESTIMATE_CLOCK_HPP_INCLUDED\ndiff --git a/include/internal/benchmark/detail/catch_measure.hpp b/include/internal/benchmark/detail/catch_measure.hpp\nnew file mode 100644\n--- /dev/null\n+++ b/include/internal/benchmark/detail/catch_measure.hpp\n@@ -0,0 +1,35 @@\n+/*\n+ *  Created by Joachim on 16/04/2019.\n+ *  Adapted from donated nonius code.\n+ *\n+ *  Distributed under the Boost Software License, Version 1.0. (See accompanying\n+ *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n+ */\n+\n+// Measure\n+\n+#ifndef TWOBLUECUBES_CATCH_DETAIL_MEASURE_HPP_INCLUDED\n+#define TWOBLUECUBES_CATCH_DETAIL_MEASURE_HPP_INCLUDED\n+\n+#include \"../catch_clock.hpp\"\n+#include \"catch_complete_invoke.hpp\"\n+#include \"catch_timing.hpp\"\n+\n+#include <utility>\n+\n+namespace Catch {\n+    namespace Benchmark {\n+        namespace Detail {\n+            template <typename Clock, typename Fun, typename... Args>\n+            TimingOf<Clock, Fun(Args...)> measure(Fun&& fun, Args&&... args) {\n+                auto start = Clock::now();\n+                auto&& r = Detail::complete_invoke(fun, std::forward<Args>(args)...);\n+                auto end = Clock::now();\n+                auto delta = end - start;\n+                return { delta, std::forward<decltype(r)>(r), 1 };\n+            }\n+        } // namespace Detail\n+    } // namespace Benchmark\n+} // namespace Catch\n+\n+#endif // TWOBLUECUBES_CATCH_DETAIL_MEASURE_HPP_INCLUDED\ndiff --git a/include/internal/benchmark/detail/catch_repeat.hpp b/include/internal/benchmark/detail/catch_repeat.hpp\nnew file mode 100644\n--- /dev/null\n+++ b/include/internal/benchmark/detail/catch_repeat.hpp\n@@ -0,0 +1,37 @@\n+/*\n+ *  Created by Joachim on 16/04/2019.\n+ *  Adapted from donated nonius code.\n+ *\n+ *  Distributed under the Boost Software License, Version 1.0. (See accompanying\n+ *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n+ */\n+\n+// repeat algorithm\n+\n+#ifndef TWOBLUECUBES_CATCH_DETAIL_REPEAT_HPP_INCLUDED\n+#define TWOBLUECUBES_CATCH_DETAIL_REPEAT_HPP_INCLUDED\n+\n+#include <type_traits>\n+#include <utility>\n+\n+namespace Catch {\n+    namespace Benchmark {\n+        namespace Detail {\n+            template <typename Fun>\n+            struct repeater {\n+                void operator()(int k) const {\n+                    for (int i = 0; i < k; ++i) {\n+                        fun();\n+                    }\n+                }\n+                Fun fun;\n+            };\n+            template <typename Fun>\n+            repeater<typename std::decay<Fun>::type> repeat(Fun&& fun) {\n+                return { std::forward<Fun>(fun) };\n+            }\n+        } // namespace Detail\n+    } // namespace Benchmark\n+} // namespace Catch\n+\n+#endif // TWOBLUECUBES_CATCH_DETAIL_REPEAT_HPP_INCLUDED\ndiff --git a/include/internal/benchmark/detail/catch_run_for_at_least.hpp b/include/internal/benchmark/detail/catch_run_for_at_least.hpp\nnew file mode 100644\n--- /dev/null\n+++ b/include/internal/benchmark/detail/catch_run_for_at_least.hpp\n@@ -0,0 +1,65 @@\n+/*\n+ *  Created by Joachim on 16/04/2019.\n+ *  Adapted from donated nonius code.\n+ *\n+ *  Distributed under the Boost Software License, Version 1.0. (See accompanying\n+ *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n+ */\n+\n+// Run a function for a minimum amount of time\n+\n+#ifndef TWOBLUECUBES_CATCH_RUN_FOR_AT_LEAST_HPP_INCLUDED\n+#define TWOBLUECUBES_CATCH_RUN_FOR_AT_LEAST_HPP_INCLUDED\n+\n+#include \"../catch_clock.hpp\"\n+#include \"../catch_chronometer.hpp\"\n+#include \"catch_measure.hpp\"\n+#include \"catch_complete_invoke.hpp\"\n+#include \"catch_timing.hpp\"\n+#include \"../../catch_meta.hpp\"\n+\n+#include <utility>\n+#include <type_traits>\n+\n+namespace Catch {\n+    namespace Benchmark {\n+        namespace Detail {\n+            template <typename Clock, typename Fun>\n+            TimingOf<Clock, Fun(int)> measure_one(Fun&& fun, int iters, std::false_type) {\n+                return Detail::measure<Clock>(fun, iters);\n+            }\n+            template <typename Clock, typename Fun>\n+            TimingOf<Clock, Fun(Chronometer)> measure_one(Fun&& fun, int iters, std::true_type) {\n+                Detail::ChronometerModel<Clock> meter;\n+                auto&& result = Detail::complete_invoke(fun, Chronometer(meter, iters));\n+\n+                return { meter.elapsed(), std::move(result), iters };\n+            }\n+\n+            template <typename Clock, typename Fun>\n+            using run_for_at_least_argument_t = typename std::conditional<is_callable<Fun(Chronometer)>::value, Chronometer, int>::type;\n+\n+            struct optimized_away_error : std::exception {\n+                const char* what() const noexcept override {\n+                    return \"could not measure benchmark, maybe it was optimized away\";\n+                }\n+            };\n+\n+            template <typename Clock, typename Fun>\n+            TimingOf<Clock, Fun(run_for_at_least_argument_t<Clock, Fun>)> run_for_at_least(ClockDuration<Clock> how_long, int seed, Fun&& fun) {\n+                auto iters = seed;\n+                while (iters < (1 << 30)) {\n+                    auto&& Timing = measure_one<Clock>(fun, iters, is_callable<Fun(Chronometer)>());\n+\n+                    if (Timing.elapsed >= how_long) {\n+                        return { Timing.elapsed, std::move(Timing.result), iters };\n+                    }\n+                    iters *= 2;\n+                }\n+                throw optimized_away_error{};\n+            }\n+        } // namespace Detail\n+    } // namespace Benchmark\n+} // namespace Catch\n+\n+#endif // TWOBLUECUBES_CATCH_RUN_FOR_AT_LEAST_HPP_INCLUDED\ndiff --git a/include/internal/benchmark/detail/catch_stats.hpp b/include/internal/benchmark/detail/catch_stats.hpp\nnew file mode 100644\n--- /dev/null\n+++ b/include/internal/benchmark/detail/catch_stats.hpp\n@@ -0,0 +1,342 @@\n+/*\n+ *  Created by Joachim on 16/04/2019.\n+ *  Adapted from donated nonius code.\n+ *\n+ *  Distributed under the Boost Software License, Version 1.0. (See accompanying\n+ *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n+ */\n+\n+// Statistical analysis tools\n+\n+#ifndef TWOBLUECUBES_CATCH_DETAIL_ANALYSIS_HPP_INCLUDED\n+#define TWOBLUECUBES_CATCH_DETAIL_ANALYSIS_HPP_INCLUDED\n+\n+#include \"../catch_clock.hpp\"\n+#include \"../catch_estimate.hpp\"\n+#include \"../catch_outlier_classification.hpp\"\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <functional>\n+#include <iterator>\n+#include <vector>\n+#include <array>\n+#include <random>\n+#include <numeric>\n+#include <tuple>\n+#include <cmath>\n+#include <utility>\n+#include <cstddef>\n+\n+#ifdef CATCH_USE_ASYNC\n+#include <future>\n+#endif\n+\n+namespace Catch {\n+    namespace Benchmark {\n+        namespace Detail {\n+            using sample = std::vector<double>;\n+\n+            template <typename Iterator>\n+            double weighted_average_quantile(int k, int q, Iterator first, Iterator last) {\n+                auto count = last - first;\n+                double idx = (count - 1) * k / static_cast<double>(q);\n+                int j = static_cast<int>(idx);\n+                double g = idx - j;\n+                std::nth_element(first, first + j, last);\n+                auto xj = first[j];\n+                if (g == 0) return xj;\n+\n+                auto xj1 = *std::min_element(first + (j + 1), last);\n+                return xj + g * (xj1 - xj);\n+            }\n+\n+            template <typename Iterator>\n+            OutlierClassification classify_outliers(Iterator first, Iterator last) {\n+                std::vector<double> copy(first, last);\n+\n+                auto q1 = weighted_average_quantile(1, 4, copy.begin(), copy.end());\n+                auto q3 = weighted_average_quantile(3, 4, copy.begin(), copy.end());\n+                auto iqr = q3 - q1;\n+                auto los = q1 - (iqr * 3.);\n+                auto lom = q1 - (iqr * 1.5);\n+                auto him = q3 + (iqr * 1.5);\n+                auto his = q3 + (iqr * 3.);\n+\n+                OutlierClassification o;\n+                for (; first != last; ++first) {\n+                    auto&& t = *first;\n+                    if (t < los) ++o.low_severe;\n+                    else if (t < lom) ++o.low_mild;\n+                    else if (t > his) ++o.high_severe;\n+                    else if (t > him) ++o.high_mild;\n+                    ++o.samples_seen;\n+                }\n+                return o;\n+            }\n+\n+            template <typename Iterator>\n+            double mean(Iterator first, Iterator last) {\n+                auto count = last - first;\n+                double sum = std::accumulate(first, last, 0.);\n+                return sum / count;\n+            }\n+\n+            template <typename Iterator>\n+            double standard_deviation(Iterator first, Iterator last) {\n+                auto m = mean(first, last);\n+                double variance = std::accumulate(first, last, 0., [m](double a, double b) {\n+                    double diff = b - m;\n+                    return a + diff * diff;\n+                }) / (last - first);\n+                return std::sqrt(variance);\n+            }\n+\n+            template <typename URng, typename Iterator, typename Estimator>\n+            sample resample(URng& rng, int resamples, Iterator first, Iterator last, Estimator& estimator) {\n+                auto n = last - first;\n+                std::uniform_int_distribution<decltype(n)> dist(0, n - 1);\n+\n+                sample out;\n+                out.reserve(resamples);\n+                std::generate_n(std::back_inserter(out), resamples, [n, first, &estimator, &dist, &rng] {\n+                    std::vector<double> resampled;\n+                    resampled.reserve(n);\n+                    std::generate_n(std::back_inserter(resampled), n, [first, &dist, &rng] { return first[dist(rng)]; });\n+                    return estimator(resampled.begin(), resampled.end());\n+                });\n+                std::sort(out.begin(), out.end());\n+                return out;\n+            }\n+\n+            template <typename Estimator, typename Iterator>\n+            sample jackknife(Estimator&& estimator, Iterator first, Iterator last) {\n+                auto n = last - first;\n+                auto second = std::next(first);\n+                sample results;\n+                results.reserve(n);\n+\n+                for (auto it = first; it != last; ++it) {\n+                    std::iter_swap(it, first);\n+                    results.push_back(estimator(second, last));\n+                }\n+\n+                return results;\n+            }\n+\n+            inline double normal_cdf(double x) {\n+                return std::erfc(-x / std::sqrt(2.0)) / 2.0;\n+            }\n+\n+            inline double erf_inv(double x) {\n+                // Code accompanying the article \"Approximating the erfinv function\" in GPU Computing Gems, Volume 2\n+                double w, p;\n+\n+                w = -log((1.0 - x)*(1.0 + x));\n+\n+                if (w < 6.250000) {\n+                    w = w - 3.125000;\n+                    p = -3.6444120640178196996e-21;\n+                    p = -1.685059138182016589e-19 + p * w;\n+                    p = 1.2858480715256400167e-18 + p * w;\n+                    p = 1.115787767802518096e-17 + p * w;\n+                    p = -1.333171662854620906e-16 + p * w;\n+                    p = 2.0972767875968561637e-17 + p * w;\n+                    p = 6.6376381343583238325e-15 + p * w;\n+                    p = -4.0545662729752068639e-14 + p * w;\n+                    p = -8.1519341976054721522e-14 + p * w;\n+                    p = 2.6335093153082322977e-12 + p * w;\n+                    p = -1.2975133253453532498e-11 + p * w;\n+                    p = -5.4154120542946279317e-11 + p * w;\n+                    p = 1.051212273321532285e-09 + p * w;\n+                    p = -4.1126339803469836976e-09 + p * w;\n+                    p = -2.9070369957882005086e-08 + p * w;\n+                    p = 4.2347877827932403518e-07 + p * w;\n+                    p = -1.3654692000834678645e-06 + p * w;\n+                    p = -1.3882523362786468719e-05 + p * w;\n+                    p = 0.0001867342080340571352 + p * w;\n+                    p = -0.00074070253416626697512 + p * w;\n+                    p = -0.0060336708714301490533 + p * w;\n+                    p = 0.24015818242558961693 + p * w;\n+                    p = 1.6536545626831027356 + p * w;\n+                } else if (w < 16.000000) {\n+                    w = sqrt(w) - 3.250000;\n+                    p = 2.2137376921775787049e-09;\n+                    p = 9.0756561938885390979e-08 + p * w;\n+                    p = -2.7517406297064545428e-07 + p * w;\n+                    p = 1.8239629214389227755e-08 + p * w;\n+                    p = 1.5027403968909827627e-06 + p * w;\n+                    p = -4.013867526981545969e-06 + p * w;\n+                    p = 2.9234449089955446044e-06 + p * w;\n+                    p = 1.2475304481671778723e-05 + p * w;\n+                    p = -4.7318229009055733981e-05 + p * w;\n+                    p = 6.8284851459573175448e-05 + p * w;\n+                    p = 2.4031110387097893999e-05 + p * w;\n+                    p = -0.0003550375203628474796 + p * w;\n+                    p = 0.00095328937973738049703 + p * w;\n+                    p = -0.0016882755560235047313 + p * w;\n+                    p = 0.0024914420961078508066 + p * w;\n+                    p = -0.0037512085075692412107 + p * w;\n+                    p = 0.005370914553590063617 + p * w;\n+                    p = 1.0052589676941592334 + p * w;\n+                    p = 3.0838856104922207635 + p * w;\n+                } else {\n+                    w = sqrt(w) - 5.000000;\n+                    p = -2.7109920616438573243e-11;\n+                    p = -2.5556418169965252055e-10 + p * w;\n+                    p = 1.5076572693500548083e-09 + p * w;\n+                    p = -3.7894654401267369937e-09 + p * w;\n+                    p = 7.6157012080783393804e-09 + p * w;\n+                    p = -1.4960026627149240478e-08 + p * w;\n+                    p = 2.9147953450901080826e-08 + p * w;\n+                    p = -6.7711997758452339498e-08 + p * w;\n+                    p = 2.2900482228026654717e-07 + p * w;\n+                    p = -9.9298272942317002539e-07 + p * w;\n+                    p = 4.5260625972231537039e-06 + p * w;\n+                    p = -1.9681778105531670567e-05 + p * w;\n+                    p = 7.5995277030017761139e-05 + p * w;\n+                    p = -0.00021503011930044477347 + p * w;\n+                    p = -0.00013871931833623122026 + p * w;\n+                    p = 1.0103004648645343977 + p * w;\n+                    p = 4.8499064014085844221 + p * w;\n+                }\n+                return p * x;\n+            }\n+\n+            inline double erfc_inv(double x) {\n+                return erf_inv(1.0 - x);\n+            }\n+\n+            inline double normal_quantile(double p) {\n+                static const double ROOT_TWO = std::sqrt(2.0);\n+\n+                double result = 0.0;\n+                assert(p >= 0 && p <= 1);\n+                if (p < 0 || p > 1) {\n+                    return result;\n+                }\n+\n+                result = -erfc_inv(2.0 * p);\n+                // result *= normal distribution standard deviation (1.0) * sqrt(2)\n+                result *= /*sd * */ ROOT_TWO;\n+                // result += normal disttribution mean (0)\n+                return result;\n+            }\n+\n+            template <typename Iterator, typename Estimator>\n+            Estimate<double> bootstrap(double confidence_level, Iterator first, Iterator last, sample const& resample, Estimator&& estimator) {\n+                auto n_samples = last - first;\n+\n+                double point = estimator(first, last);\n+                // Degenerate case with a single sample\n+                if (n_samples == 1) return { point, point, point, confidence_level };\n+\n+                sample jack = jackknife(estimator, first, last);\n+                double jack_mean = mean(jack.begin(), jack.end());\n+                double sum_squares, sum_cubes;\n+                std::tie(sum_squares, sum_cubes) = std::accumulate(jack.begin(), jack.end(), std::make_pair(0., 0.), [jack_mean](std::pair<double, double> sqcb, double x) -> std::pair<double, double> {\n+                    auto d = jack_mean - x;\n+                    auto d2 = d * d;\n+                    auto d3 = d2 * d;\n+                    return { sqcb.first + d2, sqcb.second + d3 };\n+                });\n+\n+                double accel = sum_cubes / (6 * std::pow(sum_squares, 1.5));\n+                int n = static_cast<int>(resample.size());\n+                double prob_n = std::count_if(resample.begin(), resample.end(), [point](double x) { return x < point; }) / (double)n;\n+                // degenerate case with uniform samples\n+                if (prob_n == 0) return { point, point, point, confidence_level };\n+\n+                double bias = normal_quantile(prob_n);\n+                double z1 = normal_quantile((1. - confidence_level) / 2.);\n+\n+                auto cumn = [n](double x) -> int {\n+                    return std::lround(normal_cdf(x) * n); };\n+                auto a = [bias, accel](double b) { return bias + b / (1. - accel * b); };\n+                double b1 = bias + z1;\n+                double b2 = bias - z1;\n+                double a1 = a(b1);\n+                double a2 = a(b2);\n+                auto lo = std::max(cumn(a1), 0);\n+                auto hi = std::min(cumn(a2), n - 1);\n+\n+                return { point, resample[lo], resample[hi], confidence_level };\n+            }\n+\n+            inline double outlier_variance(Estimate<double> mean, Estimate<double> stddev, int n) {\n+                double sb = stddev.point;\n+                double mn = mean.point / n;\n+                double mg_min = mn / 2.;\n+                double sg = std::min(mg_min / 4., sb / std::sqrt(n));\n+                double sg2 = sg * sg;\n+                double sb2 = sb * sb;\n+\n+                auto c_max = [n, mn, sb2, sg2](double x) -> double {\n+                    double k = mn - x;\n+                    double d = k * k;\n+                    double nd = n * d;\n+                    double k0 = -n * nd;\n+                    double k1 = sb2 - n * sg2 + nd;\n+                    double det = k1 * k1 - 4 * sg2 * k0;\n+                    return (int)(-2. * k0 / (k1 + std::sqrt(det)));\n+                };\n+\n+                auto var_out = [n, sb2, sg2](double c) {\n+                    double nc = n - c;\n+                    return (nc / n) * (sb2 - nc * sg2);\n+                };\n+\n+                return std::min(var_out(1), var_out(std::min(c_max(0.), c_max(mg_min)))) / sb2;\n+            }\n+\n+            struct bootstrap_analysis {\n+                Estimate<double> mean;\n+                Estimate<double> standard_deviation;\n+                double outlier_variance;\n+            };\n+\n+            template <typename Iterator>\n+            bootstrap_analysis analyse_samples(double confidence_level, int n_resamples, Iterator first, Iterator last) {\n+                static std::random_device entropy;\n+\n+                auto n = static_cast<int>(last - first); // seriously, one can't use integral types without hell in C++\n+\n+                auto mean = &Detail::mean<Iterator>;\n+                auto stddev = &Detail::standard_deviation<Iterator>;\n+\n+#ifdef CATCH_USE_ASYNC\n+                auto Estimate = [=](double(*f)(Iterator, Iterator)) {\n+                    auto seed = entropy();\n+                    return std::async(std::launch::async, [=] {\n+                        std::mt19937 rng(seed);\n+                        auto resampled = resample(rng, n_resamples, first, last, f);\n+                        return bootstrap(confidence_level, first, last, resampled, f);\n+                    });\n+                };\n+\n+                auto mean_future = Estimate(mean);\n+                auto stddev_future = Estimate(stddev);\n+\n+                auto mean_estimate = mean_future.get();\n+                auto stddev_estimate = stddev_future.get();\n+#else\n+                auto Estimate = [=](double(*f)(Iterator, Iterator)) {\n+                    auto seed = entropy();\n+                    std::mt19937 rng(seed);\n+                    auto resampled = resample(rng, n_resamples, first, last, f);\n+                    return bootstrap(confidence_level, first, last, resampled, f);\n+                };\n+\n+                auto mean_estimate = Estimate(mean);\n+                auto stddev_estimate = Estimate(stddev);\n+#endif // CATCH_USE_ASYNC\n+\n+                double outlier_variance = Detail::outlier_variance(mean_estimate, stddev_estimate, n);\n+\n+                return { mean_estimate, stddev_estimate, outlier_variance };\n+            }\n+        } // namespace Detail\n+    } // namespace Benchmark\n+} // namespace Catch\n+\n+#endif // TWOBLUECUBES_CATCH_DETAIL_ANALYSIS_HPP_INCLUDED\ndiff --git a/include/internal/benchmark/detail/catch_timing.hpp b/include/internal/benchmark/detail/catch_timing.hpp\nnew file mode 100644\n--- /dev/null\n+++ b/include/internal/benchmark/detail/catch_timing.hpp\n@@ -0,0 +1,33 @@\n+/*\n+ *  Created by Joachim on 16/04/2019.\n+ *  Adapted from donated nonius code.\n+ *\n+ *  Distributed under the Boost Software License, Version 1.0. (See accompanying\n+ *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n+ */\n+\n+// Timing\n+\n+#ifndef TWOBLUECUBES_CATCH_DETAIL_TIMING_HPP_INCLUDED\n+#define TWOBLUECUBES_CATCH_DETAIL_TIMING_HPP_INCLUDED\n+\n+#include \"../catch_clock.hpp\"\n+#include \"catch_complete_invoke.hpp\"\n+\n+#include <tuple>\n+#include <type_traits>\n+\n+namespace Catch {\n+    namespace Benchmark {\n+        template <typename Duration, typename Result>\n+        struct Timing {\n+            Duration elapsed;\n+            Result result;\n+            int iterations;\n+        };\n+        template <typename Clock, typename Sig>\n+        using TimingOf = Timing<ClockDuration<Clock>, Detail::CompleteType_t<Detail::ResultOf_t<Sig>>>;\n+    } // namespace Benchmark\n+} // namespace Catch\n+\n+#endif // TWOBLUECUBES_CATCH_DETAIL_TIMING_HPP_INCLUDED\ndiff --git a/include/internal/catch_benchmark.cpp b/include/internal/catch_benchmark.cpp\ndeleted file mode 100644\n--- a/include/internal/catch_benchmark.cpp\n+++ /dev/null\n@@ -1,36 +0,0 @@\n-/*\n- *  Created by Phil on 04/07/2017.\n- *  Copyright 2017 Two Blue Cubes Ltd. All rights reserved.\n- *\n- *  Distributed under the Boost Software License, Version 1.0. (See accompanying\n- *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n- */\n-\n-#include \"catch_benchmark.h\"\n-#include \"catch_capture.hpp\"\n-#include \"catch_interfaces_reporter.h\"\n-#include \"catch_context.h\"\n-\n-namespace Catch {\n-\n-    auto BenchmarkLooper::getResolution() -> uint64_t {\n-        return getEstimatedClockResolution() * getCurrentContext().getConfig()->benchmarkResolutionMultiple();\n-    }\n-\n-    void BenchmarkLooper::reportStart() {\n-        getResultCapture().benchmarkStarting( { m_name } );\n-    }\n-    auto BenchmarkLooper::needsMoreIterations() -> bool {\n-        auto elapsed = m_timer.getElapsedNanoseconds();\n-\n-        // Exponentially increasing iterations until we're confident in our timer resolution\n-        if( elapsed < m_resolution ) {\n-            m_iterationsToRun *= 10;\n-            return true;\n-        }\n-\n-        getResultCapture().benchmarkEnded( { { m_name }, m_count, elapsed } );\n-        return false;\n-    }\n-\n-} // end namespace Catch\ndiff --git a/include/internal/catch_benchmark.h b/include/internal/catch_benchmark.h\ndeleted file mode 100644\n--- a/include/internal/catch_benchmark.h\n+++ /dev/null\n@@ -1,57 +0,0 @@\n-/*\n- *  Created by Phil on 04/07/2017.\n- *  Copyright 2017 Two Blue Cubes Ltd. All rights reserved.\n- *\n- *  Distributed under the Boost Software License, Version 1.0. (See accompanying\n- *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n- */\n-#ifndef TWOBLUECUBES_CATCH_BENCHMARK_H_INCLUDED\n-#define TWOBLUECUBES_CATCH_BENCHMARK_H_INCLUDED\n-\n-#include \"catch_stringref.h\"\n-#include \"catch_timer.h\"\n-\n-#include <cstdint>\n-#include <string>\n-\n-namespace Catch {\n-\n-    class BenchmarkLooper {\n-\n-        std::string m_name;\n-        std::size_t m_count = 0;\n-        std::size_t m_iterationsToRun = 1;\n-        uint64_t m_resolution;\n-        Timer m_timer;\n-\n-        static auto getResolution() -> uint64_t;\n-    public:\n-        // Keep most of this inline as it's on the code path that is being timed\n-        BenchmarkLooper( StringRef name )\n-        :   m_name( name ),\n-            m_resolution( getResolution() )\n-        {\n-            reportStart();\n-            m_timer.start();\n-        }\n-\n-        explicit operator bool() {\n-            if( m_count < m_iterationsToRun )\n-                return true;\n-            return needsMoreIterations();\n-        }\n-\n-        void increment() {\n-            ++m_count;\n-        }\n-\n-        void reportStart();\n-        auto needsMoreIterations() -> bool;\n-    };\n-\n-} // end namespace Catch\n-\n-#define BENCHMARK( name ) \\\n-    for( Catch::BenchmarkLooper looper( name ); looper; looper.increment() )\n-\n-#endif // TWOBLUECUBES_CATCH_BENCHMARK_H_INCLUDED\ndiff --git a/include/internal/catch_commandline.cpp b/include/internal/catch_commandline.cpp\n--- a/include/internal/catch_commandline.cpp\n+++ b/include/internal/catch_commandline.cpp\n@@ -196,11 +196,19 @@ namespace Catch {\n             | Opt( setWaitForKeypress, \"start|exit|both\" )\n                 [\"--wait-for-keypress\"]\n                 ( \"waits for a keypress before exiting\" )\n-            | Opt( config.benchmarkResolutionMultiple, \"multiplier\" )\n-                [\"--benchmark-resolution-multiple\"]\n-                ( \"multiple of clock resolution to run benchmarks\" )\n-\n-            | Arg( config.testsOrTags, \"test name|pattern|tags\" )\n+            | Opt( config.benchmarkSamples, \"samples\" )\n+                [\"--benchmark-samples\"]\n+                ( \"number of samples to collect (default: 100)\" )\n+            | Opt( config.benchmarkResamples, \"resamples\" )\n+                [\"--benchmark-resamples\"]\n+                ( \"number of resamples for the bootstrap (default: 100000)\" )\n+            | Opt( config.benchmarkConfidenceInterval, \"confidence interval\" )\n+                [\"--benchmark-confidence-interval\"]\n+                ( \"confidence interval for the bootstrap (between 0 and 1, default: 0.95)\" )\n+            | Opt( config.benchmarkNoAnalysis )\n+                [\"--benchmark-no-analysis\"]\n+                ( \"perform only measurements; do not perform any analysis\" )\n+\t\t\t| Arg( config.testsOrTags, \"test name|pattern|tags\" )\n                 ( \"which test or tests to use\" );\n \n         return cli;\ndiff --git a/include/internal/catch_compiler_capabilities.h b/include/internal/catch_compiler_capabilities.h\n--- a/include/internal/catch_compiler_capabilities.h\n+++ b/include/internal/catch_compiler_capabilities.h\n@@ -118,9 +118,9 @@\n // some versions of cygwin (most) do not support std::to_string. Use the libstd check. \n // https://gcc.gnu.org/onlinedocs/gcc-4.8.2/libstdc++/api/a01053_source.html line 2812-2813\n # if !((__cplusplus >= 201103L) && defined(_GLIBCXX_USE_C99) \\\n-\t       && !defined(_GLIBCXX_HAVE_BROKEN_VSWPRINTF))\n+           && !defined(_GLIBCXX_HAVE_BROKEN_VSWPRINTF))\n \n-#\tdefine CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING\n+#    define CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING\n \n # endif\n #endif // __CYGWIN__\n@@ -148,7 +148,11 @@\n #  if !defined(_MSVC_TRADITIONAL) || (defined(_MSVC_TRADITIONAL) && _MSVC_TRADITIONAL)\n #    define CATCH_INTERNAL_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR\n #  endif\n+#endif // _MSC_VER\n \n+#if defined(_REENTRANT) || defined(_MSC_VER)\n+// Enable async processing, as -pthread is specified or no additional linking is required\n+# define CATCH_USE_ASYNC\n #endif // _MSC_VER\n \n ////////////////////////////////////////////////////////////////////////////////\ndiff --git a/include/internal/catch_config.cpp b/include/internal/catch_config.cpp\n--- a/include/internal/catch_config.cpp\n+++ b/include/internal/catch_config.cpp\n@@ -32,7 +32,7 @@ namespace Catch {\n     bool Config::listTestNamesOnly() const  { return m_data.listTestNamesOnly; }\n     bool Config::listTags() const           { return m_data.listTags; }\n     bool Config::listReporters() const      { return m_data.listReporters; }\n-\n+\t\n     std::string Config::getProcessName() const { return m_data.processName; }\n     std::string const& Config::getReporterName() const { return m_data.reporterName; }\n \n@@ -54,13 +54,17 @@ namespace Catch {\n     ShowDurations::OrNot Config::showDurations() const { return m_data.showDurations; }\n     RunTests::InWhatOrder Config::runOrder() const     { return m_data.runOrder; }\n     unsigned int Config::rngSeed() const               { return m_data.rngSeed; }\n-    int Config::benchmarkResolutionMultiple() const    { return m_data.benchmarkResolutionMultiple; }\n     UseColour::YesOrNo Config::useColour() const       { return m_data.useColour; }\n     bool Config::shouldDebugBreak() const              { return m_data.shouldDebugBreak; }\n     int Config::abortAfter() const                     { return m_data.abortAfter; }\n     bool Config::showInvisibles() const                { return m_data.showInvisibles; }\n     Verbosity Config::verbosity() const                { return m_data.verbosity; }\n \n+    bool Config::benchmarkNoAnalysis() const           { return m_data.benchmarkNoAnalysis; }\n+    int Config::benchmarkSamples() const               { return m_data.benchmarkSamples; }\n+    double Config::benchmarkConfidenceInterval() const { return m_data.benchmarkConfidenceInterval; }\n+    unsigned int Config::benchmarkResamples() const    { return m_data.benchmarkResamples; }\n+\n     IStream const* Config::openStream() {\n         return Catch::makeStream(m_data.outputFilename);\n     }\ndiff --git a/include/internal/catch_config.hpp b/include/internal/catch_config.hpp\n--- a/include/internal/catch_config.hpp\n+++ b/include/internal/catch_config.hpp\n@@ -42,7 +42,11 @@ namespace Catch {\n \n         int abortAfter = -1;\n         unsigned int rngSeed = 0;\n-        int benchmarkResolutionMultiple = 100;\n+\n+        bool benchmarkNoAnalysis = false;\n+        unsigned int benchmarkSamples = 100;\n+        double benchmarkConfidenceInterval = 0.95;\n+        unsigned int benchmarkResamples = 100000;\n \n         Verbosity verbosity = Verbosity::Normal;\n         WarnAbout::What warnings = WarnAbout::Nothing;\n@@ -100,12 +104,15 @@ namespace Catch {\n         ShowDurations::OrNot showDurations() const override;\n         RunTests::InWhatOrder runOrder() const override;\n         unsigned int rngSeed() const override;\n-        int benchmarkResolutionMultiple() const override;\n         UseColour::YesOrNo useColour() const override;\n         bool shouldDebugBreak() const override;\n         int abortAfter() const override;\n         bool showInvisibles() const override;\n         Verbosity verbosity() const override;\n+        bool benchmarkNoAnalysis() const override;\n+        int benchmarkSamples() const override;\n+        double benchmarkConfidenceInterval() const override;\n+        unsigned int benchmarkResamples() const override;\n \n     private:\n \ndiff --git a/include/internal/catch_interfaces_capture.h b/include/internal/catch_interfaces_capture.h\n--- a/include/internal/catch_interfaces_capture.h\n+++ b/include/internal/catch_interfaces_capture.h\n@@ -9,6 +9,7 @@\n #define TWOBLUECUBES_CATCH_INTERFACES_CAPTURE_H_INCLUDED\n \n #include <string>\n+#include <chrono>\n \n #include \"catch_stringref.h\"\n #include \"catch_result_type.h\"\n@@ -22,14 +23,18 @@ namespace Catch {\n     struct MessageInfo;\n     struct MessageBuilder;\n     struct Counts;\n-    struct BenchmarkInfo;\n-    struct BenchmarkStats;\n     struct AssertionReaction;\n     struct SourceLineInfo;\n \n     struct ITransientExpression;\n     struct IGeneratorTracker;\n \n+#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)\n+    struct BenchmarkInfo;\n+    template <typename Duration = std::chrono::duration<double, std::nano>>\n+    struct BenchmarkStats;\n+#endif // CATCH_CONFIG_ENABLE_BENCHMARKING\n+\n     struct IResultCapture {\n \n         virtual ~IResultCapture();\n@@ -41,8 +46,12 @@ namespace Catch {\n \n         virtual auto acquireGeneratorTracker( SourceLineInfo const& lineInfo ) -> IGeneratorTracker& = 0;\n \n+#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)\n+        virtual void benchmarkPreparing( std::string const& name ) = 0;\n         virtual void benchmarkStarting( BenchmarkInfo const& info ) = 0;\n-        virtual void benchmarkEnded( BenchmarkStats const& stats ) = 0;\n+        virtual void benchmarkEnded( BenchmarkStats<> const& stats ) = 0;\n+        virtual void benchmarkFailed( std::string const& error ) = 0;\n+#endif // CATCH_CONFIG_ENABLE_BENCHMARKING\n \n         virtual void pushScopedMessage( MessageInfo const& message ) = 0;\n         virtual void popScopedMessage( MessageInfo const& message ) = 0;\ndiff --git a/include/internal/catch_interfaces_config.h b/include/internal/catch_interfaces_config.h\n--- a/include/internal/catch_interfaces_config.h\n+++ b/include/internal/catch_interfaces_config.h\n@@ -9,6 +9,7 @@\n #define TWOBLUECUBES_CATCH_INTERFACES_CONFIG_H_INCLUDED\n \n #include \"catch_common.h\"\n+#include \"catch_option.hpp\"\n \n #include <iosfwd>\n #include <string>\n@@ -50,7 +51,7 @@ namespace Catch {\n         BeforeExit = 2,\n         BeforeStartAndExit = BeforeStart | BeforeExit\n     }; };\n-\n+    \n     class TestSpec;\n \n     struct IConfig : NonCopyable {\n@@ -72,10 +73,14 @@ namespace Catch {\n         virtual std::vector<std::string> const& getTestsOrTags() const = 0;\n         virtual RunTests::InWhatOrder runOrder() const = 0;\n         virtual unsigned int rngSeed() const = 0;\n-        virtual int benchmarkResolutionMultiple() const = 0;\n         virtual UseColour::YesOrNo useColour() const = 0;\n         virtual std::vector<std::string> const& getSectionsToRun() const = 0;\n         virtual Verbosity verbosity() const = 0;\n+\n+        virtual bool benchmarkNoAnalysis() const = 0;\n+        virtual int benchmarkSamples() const = 0;\n+        virtual double benchmarkConfidenceInterval() const = 0;\n+        virtual unsigned int benchmarkResamples() const = 0;\n     };\n \n     using IConfigPtr = std::shared_ptr<IConfig const>;\ndiff --git a/include/internal/catch_interfaces_reporter.h b/include/internal/catch_interfaces_reporter.h\n--- a/include/internal/catch_interfaces_reporter.h\n+++ b/include/internal/catch_interfaces_reporter.h\n@@ -18,12 +18,18 @@\n #include \"catch_option.hpp\"\n #include \"catch_stringref.h\"\n \n+#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)\n+#include \"benchmark/catch_estimate.hpp\"\n+#include \"benchmark/catch_outlier_classification.hpp\"\n+#endif // CATCH_CONFIG_ENABLE_BENCHMARKING\n+\n \n #include <string>\n #include <iosfwd>\n #include <map>\n #include <set>\n #include <memory>\n+#include <algorithm>\n \n namespace Catch {\n \n@@ -159,14 +165,43 @@ namespace Catch {\n         bool aborting;\n     };\n \n+#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)\n     struct BenchmarkInfo {\n         std::string name;\n+        double estimatedDuration;\n+        int iterations;\n+        int samples;\n+        unsigned int resamples;\n+        double clockResolution;\n+        double clockCost;\n     };\n+\n+    template <class Duration>\n     struct BenchmarkStats {\n         BenchmarkInfo info;\n-        std::size_t iterations;\n-        uint64_t elapsedTimeInNanoseconds;\n+\n+        std::vector<Duration> samples;\n+        Benchmark::Estimate<Duration> mean;\n+        Benchmark::Estimate<Duration> standardDeviation;\n+        Benchmark::OutlierClassification outliers;\n+        double outlierVariance;\n+\n+        template <typename Duration2>\n+        operator BenchmarkStats<Duration2>() const {\n+            std::vector<Duration2> samples2;\n+            samples2.reserve(samples.size());\n+            std::transform(samples.begin(), samples.end(), std::back_inserter(samples2), [](Duration d) { return Duration2(d); });\n+            return {\n+                info,\n+                std::move(samples2),\n+                mean,\n+                standardDeviation,\n+                outliers,\n+                outlierVariance,\n+            };\n+        }\n     };\n+#endif // CATCH_CONFIG_ENABLE_BENCHMARKING\n \n     struct IStreamingReporter {\n         virtual ~IStreamingReporter() = default;\n@@ -185,17 +220,18 @@ namespace Catch {\n         virtual void testCaseStarting( TestCaseInfo const& testInfo ) = 0;\n         virtual void sectionStarting( SectionInfo const& sectionInfo ) = 0;\n \n-        // *** experimental ***\n+#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)\n+        virtual void benchmarkPreparing( std::string const& ) {}\n         virtual void benchmarkStarting( BenchmarkInfo const& ) {}\n+        virtual void benchmarkEnded( BenchmarkStats<> const& ) {}\n+        virtual void benchmarkFailed( std::string const& ) {}\n+#endif // CATCH_CONFIG_ENABLE_BENCHMARKING\n \n         virtual void assertionStarting( AssertionInfo const& assertionInfo ) = 0;\n \n         // The return value indicates if the messages buffer should be cleared:\n         virtual bool assertionEnded( AssertionStats const& assertionStats ) = 0;\n \n-        // *** experimental ***\n-        virtual void benchmarkEnded( BenchmarkStats const& ) {}\n-\n         virtual void sectionEnded( SectionStats const& sectionStats ) = 0;\n         virtual void testCaseEnded( TestCaseStats const& testCaseStats ) = 0;\n         virtual void testGroupEnded( TestGroupStats const& testGroupStats ) = 0;\ndiff --git a/include/internal/catch_meta.hpp b/include/internal/catch_meta.hpp\n--- a/include/internal/catch_meta.hpp\n+++ b/include/internal/catch_meta.hpp\n@@ -12,8 +12,23 @@\n #include <type_traits>\n \n namespace Catch {\n-    template<typename T>\n-    struct always_false : std::false_type {};\n+template<typename T>\n+struct always_false : std::false_type {};\n+\n+template <typename> struct true_given : std::true_type {};\n+struct is_callable_tester {\n+    template <typename Fun, typename... Args>\n+    true_given<decltype(std::declval<Fun>()(std::declval<Args>()...))> static test(int);\n+    template <typename...>\n+    std::false_type static test(...);\n+};\n+\n+template <typename T>\n+struct is_callable;\n+\n+template <typename Fun, typename... Args>\n+struct is_callable<Fun(Args...)> : decltype(is_callable_tester::test<Fun, Args...>(0)) {};\n+\n } // namespace Catch\n \n #endif // TWOBLUECUBES_CATCH_META_HPP_INCLUDED\ndiff --git a/include/internal/catch_run_context.cpp b/include/internal/catch_run_context.cpp\n--- a/include/internal/catch_run_context.cpp\n+++ b/include/internal/catch_run_context.cpp\n@@ -230,12 +230,21 @@ namespace Catch {\n \n         m_unfinishedSections.push_back(endInfo);\n     }\n+\t\n+#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)\n+    void RunContext::benchmarkPreparing(std::string const& name) {\n+\t\tm_reporter->benchmarkPreparing(name);\n+\t}\n     void RunContext::benchmarkStarting( BenchmarkInfo const& info ) {\n         m_reporter->benchmarkStarting( info );\n     }\n-    void RunContext::benchmarkEnded( BenchmarkStats const& stats ) {\n+    void RunContext::benchmarkEnded( BenchmarkStats<> const& stats ) {\n         m_reporter->benchmarkEnded( stats );\n     }\n+\tvoid RunContext::benchmarkFailed(std::string const & error) {\n+\t\tm_reporter->benchmarkFailed(error);\n+\t}\n+#endif // CATCH_CONFIG_ENABLE_BENCHMARKING\n \n     void RunContext::pushScopedMessage(MessageInfo const & message) {\n         m_messages.push_back(message);\ndiff --git a/include/internal/catch_run_context.h b/include/internal/catch_run_context.h\n--- a/include/internal/catch_run_context.h\n+++ b/include/internal/catch_run_context.h\n@@ -82,8 +82,12 @@ namespace Catch {\n \n         auto acquireGeneratorTracker( SourceLineInfo const& lineInfo ) -> IGeneratorTracker& override;\n \n+#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)\n+        void benchmarkPreparing( std::string const& name ) override;\n         void benchmarkStarting( BenchmarkInfo const& info ) override;\n-        void benchmarkEnded( BenchmarkStats const& stats ) override;\n+        void benchmarkEnded( BenchmarkStats<> const& stats ) override;\n+        void benchmarkFailed( std::string const& error ) override;\n+#endif // CATCH_CONFIG_ENABLE_BENCHMARKING\n \n         void pushScopedMessage( MessageInfo const& message ) override;\n         void popScopedMessage( MessageInfo const& message ) override;\ndiff --git a/include/internal/catch_stream.cpp b/include/internal/catch_stream.cpp\n--- a/include/internal/catch_stream.cpp\n+++ b/include/internal/catch_stream.cpp\n@@ -25,7 +25,7 @@ namespace Catch {\n \n     Catch::IStream::~IStream() = default;\n \n-    namespace detail { namespace {\n+    namespace Detail { namespace {\n         template<typename WriterF, std::size_t bufferSize=256>\n         class StreamBufImpl : public std::streambuf {\n             char data[bufferSize];\n@@ -124,15 +124,15 @@ namespace Catch {\n \n     auto makeStream( StringRef const &filename ) -> IStream const* {\n         if( filename.empty() )\n-            return new detail::CoutStream();\n+            return new Detail::CoutStream();\n         else if( filename[0] == '%' ) {\n             if( filename == \"%debug\" )\n-                return new detail::DebugOutStream();\n+                return new Detail::DebugOutStream();\n             else\n                 CATCH_ERROR( \"Unrecognised stream: '\" << filename << \"'\" );\n         }\n         else\n-            return new detail::FileStream( filename );\n+            return new Detail::FileStream( filename );\n     }\n \n \ndiff --git a/include/reporters/catch_reporter_console.cpp b/include/reporters/catch_reporter_console.cpp\n--- a/include/reporters/catch_reporter_console.cpp\n+++ b/include/reporters/catch_reporter_console.cpp\n@@ -20,10 +20,16 @@\n #if defined(_MSC_VER)\n #pragma warning(push)\n #pragma warning(disable:4061) // Not all labels are EXPLICITLY handled in switch\n- // Note that 4062 (not all labels are handled\n- // and default is missing) is enabled\n+ // Note that 4062 (not all labels are handled and default is missing) is enabled\n #endif\n \n+#if defined(__clang__)\n+#  pragma clang diagnostic push\n+// For simplicity, benchmarking-only helpers are always enabled\n+#  pragma clang diagnostic ignored \"-Wunused-function\"\n+#endif\n+\n+\n \n namespace Catch {\n \n@@ -208,6 +214,10 @@ class Duration {\n     Unit m_units;\n \n public:\n+\texplicit Duration(double inNanoseconds, Unit units = Unit::Auto)\n+        : Duration(static_cast<uint64_t>(inNanoseconds), units) {\n+    }\n+\n     explicit Duration(uint64_t inNanoseconds, Unit units = Unit::Auto)\n         : m_inNanoseconds(inNanoseconds),\n         m_units(units) {\n@@ -283,9 +293,15 @@ class TablePrinter {\n         if (!m_isOpen) {\n             m_isOpen = true;\n             *this << RowBreak();\n-            for (auto const& info : m_columnInfos)\n-                *this << info.name << ColumnBreak();\n-            *this << RowBreak();\n+\n+\t\t\tColumns headerCols;\n+\t\t\tSpacer spacer(2);\n+\t\t\tfor (auto const& info : m_columnInfos) {\n+\t\t\t\theaderCols += Column(info.name).width(static_cast<std::size_t>(info.width - 2));\n+\t\t\t\theaderCols += spacer;\n+\t\t\t}\n+\t\t\tm_os << headerCols << \"\\n\";\n+\n             m_os << Catch::getLineOfChars<'-'>() << \"\\n\";\n         }\n     }\n@@ -340,9 +356,9 @@ ConsoleReporter::ConsoleReporter(ReporterConfig const& config)\n     m_tablePrinter(new TablePrinter(config.stream(),\n     {\n         { \"benchmark name\", CATCH_CONFIG_CONSOLE_WIDTH - 32, ColumnInfo::Left },\n-        { \"iters\", 8, ColumnInfo::Right },\n-        { \"elapsed ns\", 14, ColumnInfo::Right },\n-        { \"average\", 14, ColumnInfo::Right }\n+        { \"samples      mean       std dev\", 14, ColumnInfo::Right },\n+        { \"iterations   low mean   low std dev\", 14, ColumnInfo::Right },\n+        { \"estimated    high mean  high std dev\", 14, ColumnInfo::Right }\n     })) {}\n ConsoleReporter::~ConsoleReporter() = default;\n \n@@ -374,6 +390,7 @@ bool ConsoleReporter::assertionEnded(AssertionStats const& _assertionStats) {\n }\n \n void ConsoleReporter::sectionStarting(SectionInfo const& _sectionInfo) {\n+    m_tablePrinter->close();\n     m_headerPrinted = false;\n     StreamingReporterBase::sectionStarting(_sectionInfo);\n }\n@@ -397,29 +414,45 @@ void ConsoleReporter::sectionEnded(SectionStats const& _sectionStats) {\n     StreamingReporterBase::sectionEnded(_sectionStats);\n }\n \n+#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)\n+void ConsoleReporter::benchmarkPreparing(std::string const& name) {\n+\tlazyPrintWithoutClosingBenchmarkTable();\n \n-void ConsoleReporter::benchmarkStarting(BenchmarkInfo const& info) {\n-    lazyPrintWithoutClosingBenchmarkTable();\n+\tauto nameCol = Column(name).width(static_cast<std::size_t>(m_tablePrinter->columnInfos()[0].width - 2));\n \n-    auto nameCol = Column( info.name ).width( static_cast<std::size_t>( m_tablePrinter->columnInfos()[0].width - 2 ) );\n+\tbool firstLine = true;\n+\tfor (auto line : nameCol) {\n+\t\tif (!firstLine)\n+\t\t\t(*m_tablePrinter) << ColumnBreak() << ColumnBreak() << ColumnBreak();\n+\t\telse\n+\t\t\tfirstLine = false;\n \n-    bool firstLine = true;\n-    for (auto line : nameCol) {\n-        if (!firstLine)\n-            (*m_tablePrinter) << ColumnBreak() << ColumnBreak() << ColumnBreak();\n-        else\n-            firstLine = false;\n+\t\t(*m_tablePrinter) << line << ColumnBreak();\n+\t}\n+}\n \n-        (*m_tablePrinter) << line << ColumnBreak();\n-    }\n+void ConsoleReporter::benchmarkStarting(BenchmarkInfo const& info) {\n+\t(*m_tablePrinter) << info.samples << ColumnBreak()\n+\t\t<< info.iterations << ColumnBreak()\n+\t\t<< Duration(info.estimatedDuration) << ColumnBreak();\n }\n-void ConsoleReporter::benchmarkEnded(BenchmarkStats const& stats) {\n-    Duration average(stats.elapsedTimeInNanoseconds / stats.iterations);\n+void ConsoleReporter::benchmarkEnded(BenchmarkStats<> const& stats) {\n+\t(*m_tablePrinter) << ColumnBreak()\n+\t\t<< Duration(stats.mean.point.count()) << ColumnBreak()\n+\t\t<< Duration(stats.mean.lower_bound.count()) << ColumnBreak()\n+\t\t<< Duration(stats.mean.upper_bound.count()) << ColumnBreak() << ColumnBreak()\n+\t\t<< Duration(stats.standardDeviation.point.count()) << ColumnBreak()\n+\t\t<< Duration(stats.standardDeviation.lower_bound.count()) << ColumnBreak()\n+\t\t<< Duration(stats.standardDeviation.upper_bound.count()) << ColumnBreak() << ColumnBreak() << ColumnBreak() << ColumnBreak() << ColumnBreak();\n+}\n+\n+void ConsoleReporter::benchmarkFailed(std::string const& error) {\n+\tColour colour(Colour::Red);\n     (*m_tablePrinter)\n-        << stats.iterations << ColumnBreak()\n-        << stats.elapsedTimeInNanoseconds << ColumnBreak()\n-        << average << ColumnBreak();\n+        << \"Benchmark failed (\" << error << \")\"\n+        << ColumnBreak() << RowBreak();\n }\n+#endif // CATCH_CONFIG_ENABLE_BENCHMARKING\n \n void ConsoleReporter::testCaseEnded(TestCaseStats const& _testCaseStats) {\n     m_tablePrinter->close();\n@@ -638,3 +671,7 @@ CATCH_REGISTER_REPORTER(\"console\", ConsoleReporter)\n #if defined(_MSC_VER)\n #pragma warning(pop)\n #endif\n+\n+#if defined(__clang__)\n+#  pragma clang diagnostic pop\n+#endif\ndiff --git a/include/reporters/catch_reporter_console.h b/include/reporters/catch_reporter_console.h\n--- a/include/reporters/catch_reporter_console.h\n+++ b/include/reporters/catch_reporter_console.h\n@@ -39,9 +39,12 @@ namespace Catch {\n         void sectionStarting(SectionInfo const& _sectionInfo) override;\n         void sectionEnded(SectionStats const& _sectionStats) override;\n \n-\n+#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)\n+        void benchmarkPreparing(std::string const& name) override;\n         void benchmarkStarting(BenchmarkInfo const& info) override;\n-        void benchmarkEnded(BenchmarkStats const& stats) override;\n+        void benchmarkEnded(BenchmarkStats<> const& stats) override;\n+        void benchmarkFailed(std::string const& error) override;\n+#endif // CATCH_CONFIG_ENABLE_BENCHMARKING\n \n         void testCaseEnded(TestCaseStats const& _testCaseStats) override;\n         void testGroupEnded(TestGroupStats const& _testGroupStats) override;\ndiff --git a/include/reporters/catch_reporter_listening.cpp b/include/reporters/catch_reporter_listening.cpp\n--- a/include/reporters/catch_reporter_listening.cpp\n+++ b/include/reporters/catch_reporter_listening.cpp\n@@ -42,19 +42,34 @@ namespace Catch {\n         m_reporter->noMatchingTestCases( spec );\n     }\n \n+#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)\n+    void ListeningReporter::benchmarkPreparing( std::string const& name ) {\n+\t\tfor (auto const& listener : m_listeners) {\n+\t\t\tlistener->benchmarkPreparing(name);\n+\t\t}\n+\t\tm_reporter->benchmarkPreparing(name);\n+\t}\n     void ListeningReporter::benchmarkStarting( BenchmarkInfo const& benchmarkInfo ) {\n         for ( auto const& listener : m_listeners ) {\n             listener->benchmarkStarting( benchmarkInfo );\n         }\n         m_reporter->benchmarkStarting( benchmarkInfo );\n     }\n-    void ListeningReporter::benchmarkEnded( BenchmarkStats const& benchmarkStats ) {\n+    void ListeningReporter::benchmarkEnded( BenchmarkStats<> const& benchmarkStats ) {\n         for ( auto const& listener : m_listeners ) {\n             listener->benchmarkEnded( benchmarkStats );\n         }\n         m_reporter->benchmarkEnded( benchmarkStats );\n     }\n \n+\tvoid ListeningReporter::benchmarkFailed( std::string const& error ) {\n+\t\tfor (auto const& listener : m_listeners) {\n+\t\t\tlistener->benchmarkFailed(error);\n+\t\t}\n+\t\tm_reporter->benchmarkFailed(error);\n+\t}\n+#endif // CATCH_CONFIG_ENABLE_BENCHMARKING\n+\n     void ListeningReporter::testRunStarting( TestRunInfo const& testRunInfo ) {\n         for ( auto const& listener : m_listeners ) {\n             listener->testRunStarting( testRunInfo );\ndiff --git a/include/reporters/catch_reporter_listening.h b/include/reporters/catch_reporter_listening.h\n--- a/include/reporters/catch_reporter_listening.h\n+++ b/include/reporters/catch_reporter_listening.h\n@@ -31,8 +31,12 @@ namespace Catch {\n \n         static std::set<Verbosity> getSupportedVerbosities();\n \n+#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)\n+        void benchmarkPreparing(std::string const& name) override;\n         void benchmarkStarting( BenchmarkInfo const& benchmarkInfo ) override;\n-        void benchmarkEnded( BenchmarkStats const& benchmarkStats ) override;\n+        void benchmarkEnded( BenchmarkStats<> const& benchmarkStats ) override;\n+        void benchmarkFailed(std::string const&) override;\n+#endif // CATCH_CONFIG_ENABLE_BENCHMARKING\n \n         void testRunStarting( TestRunInfo const& testRunInfo ) override;\n         void testGroupStarting( GroupInfo const& groupInfo ) override;\ndiff --git a/include/reporters/catch_reporter_xml.cpp b/include/reporters/catch_reporter_xml.cpp\n--- a/include/reporters/catch_reporter_xml.cpp\n+++ b/include/reporters/catch_reporter_xml.cpp\n@@ -219,6 +219,48 @@ namespace Catch {\n         m_xml.endElement();\n     }\n \n+#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)\n+    void XmlReporter::benchmarkStarting(BenchmarkInfo const &info) {\n+        m_xml.startElement(\"BenchmarkResults\")\n+            .writeAttribute(\"name\", info.name)\n+            .writeAttribute(\"samples\", info.samples)\n+            .writeAttribute(\"resamples\", info.resamples)\n+            .writeAttribute(\"iterations\", info.iterations)\n+            .writeAttribute(\"clockResolution\", static_cast<uint64_t>(info.clockResolution))\n+            .writeAttribute(\"estimatedDuration\", static_cast<uint64_t>(info.estimatedDuration))\n+            .writeComment(\"All values in nano seconds\");\n+    }\n+\n+    void XmlReporter::benchmarkEnded(BenchmarkStats<> const& benchmarkStats) {\n+        m_xml.startElement(\"mean\")\n+            .writeAttribute(\"value\", static_cast<uint64_t>(benchmarkStats.mean.point.count()))\n+            .writeAttribute(\"lowerBound\", static_cast<uint64_t>(benchmarkStats.mean.lower_bound.count()))\n+            .writeAttribute(\"upperBound\", static_cast<uint64_t>(benchmarkStats.mean.upper_bound.count()))\n+            .writeAttribute(\"ci\", benchmarkStats.mean.confidence_interval);\n+        m_xml.endElement();\n+        m_xml.startElement(\"standardDeviation\")\n+            .writeAttribute(\"value\", benchmarkStats.standardDeviation.point.count())\n+            .writeAttribute(\"lowerBound\", benchmarkStats.standardDeviation.lower_bound.count())\n+            .writeAttribute(\"upperBound\", benchmarkStats.standardDeviation.upper_bound.count())\n+            .writeAttribute(\"ci\", benchmarkStats.standardDeviation.confidence_interval);\n+        m_xml.endElement();\n+        m_xml.startElement(\"outliers\")\n+            .writeAttribute(\"variance\", benchmarkStats.outlierVariance)\n+            .writeAttribute(\"lowMild\", benchmarkStats.outliers.low_mild)\n+            .writeAttribute(\"lowSevere\", benchmarkStats.outliers.low_severe)\n+            .writeAttribute(\"highMild\", benchmarkStats.outliers.high_mild)\n+            .writeAttribute(\"highSevere\", benchmarkStats.outliers.high_severe);\n+        m_xml.endElement();\n+        m_xml.endElement();\n+    }\n+\n+    void XmlReporter::benchmarkFailed(std::string const &error) {\n+        m_xml.scopedElement(\"failed\").\n+            writeAttribute(\"message\", error);\n+        m_xml.endElement();\n+    }\n+#endif // CATCH_CONFIG_ENABLE_BENCHMARKING\n+\n     CATCH_REGISTER_REPORTER( \"xml\", XmlReporter )\n \n } // end namespace Catch\ndiff --git a/include/reporters/catch_reporter_xml.h b/include/reporters/catch_reporter_xml.h\n--- a/include/reporters/catch_reporter_xml.h\n+++ b/include/reporters/catch_reporter_xml.h\n@@ -50,6 +50,12 @@ namespace Catch {\n \n         void testRunEnded(TestRunStats const& testRunStats) override;\n \n+#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)\n+        void benchmarkStarting(BenchmarkInfo const&) override;\n+        void benchmarkEnded(BenchmarkStats<> const&) override;\n+        void benchmarkFailed(std::string const&) override;\n+#endif // CATCH_CONFIG_ENABLE_BENCHMARKING\n+\n     private:\n         Timer m_testCaseTimer;\n         XmlWriter m_xml;\ndiff --git a/projects/CMakeLists.txt b/projects/CMakeLists.txt\n--- a/projects/CMakeLists.txt\n+++ b/projects/CMakeLists.txt\n@@ -18,6 +18,7 @@ set(TEST_SOURCES\n         ${SELF_TEST_DIR}/TestMain.cpp\n         ${SELF_TEST_DIR}/IntrospectiveTests/CmdLine.tests.cpp\n         ${SELF_TEST_DIR}/IntrospectiveTests/GeneratorsImpl.tests.cpp\n+        ${SELF_TEST_DIR}/IntrospectiveTests/InternalBenchmark.tests.cpp\n         ${SELF_TEST_DIR}/IntrospectiveTests/PartTracker.tests.cpp\n         ${SELF_TEST_DIR}/IntrospectiveTests/Tag.tests.cpp\n         ${SELF_TEST_DIR}/IntrospectiveTests/String.tests.cpp\n@@ -79,6 +80,28 @@ CheckFileList(EXTERNAL_HEADERS ${HEADER_DIR}/external)\n \n \n # Please keep these ordered alphabetically\n+set(BENCHMARK_HEADERS\n+\t\t${HEADER_DIR}/internal/benchmark/catch_benchmark.hpp\n+        ${HEADER_DIR}/internal/benchmark/catch_chronometer.hpp\n+        ${HEADER_DIR}/internal/benchmark/catch_clock.hpp\n+        ${HEADER_DIR}/internal/benchmark/catch_constructor.hpp\n+        ${HEADER_DIR}/internal/benchmark/catch_environment.hpp\n+        ${HEADER_DIR}/internal/benchmark/catch_estimate.hpp\n+        ${HEADER_DIR}/internal/benchmark/catch_execution_plan.hpp\n+        ${HEADER_DIR}/internal/benchmark/catch_optimizer.hpp\n+        ${HEADER_DIR}/internal/benchmark/catch_outlier_classification.hpp\n+        ${HEADER_DIR}/internal/benchmark/catch_sample_analysis.hpp\n+        ${HEADER_DIR}/internal/benchmark/detail/catch_analyse.hpp\n+        ${HEADER_DIR}/internal/benchmark/detail/catch_benchmark_function.hpp\n+        ${HEADER_DIR}/internal/benchmark/detail/catch_complete_invoke.hpp\n+        ${HEADER_DIR}/internal/benchmark/detail/catch_estimate_clock.hpp\n+        ${HEADER_DIR}/internal/benchmark/detail/catch_measure.hpp\n+        ${HEADER_DIR}/internal/benchmark/detail/catch_repeat.hpp\n+        ${HEADER_DIR}/internal/benchmark/detail/catch_run_for_at_least.hpp\n+        ${HEADER_DIR}/internal/benchmark/detail/catch_stats.hpp\n+        ${HEADER_DIR}/internal/benchmark/detail/catch_timing.hpp\n+)\n+SOURCE_GROUP(\"benchmark\" FILES ${BENCHMARK_HEADERS})\n set(INTERNAL_HEADERS\n         ${HEADER_DIR}/internal/catch_approx.h\n         ${HEADER_DIR}/internal/catch_assertionhandler.h\n@@ -138,7 +161,6 @@ set(INTERNAL_HEADERS\n         ${HEADER_DIR}/internal/catch_reporter_registry.h\n         ${HEADER_DIR}/internal/catch_result_type.h\n         ${HEADER_DIR}/internal/catch_run_context.h\n-        ${HEADER_DIR}/internal/catch_benchmark.h\n         ${HEADER_DIR}/internal/catch_section.h\n         ${HEADER_DIR}/internal/catch_section_info.h\n         ${HEADER_DIR}/internal/catch_session.h\n@@ -174,7 +196,6 @@ set(IMPL_SOURCES\n         ${HEADER_DIR}/internal/catch_approx.cpp\n         ${HEADER_DIR}/internal/catch_assertionhandler.cpp\n         ${HEADER_DIR}/internal/catch_assertionresult.cpp\n-        ${HEADER_DIR}/internal/catch_benchmark.cpp\n         ${HEADER_DIR}/internal/catch_capture_matchers.cpp\n         ${HEADER_DIR}/internal/catch_commandline.cpp\n         ${HEADER_DIR}/internal/catch_common.cpp\n@@ -269,6 +290,7 @@ set(HEADERS\n         ${EXTERNAL_HEADERS}\n         ${INTERNAL_HEADERS}\n         ${REPORTER_HEADERS}\n+\t\t${BENCHMARK_HEADERS}\n         )\n \n # Provide some groupings for IDEs\ndiff --git a/projects/ExtraTests/CMakeLists.txt b/projects/ExtraTests/CMakeLists.txt\n--- a/projects/ExtraTests/CMakeLists.txt\n+++ b/projects/ExtraTests/CMakeLists.txt\n@@ -116,6 +116,17 @@ set_tests_properties(\n )\n \n \n+add_executable(BenchmarkingMacros ${TESTS_DIR}/X20-BenchmarkingMacros.cpp)\n+target_compile_definitions( BenchmarkingMacros PRIVATE CATCH_CONFIG_ENABLE_BENCHMARKING )\n+\n+add_test(NAME BenchmarkingMacros COMMAND BenchmarkingMacros -r console -s)\n+set_tests_properties(\n+    BenchmarkingMacros\n+  PROPERTIES\n+    PASS_REGULAR_EXPRESSION \"benchmark name                                  samples       iterations    estimated\"\n+)\n+\n+\n set( EXTRA_TEST_BINARIES\n     PrefixedMacros\n     DisabledMacros\n@@ -123,6 +134,7 @@ set( EXTRA_TEST_BINARIES\n     DisabledExceptions-CustomHandler\n     FallbackStringifier\n     DisableStringification\n+    BenchmarkingMacros\n )\n \n # Shared config\ndiff --git a/projects/ExtraTests/X20-BenchmarkingMacros.cpp b/projects/ExtraTests/X20-BenchmarkingMacros.cpp\nnew file mode 100644\n--- /dev/null\n+++ b/projects/ExtraTests/X20-BenchmarkingMacros.cpp\n@@ -0,0 +1,133 @@\n+// X20-BenchmarkingMacros.cpp\n+// Test that the benchmarking support macros compile properly with the single header\n+\n+#define CATCH_CONFIG_MAIN\n+#include <catch2/catch.hpp>\n+\n+namespace {\n+std::uint64_t factorial(std::uint64_t number) {\n+    if (number < 2) {\n+        return 1;\n+    }\n+    return number * factorial(number - 1);\n+}\n+}\n+\n+TEST_CASE(\"Benchmark factorial\", \"[benchmark]\") {\n+    CHECK(factorial(0) == 1);\n+    // some more asserts..\n+    CHECK(factorial(10) == 3628800);\n+\n+    BENCHMARK(\"factorial 10\") {\n+        return factorial(10);\n+    };\n+\n+    CHECK(factorial(14) == 87178291200ull);\n+    BENCHMARK(\"factorial 14\") {\n+        return factorial(14);\n+    };\n+//\n+//    BENCHMARK(\"factorial 20\") {\n+//        return factorial(20);\n+//    };\n+//\n+//    BENCHMARK(\"factorial 35\") {\n+//        return factorial(35);\n+//    };\n+}\n+\n+TEST_CASE(\"Benchmark containers\", \"[.][benchmark]\") {\n+    static const int size = 100;\n+\n+    std::vector<int> v;\n+    std::map<int, int> m;\n+\n+    SECTION(\"without generator\") {\n+        BENCHMARK(\"Load up a vector\") {\n+            v = std::vector<int>();\n+            for (int i = 0; i < size; ++i)\n+                v.push_back(i);\n+        };\n+        REQUIRE(v.size() == size);\n+\n+        // test optimizer control\n+        BENCHMARK(\"Add up a vector's content\") {\n+            uint64_t add = 0;\n+            for (int i = 0; i < size; ++i)\n+                add += v[i];\n+            return add;\n+        };\n+\n+        BENCHMARK(\"Load up a map\") {\n+            m = std::map<int, int>();\n+            for (int i = 0; i < size; ++i)\n+                m.insert({ i, i + 1 });\n+        };\n+        REQUIRE(m.size() == size);\n+\n+        BENCHMARK(\"Reserved vector\") {\n+            v = std::vector<int>();\n+            v.reserve(size);\n+            for (int i = 0; i < size; ++i)\n+                v.push_back(i);\n+        };\n+        REQUIRE(v.size() == size);\n+\n+        BENCHMARK(\"Resized vector\") {\n+            v = std::vector<int>();\n+            v.resize(size);\n+            for (int i = 0; i < size; ++i)\n+                v[i] = i;\n+        };\n+        REQUIRE(v.size() == size);\n+\n+        int array[size];\n+        BENCHMARK(\"A fixed size array that should require no allocations\") {\n+            for (int i = 0; i < size; ++i)\n+                array[i] = i;\n+        };\n+        int sum = 0;\n+        for (int i = 0; i < size; ++i)\n+            sum += array[i];\n+        REQUIRE(sum > size);\n+\n+        SECTION(\"XYZ\") {\n+\n+            BENCHMARK_ADVANCED(\"Load up vector with chronometer\")(Catch::Benchmark::Chronometer meter) {\n+                std::vector<int> k;\n+                meter.measure([&](int idx) {\n+                    k = std::vector<int>();\n+                    for (int i = 0; i < size; ++i)\n+                        k.push_back(idx);\n+                });\n+                REQUIRE(k.size() == size);\n+            };\n+\n+            int runs = 0;\n+            BENCHMARK(\"Fill vector indexed\", benchmarkIndex) {\n+                v = std::vector<int>();\n+                v.resize(size);\n+                for (int i = 0; i < size; ++i)\n+                    v[i] = benchmarkIndex;\n+                runs = benchmarkIndex;\n+            };\n+\n+            for (size_t i = 0; i < v.size(); ++i) {\n+                REQUIRE(v[i] == runs);\n+            }\n+        }\n+    }\n+\n+    SECTION(\"with generator\") {\n+        auto generated = GENERATE(range(0, 10));\n+        BENCHMARK(\"Fill vector generated\") {\n+            v = std::vector<int>();\n+            v.resize(size);\n+            for (int i = 0; i < size; ++i)\n+                v[i] = generated;\n+        };\n+        for (size_t i = 0; i < v.size(); ++i) {\n+            REQUIRE(v[i] == generated);\n+        }\n+    }\n+}\n",
        "test_patch": "diff --git a/projects/SelfTest/IntrospectiveTests/CmdLine.tests.cpp b/projects/SelfTest/IntrospectiveTests/CmdLine.tests.cpp\n--- a/projects/SelfTest/IntrospectiveTests/CmdLine.tests.cpp\n+++ b/projects/SelfTest/IntrospectiveTests/CmdLine.tests.cpp\n@@ -462,4 +462,30 @@ TEST_CASE( \"Process can be configured on command line\", \"[config][command-line]\"\n #endif\n         }\n     }\n+\n+    SECTION(\"Benchmark options\") {\n+        SECTION(\"samples\") {\n+            CHECK(cli.parse({ \"test\", \"--benchmark-samples=200\" }));\n+\n+            REQUIRE(config.benchmarkSamples == 200);\n+        }\n+        \n+        SECTION(\"resamples\") {\n+            CHECK(cli.parse({ \"test\", \"--benchmark-resamples=20000\" }));\n+\n+            REQUIRE(config.benchmarkResamples == 20000);\n+        }\n+\n+        SECTION(\"resamples\") {\n+            CHECK(cli.parse({ \"test\", \"--benchmark-confidence-interval=0.99\" }));\n+\n+            REQUIRE(config.benchmarkConfidenceInterval == Catch::Detail::Approx(0.99));\n+        }\n+\n+        SECTION(\"resamples\") {\n+            CHECK(cli.parse({ \"test\", \"--benchmark-no-analysis\" }));\n+\n+            REQUIRE(config.benchmarkNoAnalysis);\n+        }\n+    }\n }\ndiff --git a/projects/SelfTest/IntrospectiveTests/InternalBenchmark.tests.cpp b/projects/SelfTest/IntrospectiveTests/InternalBenchmark.tests.cpp\nnew file mode 100644\n--- /dev/null\n+++ b/projects/SelfTest/IntrospectiveTests/InternalBenchmark.tests.cpp\n@@ -0,0 +1,405 @@\n+/*\n+ *  Created by Joachim on 16/04/2019.\n+ *  Adapted from donated nonius code.\n+ *\n+ *  Distributed under the Boost Software License, Version 1.0. (See accompanying\n+ *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n+ */\n+\n+#include \"catch.hpp\"\n+#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)\n+namespace {\n+    struct manual_clock {\n+    public:\n+        using duration = std::chrono::nanoseconds;\n+        using time_point = std::chrono::time_point<manual_clock, duration>;\n+        using rep = duration::rep;\n+        using period = duration::period;\n+        enum { is_steady = true };\n+\n+        static time_point now() {\n+            return time_point(duration(tick()));\n+        }\n+\n+        static void advance(int ticks = 1) {\n+            tick() += ticks;\n+        }\n+\n+    private:\n+        static rep& tick() {\n+            static rep the_tick = 0;\n+            return the_tick;\n+        }\n+    };\n+\n+    struct counting_clock {\n+    public:\n+        using duration = std::chrono::nanoseconds;\n+        using time_point = std::chrono::time_point<counting_clock, duration>;\n+        using rep = duration::rep;\n+        using period = duration::period;\n+        enum { is_steady = true };\n+\n+        static time_point now() {\n+            static rep ticks = 0;\n+            return time_point(duration(ticks += rate()));\n+        }\n+\n+        static void set_rate(rep new_rate) { rate() = new_rate; }\n+\n+    private:\n+        static rep& rate() {\n+            static rep the_rate = 1;\n+            return the_rate;\n+        }\n+    };\n+\n+    struct TestChronometerModel : Catch::Benchmark::Detail::ChronometerConcept {\n+        int started = 0;\n+        int finished = 0;\n+\n+        void start() override { ++started; }\n+        void finish() override { ++finished; }\n+    };\n+} // namespace\n+\n+TEST_CASE(\"warmup\", \"[benchmark]\") {\n+    auto rate = 1000;\n+    counting_clock::set_rate(rate);\n+\n+    auto start = counting_clock::now();\n+    auto iterations = Catch::Benchmark::Detail::warmup<counting_clock>();\n+    auto end = counting_clock::now();\n+\n+    REQUIRE((iterations * rate) > Catch::Benchmark::Detail::warmup_time.count());\n+    REQUIRE((end - start) > Catch::Benchmark::Detail::warmup_time);\n+}\n+\n+TEST_CASE(\"resolution\", \"[benchmark]\") {\n+    auto rate = 1000;\n+    counting_clock::set_rate(rate);\n+\n+    size_t count = 10;\n+    auto res = Catch::Benchmark::Detail::resolution<counting_clock>(static_cast<int>(count));\n+\n+    REQUIRE(res.size() == count);\n+\n+    for (size_t i = 1; i < count; ++i) {\n+        REQUIRE(res[i] == rate);\n+    }\n+}\n+\n+TEST_CASE(\"estimate_clock_resolution\", \"[benchmark]\") {\n+    auto rate = 1000;\n+    counting_clock::set_rate(rate);\n+\n+    int iters = 160000;\n+    auto res = Catch::Benchmark::Detail::estimate_clock_resolution<counting_clock>(iters);\n+\n+    REQUIRE(res.mean.count() == rate);\n+    REQUIRE(res.outliers.total() == 0);\n+}\n+\n+TEST_CASE(\"benchmark function call\", \"[benchmark]\") {\n+    SECTION(\"without chronometer\") {\n+        auto called = 0;\n+        auto model = TestChronometerModel{};\n+        auto meter = Catch::Benchmark::Chronometer{ model, 1 };\n+        auto fn = Catch::Benchmark::Detail::BenchmarkFunction{ [&] {\n+                CHECK(model.started == 1);\n+                CHECK(model.finished == 0);\n+                ++called;\n+            } };\n+\n+        fn(meter);\n+\n+        CHECK(model.started == 1);\n+        CHECK(model.finished == 1);\n+        CHECK(called == 1);\n+    }\n+\n+    SECTION(\"with chronometer\") {\n+        auto called = 0;\n+        auto model = TestChronometerModel{};\n+        auto meter = Catch::Benchmark::Chronometer{ model, 1 };\n+        auto fn = Catch::Benchmark::Detail::BenchmarkFunction{ [&](Catch::Benchmark::Chronometer) {\n+                CHECK(model.started == 0);\n+                CHECK(model.finished == 0);\n+                ++called;\n+            } };\n+\n+        fn(meter);\n+\n+        CHECK(model.started == 0);\n+        CHECK(model.finished == 0);\n+        CHECK(called == 1);\n+    }\n+}\n+\n+TEST_CASE(\"uniform samples\", \"[benchmark]\") {\n+    std::vector<double> samples(100);\n+    std::fill(samples.begin(), samples.end(), 23);\n+\n+    using it = std::vector<double>::iterator;\n+    auto e = Catch::Benchmark::Detail::bootstrap(0.95, samples.begin(), samples.end(), samples, [](it a, it b) {\n+        auto sum = std::accumulate(a, b, 0.);\n+        return sum / (b - a);\n+    });\n+    CHECK(e.point == 23);\n+    CHECK(e.upper_bound == 23);\n+    CHECK(e.lower_bound == 23);\n+    CHECK(e.confidence_interval == 0.95);\n+}\n+\n+\n+TEST_CASE(\"normal_cdf\", \"[benchmark]\") {\n+    using Catch::Benchmark::Detail::normal_cdf;\n+    CHECK(normal_cdf(0.000000) == Approx(0.50000000000000000));\n+    CHECK(normal_cdf(1.000000) == Approx(0.84134474606854293));\n+    CHECK(normal_cdf(-1.000000) == Approx(0.15865525393145705));\n+    CHECK(normal_cdf(2.809729) == Approx(0.99752083845315409));\n+    CHECK(normal_cdf(-1.352570) == Approx(0.08809652095066035));\n+}\n+\n+TEST_CASE(\"erfc_inv\", \"[benchmark]\") {\n+    using Catch::Benchmark::Detail::erfc_inv;\n+    CHECK(erfc_inv(1.103560) == Approx(-0.09203687623843015));\n+    CHECK(erfc_inv(1.067400) == Approx(-0.05980291115763361));\n+    CHECK(erfc_inv(0.050000) == Approx(1.38590382434967796));\n+}\n+\n+TEST_CASE(\"normal_quantile\", \"[benchmark]\") {\n+    using Catch::Benchmark::Detail::normal_quantile;\n+    CHECK(normal_quantile(0.551780) == Approx(0.13015979861484198));\n+    CHECK(normal_quantile(0.533700) == Approx(0.08457408802851875));\n+    CHECK(normal_quantile(0.025000) == Approx(-1.95996398454005449));\n+}\n+\n+\n+TEST_CASE(\"mean\", \"[benchmark]\") {\n+    std::vector<double> x{ 10., 20., 14., 16., 30., 24. };\n+\n+    auto m = Catch::Benchmark::Detail::mean(x.begin(), x.end());\n+\n+    REQUIRE(m == 19.);\n+}\n+\n+TEST_CASE(\"weighted_average_quantile\", \"[benchmark]\") {\n+    std::vector<double> x{ 10., 20., 14., 16., 30., 24. };\n+\n+    auto q1 = Catch::Benchmark::Detail::weighted_average_quantile(1, 4, x.begin(), x.end());\n+    auto med = Catch::Benchmark::Detail::weighted_average_quantile(1, 2, x.begin(), x.end());\n+    auto q3 = Catch::Benchmark::Detail::weighted_average_quantile(3, 4, x.begin(), x.end());\n+\n+    REQUIRE(q1 == 14.5);\n+    REQUIRE(med == 18.);\n+    REQUIRE(q3 == 23.);\n+}\n+\n+TEST_CASE(\"classify_outliers\", \"[benchmark]\") {\n+    auto require_outliers = [](Catch::Benchmark::OutlierClassification o, int los, int lom, int him, int his) {\n+        REQUIRE(o.low_severe == los);\n+        REQUIRE(o.low_mild == lom);\n+        REQUIRE(o.high_mild == him);\n+        REQUIRE(o.high_severe == his);\n+        REQUIRE(o.total() == los + lom + him + his);\n+    };\n+\n+    SECTION(\"none\") {\n+        std::vector<double> x{ 10., 20., 14., 16., 30., 24. };\n+\n+        auto o = Catch::Benchmark::Detail::classify_outliers(x.begin(), x.end());\n+\n+        REQUIRE(o.samples_seen == static_cast<int>(x.size()));\n+        require_outliers(o, 0, 0, 0, 0);\n+    }\n+    SECTION(\"low severe\") {\n+        std::vector<double> x{ -12., 20., 14., 16., 30., 24. };\n+\n+        auto o = Catch::Benchmark::Detail::classify_outliers(x.begin(), x.end());\n+\n+        REQUIRE(o.samples_seen == static_cast<int>(x.size()));\n+        require_outliers(o, 1, 0, 0, 0);\n+    }\n+    SECTION(\"low mild\") {\n+        std::vector<double> x{ 1., 20., 14., 16., 30., 24. };\n+\n+        auto o = Catch::Benchmark::Detail::classify_outliers(x.begin(), x.end());\n+\n+        REQUIRE(o.samples_seen == static_cast<int>(x.size()));\n+        require_outliers(o, 0, 1, 0, 0);\n+    }\n+    SECTION(\"high mild\") {\n+        std::vector<double> x{ 10., 20., 14., 16., 36., 24. };\n+\n+        auto o = Catch::Benchmark::Detail::classify_outliers(x.begin(), x.end());\n+\n+        REQUIRE(o.samples_seen == static_cast<int>(x.size()));\n+        require_outliers(o, 0, 0, 1, 0);\n+    }\n+    SECTION(\"high severe\") {\n+        std::vector<double> x{ 10., 20., 14., 16., 49., 24. };\n+\n+        auto o = Catch::Benchmark::Detail::classify_outliers(x.begin(), x.end());\n+\n+        REQUIRE(o.samples_seen == static_cast<int>(x.size()));\n+        require_outliers(o, 0, 0, 0, 1);\n+    }\n+    SECTION(\"mixed\") {\n+        std::vector<double> x{ -20., 20., 14., 16., 39., 24. };\n+\n+        auto o = Catch::Benchmark::Detail::classify_outliers(x.begin(), x.end());\n+\n+        REQUIRE(o.samples_seen == static_cast<int>(x.size()));\n+        require_outliers(o, 1, 0, 1, 0);\n+    }\n+}\n+\n+TEST_CASE(\"analyse\", \"[benchmark]\") {\n+    Catch::ConfigData data{};\n+    data.benchmarkConfidenceInterval = 0.95;\n+    data.benchmarkNoAnalysis = false;\n+    data.benchmarkResamples = 1000;\n+    data.benchmarkSamples = 99;\n+    Catch::Config config{data};\n+\n+    using Duration = Catch::Benchmark::FloatDuration<Catch::Benchmark::default_clock>;\n+\n+    Catch::Benchmark::Environment<Duration> env;\n+    std::vector<Duration> samples(99);\n+    for (size_t i = 0; i < samples.size(); ++i) {\n+        samples[i] = Duration(23 + (i % 3 - 1));\n+    }\n+\n+    auto analysis = Catch::Benchmark::Detail::analyse(config, env, samples.begin(), samples.end());\n+    CHECK(analysis.mean.point.count() == 23);\n+    CHECK(analysis.mean.lower_bound.count() < 23);\n+    CHECK(analysis.mean.lower_bound.count() > 22);\n+    CHECK(analysis.mean.upper_bound.count() > 23);\n+    CHECK(analysis.mean.upper_bound.count() < 24);\n+\n+    CHECK(analysis.standard_deviation.point.count() > 0.5);\n+    CHECK(analysis.standard_deviation.point.count() < 1);\n+    CHECK(analysis.standard_deviation.lower_bound.count() > 0.5);\n+    CHECK(analysis.standard_deviation.lower_bound.count() < 1);\n+    CHECK(analysis.standard_deviation.upper_bound.count() > 0.5);\n+    CHECK(analysis.standard_deviation.upper_bound.count() < 1);\n+\n+    CHECK(analysis.outliers.total() == 0);\n+    CHECK(analysis.outliers.low_mild == 0);\n+    CHECK(analysis.outliers.low_severe == 0);\n+    CHECK(analysis.outliers.high_mild == 0);\n+    CHECK(analysis.outliers.high_severe == 0);\n+    CHECK(analysis.outliers.samples_seen == samples.size());\n+\n+    CHECK(analysis.outlier_variance < 0.5);\n+    CHECK(analysis.outlier_variance > 0);\n+}\n+\n+TEST_CASE(\"analyse no analysis\", \"[benchmark]\") {\n+    Catch::ConfigData data{};\n+    data.benchmarkConfidenceInterval = 0.95;\n+    data.benchmarkNoAnalysis = true;\n+    data.benchmarkResamples = 1000;\n+    data.benchmarkSamples = 99;\n+    Catch::Config config{ data };\n+\n+    using Duration = Catch::Benchmark::FloatDuration<Catch::Benchmark::default_clock>;\n+\n+    Catch::Benchmark::Environment<Duration> env;\n+    std::vector<Duration> samples(99);\n+    for (size_t i = 0; i < samples.size(); ++i) {\n+        samples[i] = Duration(23 + (i % 3 - 1));\n+    }\n+\n+    auto analysis = Catch::Benchmark::Detail::analyse(config, env, samples.begin(), samples.end());\n+    CHECK(analysis.mean.point.count() == 23);\n+    CHECK(analysis.mean.lower_bound.count() == 23);\n+    CHECK(analysis.mean.upper_bound.count() == 23);\n+\n+    CHECK(analysis.standard_deviation.point.count() == 0);\n+    CHECK(analysis.standard_deviation.lower_bound.count() == 0);\n+    CHECK(analysis.standard_deviation.upper_bound.count() == 0);\n+\n+    CHECK(analysis.outliers.total() == 0);\n+    CHECK(analysis.outliers.low_mild == 0);\n+    CHECK(analysis.outliers.low_severe == 0);\n+    CHECK(analysis.outliers.high_mild == 0);\n+    CHECK(analysis.outliers.high_severe == 0);\n+    CHECK(analysis.outliers.samples_seen == 0);\n+\n+    CHECK(analysis.outlier_variance == 0);\n+}\n+\n+TEST_CASE(\"run_for_at_least, int\", \"[benchmark]\") {\n+    manual_clock::duration time(100);\n+\n+    int old_x = 1;\n+    auto Timing = Catch::Benchmark::Detail::run_for_at_least<manual_clock>(time, 1, [&old_x](int x) -> int {\n+        CHECK(x >= old_x);\n+        manual_clock::advance(x);\n+        old_x = x;\n+        return x + 17;\n+    });\n+\n+    REQUIRE(Timing.elapsed >= time);\n+    REQUIRE(Timing.result == Timing.iterations + 17);\n+    REQUIRE(Timing.iterations >= time.count());\n+}\n+\n+TEST_CASE(\"run_for_at_least, chronometer\", \"[benchmark]\") {\n+    manual_clock::duration time(100);\n+\n+    int old_runs = 1;\n+    auto Timing = Catch::Benchmark::Detail::run_for_at_least<manual_clock>(time, 1, [&old_runs](Catch::Benchmark::Chronometer meter) -> int {\n+        CHECK(meter.runs() >= old_runs);\n+        manual_clock::advance(100);\n+        meter.measure([] {\n+            manual_clock::advance(1);\n+        });\n+        old_runs = meter.runs();\n+        return meter.runs() + 17;\n+    });\n+\n+    REQUIRE(Timing.elapsed >= time);\n+    REQUIRE(Timing.result == Timing.iterations + 17);\n+    REQUIRE(Timing.iterations >= time.count());\n+}\n+\n+\n+TEST_CASE(\"measure\", \"[benchmark]\") {\n+    auto r = Catch::Benchmark::Detail::measure<manual_clock>([](int x) -> int {\n+        CHECK(x == 17);\n+        manual_clock::advance(42);\n+        return 23;\n+    }, 17);\n+    auto s = Catch::Benchmark::Detail::measure<manual_clock>([](int x) -> int {\n+        CHECK(x == 23);\n+        manual_clock::advance(69);\n+        return 17;\n+    }, 23);\n+\n+    CHECK(r.elapsed.count() == 42);\n+    CHECK(r.result == 23);\n+    CHECK(r.iterations == 1);\n+\n+    CHECK(s.elapsed.count() == 69);\n+    CHECK(s.result == 17);\n+    CHECK(s.iterations == 1);\n+}\n+\n+TEST_CASE(\"run benchmark\", \"[benchmark]\") {\n+    counting_clock::set_rate(1000);\n+    auto start = counting_clock::now();\n+    \n+    Catch::Benchmark::Benchmark bench{ \"Test Benchmark\", [](Catch::Benchmark::Chronometer meter) {\n+        counting_clock::set_rate(100000);\n+        meter.measure([] { return counting_clock::now(); });\n+    } };\n+\n+    bench.run<counting_clock>();\n+    auto end = counting_clock::now();\n+\n+    CHECK((end - start).count() == 2867251000);\n+}\n+#endif // CATCH_CONFIG_ENABLE_BENCHMARKING\ndiff --git a/projects/SelfTest/UsageTests/Benchmark.tests.cpp b/projects/SelfTest/UsageTests/Benchmark.tests.cpp\n--- a/projects/SelfTest/UsageTests/Benchmark.tests.cpp\n+++ b/projects/SelfTest/UsageTests/Benchmark.tests.cpp\n@@ -2,42 +2,129 @@\n \n #include <map>\n \n-TEST_CASE( \"benchmarked\", \"[!benchmark]\" ) {\n+#if defined(CATCH_CONFIG_ENABLE_BENCHMARKING)\n+namespace {\n+    std::uint64_t Fibonacci(std::uint64_t number) {\n+        return number < 2 ? 1 : Fibonacci(number - 1) + Fibonacci(number - 2);\n+    }\n+}\n+\n+TEST_CASE(\"Benchmark Fibonacci\", \"[!benchmark]\") {\n+    CHECK(Fibonacci(0) == 1);\n+    // some more asserts..\n+    CHECK(Fibonacci(5) == 8);\n+    // some more asserts..\n+\n+    BENCHMARK(\"Fibonacci 20\") {\n+        return Fibonacci(20);\n+    };\n+\n+    BENCHMARK(\"Fibonacci 25\") {\n+        return Fibonacci(25);\n+    };\n \n+    BENCHMARK(\"Fibonacci 30\") {\n+        return Fibonacci(30);\n+    };\n+\n+    BENCHMARK(\"Fibonacci 35\") {\n+        return Fibonacci(35);\n+    };\n+}\n+\n+TEST_CASE(\"Benchmark containers\", \"[!benchmark]\") {\n     static const int size = 100;\n \n     std::vector<int> v;\n     std::map<int, int> m;\n \n-    BENCHMARK( \"Load up a vector\" ) {\n-        v = std::vector<int>();\n-        for(int i =0; i < size; ++i )\n-            v.push_back( i );\n-    }\n-    REQUIRE( v.size() == size );\n+    SECTION(\"without generator\") {\n+        BENCHMARK(\"Load up a vector\") {\n+            v = std::vector<int>();\n+            for (int i = 0; i < size; ++i)\n+                v.push_back(i);\n+        };\n+        REQUIRE(v.size() == size);\n \n-    BENCHMARK( \"Load up a map\" ) {\n-        m = std::map<int, int>();\n-        for(int i =0; i < size; ++i )\n-            m.insert( { i, i+1 } );\n-    }\n-    REQUIRE( m.size() == size );\n+        // test optimizer control\n+        BENCHMARK(\"Add up a vector's content\") {\n+            uint64_t add = 0;\n+            for (int i = 0; i < size; ++i)\n+                add += v[i];\n+            return add;\n+        };\n+\n+        BENCHMARK(\"Load up a map\") {\n+            m = std::map<int, int>();\n+            for (int i = 0; i < size; ++i)\n+                m.insert({ i, i + 1 });\n+        };\n+        REQUIRE(m.size() == size);\n+\n+        BENCHMARK(\"Reserved vector\") {\n+            v = std::vector<int>();\n+            v.reserve(size);\n+            for (int i = 0; i < size; ++i)\n+                v.push_back(i);\n+        };\n+        REQUIRE(v.size() == size);\n+\n+        BENCHMARK(\"Resized vector\") {\n+            v = std::vector<int>();\n+            v.resize(size);\n+            for (int i = 0; i < size; ++i)\n+                v[i] = i;\n+        };\n+        REQUIRE(v.size() == size);\n+\n+        int array[size];\n+        BENCHMARK(\"A fixed size array that should require no allocations\") {\n+            for (int i = 0; i < size; ++i)\n+                array[i] = i;\n+        };\n+        int sum = 0;\n+        for (int i = 0; i < size; ++i)\n+            sum += array[i];\n+        REQUIRE(sum > size);\n+\n+        SECTION(\"XYZ\") {\n+\n+            BENCHMARK_ADVANCED(\"Load up vector with chronometer\")(Catch::Benchmark::Chronometer meter) {\n+                std::vector<int> k;\n+                meter.measure([&](int idx) {\n+                    k = std::vector<int>();\n+                    for (int i = 0; i < size; ++i)\n+                        k.push_back(idx);\n+                });\n+                REQUIRE(k.size() == size);\n+            };\n+\n+            int runs = 0;\n+            BENCHMARK(\"Fill vector indexed\", benchmarkIndex) {\n+                v = std::vector<int>();\n+                v.resize(size);\n+                for (int i = 0; i < size; ++i)\n+                    v[i] = benchmarkIndex;\n+                runs = benchmarkIndex;\n+            };\n \n-    BENCHMARK( \"Reserved vector\" ) {\n-        v = std::vector<int>();\n-        v.reserve(size);\n-        for(int i =0; i < size; ++i )\n-            v.push_back( i );\n+            for (size_t i = 0; i < v.size(); ++i) {\n+                REQUIRE(v[i] == runs);\n+            }\n+        }\n     }\n-    REQUIRE( v.size() == size );\n \n-    int array[size];\n-    BENCHMARK( \"A fixed size array that should require no allocations\" ) {\n-        for(int i =0; i < size; ++i )\n-            array[i] = i;\n+    SECTION(\"with generator\") {\n+        auto generated = GENERATE(range(0, 10));\n+        BENCHMARK(\"Fill vector generated\") {\n+            v = std::vector<int>();\n+            v.resize(size);\n+            for (int i = 0; i < size; ++i)\n+                v[i] = generated;\n+        };\n+        for (size_t i = 0; i < v.size(); ++i) {\n+            REQUIRE(v[i] == generated);\n+        }\n     }\n-    int sum = 0;\n-    for(int i =0; i < size; ++i )\n-        sum += array[i];\n-    REQUIRE( sum > size );\n }\n+#endif // CATCH_CONFIG_ENABLE_BENCHMARKING\n",
        "problem_statement": "Rename #define BENCHMARK or allow disabling benchmark feature\n## Description\r\n\r\nThe `#define BENCHMARK` in https://github.com/catchorg/Catch2/commit/a9b6813ad9e423ddcd6559f52b503a68fe0f624c#diff-c06d59fb4f39c13fb9a355b49d321fcfR52 is an unfortunate name, with high potential of clashes.\r\n\r\nFor example, it clashes with (older) benchmarking framework, see https://github.com/DigitalInBlue/Celero/commit/dc6853478aece4da17e177f285896648b23dc2fd#diff-f1b66ca763828028068774e33319efb4R137 The generic `BENCHMARK` name issue also reported to Celero https://github.com/DigitalInBlue/Celero/issues/114\r\n\r\nIt would be extremely helpful Catch offers a `#define` to allow disabling the whole benchmarking feature all the way.\r\n\r\n\n",
        "hints_text": "I may be missing something obvious, but is there a good reason why you have both Catch2 and Celero in the same translation unit?\nIt happens, there are/were some files which included both (eg. shared fixtures for both, benchmark and test, so benchmark is actually tested for correctness - in non-optimised builds)",
        "created_at": "2019-04-27T17:04:30Z",
        "version": "2.8"
    }
}