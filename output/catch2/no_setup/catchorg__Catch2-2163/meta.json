{
    "task_id": "catchorg__Catch2-2163",
    "setup_info": {
        "repo_path": "testbed/catchorg__Catch2-2163_2025-06-29_23-16-37",
        "repo_cache_path": "testbed/catchorg/Catch2_cache"
    },
    "task_info": {
        "repo": "catchorg/Catch2",
        "pull_number": 2163,
        "instance_id": "catchorg__Catch2-2163",
        "issue_numbers": [
            "2061"
        ],
        "base_commit": "ba8150516800dd5e18f818346a2a12c45b6ec542",
        "patch": "diff --git a/src/catch2/catch_session.cpp b/src/catch2/catch_session.cpp\n--- a/src/catch2/catch_session.cpp\n+++ b/src/catch2/catch_session.cpp\n@@ -48,7 +48,7 @@ namespace Catch {\n             // doesn't compile without a std::move call. However, this causes\n             // a warning on newer platforms. Thus, we have to work around\n             // it a bit and downcast the pointer manually.\n-            auto ret = Detail::unique_ptr<IStreamingReporter>(new ListeningReporter);\n+            auto ret = Detail::unique_ptr<IStreamingReporter>(new ListeningReporter(config));\n             auto& multi = static_cast<ListeningReporter&>(*ret);\n             auto const& listeners = Catch::getRegistryHub().getReporterRegistry().getListeners();\n             for (auto const& listener : listeners) {\ndiff --git a/src/catch2/interfaces/catch_interfaces_reporter.cpp b/src/catch2/interfaces/catch_interfaces_reporter.cpp\n--- a/src/catch2/interfaces/catch_interfaces_reporter.cpp\n+++ b/src/catch2/interfaces/catch_interfaces_reporter.cpp\n@@ -11,34 +11,15 @@\n #include <catch2/internal/catch_console_width.hpp>\n #include <catch2/catch_message.hpp>\n #include <catch2/internal/catch_list.hpp>\n-#include <catch2/internal/catch_textflow.hpp>\n #include <catch2/internal/catch_string_manip.hpp>\n #include <catch2/catch_test_case_info.hpp>\n-#include <catch2/internal/catch_textflow.hpp>\n+#include <catch2/reporters/catch_reporter_helpers.hpp>\n \n #include <algorithm>\n #include <iomanip>\n \n namespace Catch {\n \n-    namespace {\n-        void listTestNamesOnly( std::vector<TestCaseHandle> const& tests ) {\n-            for ( auto const& test : tests ) {\n-                auto const& testCaseInfo = test.getTestCaseInfo();\n-\n-                if ( startsWith( testCaseInfo.name, '#' ) ) {\n-                    Catch::cout() << '\"' << testCaseInfo.name << '\"';\n-                } else {\n-                    Catch::cout() << testCaseInfo.name;\n-                }\n-\n-                Catch::cout() << '\\n';\n-            }\n-            Catch::cout() << std::flush;\n-        }\n-    } // end unnamed namespace\n-\n-\n     ReporterConfig::ReporterConfig( IConfig const* _fullConfig )\n     :   m_stream( &_fullConfig->stream() ), m_fullConfig( _fullConfig ) {}\n \n@@ -127,89 +108,4 @@ namespace Catch {\n \n     void IStreamingReporter::fatalErrorEncountered( StringRef ) {}\n \n-    void IStreamingReporter::listReporters(std::vector<ReporterDescription> const& descriptions, IConfig const& config) {\n-        Catch::cout() << \"Available reporters:\\n\";\n-        const auto maxNameLen = std::max_element(descriptions.begin(), descriptions.end(),\n-            [](ReporterDescription const& lhs, ReporterDescription const& rhs) { return lhs.name.size() < rhs.name.size(); })\n-            ->name.size();\n-\n-        for (auto const& desc : descriptions) {\n-            if (config.verbosity() == Verbosity::Quiet) {\n-                Catch::cout()\n-                    << TextFlow::Column(desc.name)\n-                    .indent(2)\n-                    .width(5 + maxNameLen) << '\\n';\n-            } else {\n-                Catch::cout()\n-                    << TextFlow::Column(desc.name + \":\")\n-                    .indent(2)\n-                    .width(5 + maxNameLen)\n-                    + TextFlow::Column(desc.description)\n-                    .initialIndent(0)\n-                    .indent(2)\n-                    .width(CATCH_CONFIG_CONSOLE_WIDTH - maxNameLen - 8)\n-                    << '\\n';\n-            }\n-        }\n-        Catch::cout() << std::endl;\n-    }\n-\n-    void IStreamingReporter::listTests(std::vector<TestCaseHandle> const& tests, IConfig const& config) {\n-        // We special case this to provide the equivalent of old\n-        // `--list-test-names-only`, which could then be used by the\n-        // `--input-file` option.\n-        if (config.verbosity() == Verbosity::Quiet) {\n-            listTestNamesOnly(tests);\n-            return;\n-        }\n-\n-        if (config.hasTestFilters()) {\n-            Catch::cout() << \"Matching test cases:\\n\";\n-        } else {\n-            Catch::cout() << \"All available test cases:\\n\";\n-        }\n-\n-        for (auto const& test : tests) {\n-            auto const& testCaseInfo = test.getTestCaseInfo();\n-            Colour::Code colour = testCaseInfo.isHidden()\n-                ? Colour::SecondaryText\n-                : Colour::None;\n-            Colour colourGuard(colour);\n-\n-            Catch::cout() << TextFlow::Column(testCaseInfo.name).initialIndent(2).indent(4) << '\\n';\n-            if (config.verbosity() >= Verbosity::High) {\n-                Catch::cout() << TextFlow::Column(Catch::Detail::stringify(testCaseInfo.lineInfo)).indent(4) << std::endl;\n-            }\n-            if (!testCaseInfo.tags.empty() && config.verbosity() > Verbosity::Quiet) {\n-                Catch::cout() << TextFlow::Column(testCaseInfo.tagsAsString()).indent(6) << '\\n';\n-            }\n-        }\n-\n-        if (!config.hasTestFilters()) {\n-            Catch::cout() << pluralise(tests.size(), \"test case\") << '\\n' << std::endl;\n-        } else {\n-            Catch::cout() << pluralise(tests.size(), \"matching test case\") << '\\n' << std::endl;\n-        }\n-    }\n-\n-    void IStreamingReporter::listTags(std::vector<TagInfo> const& tags, IConfig const& config) {\n-        if (config.hasTestFilters()) {\n-            Catch::cout() << \"Tags for matching test cases:\\n\";\n-        } else {\n-            Catch::cout() << \"All available tags:\\n\";\n-        }\n-\n-        for (auto const& tagCount : tags) {\n-            ReusableStringStream rss;\n-            rss << \"  \" << std::setw(2) << tagCount.count << \"  \";\n-            auto str = rss.str();\n-            auto wrapper = TextFlow::Column(tagCount.all())\n-                .initialIndent(0)\n-                .indent(str.size())\n-                .width(CATCH_CONFIG_CONSOLE_WIDTH - 10);\n-            Catch::cout() << str << wrapper << '\\n';\n-        }\n-        Catch::cout() << pluralise(tags.size(), \"tag\") << '\\n' << std::endl;\n-    }\n-\n } // end namespace Catch\ndiff --git a/src/catch2/interfaces/catch_interfaces_reporter.hpp b/src/catch2/interfaces/catch_interfaces_reporter.hpp\n--- a/src/catch2/interfaces/catch_interfaces_reporter.hpp\n+++ b/src/catch2/interfaces/catch_interfaces_reporter.hpp\n@@ -176,7 +176,12 @@ namespace Catch {\n     protected:\n         //! Derived classes can set up their preferences here\n         ReporterPreferences m_preferences;\n+        //! The test run's config as filled in from CLI and defaults\n+        IConfig const* m_config;\n+\n     public:\n+        IStreamingReporter( IConfig const* config ): m_config( config ) {}\n+\n         virtual ~IStreamingReporter() = default;\n \n         // Implementing class must also provide the following static methods:\n@@ -217,11 +222,11 @@ namespace Catch {\n         virtual void fatalErrorEncountered( StringRef name );\n \n         //! Writes out information about provided reporters using reporter-specific format\n-        virtual void listReporters(std::vector<ReporterDescription> const& descriptions, IConfig const& config);\n+        virtual void listReporters(std::vector<ReporterDescription> const& descriptions) = 0;\n         //! Writes out information about provided tests using reporter-specific format\n-        virtual void listTests(std::vector<TestCaseHandle> const& tests, IConfig const& config);\n+        virtual void listTests(std::vector<TestCaseHandle> const& tests) = 0;\n         //! Writes out information about the provided tags using reporter-specific format\n-        virtual void listTags(std::vector<TagInfo> const& tags, IConfig const& config);\n+        virtual void listTags(std::vector<TagInfo> const& tags) = 0;\n \n     };\n     using IStreamingReporterPtr = Detail::unique_ptr<IStreamingReporter>;\ndiff --git a/src/catch2/internal/catch_list.cpp b/src/catch2/internal/catch_list.cpp\n--- a/src/catch2/internal/catch_list.cpp\n+++ b/src/catch2/internal/catch_list.cpp\n@@ -24,7 +24,7 @@ namespace Catch {\n         void listTests(IStreamingReporter& reporter, IConfig const& config) {\n             auto const& testSpec = config.testSpec();\n             auto matchedTestCases = filterTests(getAllTestCasesSorted(config), testSpec, config);\n-            reporter.listTests(matchedTestCases, config);\n+            reporter.listTests(matchedTestCases);\n         }\n \n         void listTags(IStreamingReporter& reporter, IConfig const& config) {\n@@ -46,10 +46,10 @@ namespace Catch {\n                 infos.push_back(std::move(tagc.second));\n             }\n \n-            reporter.listTags(infos, config);\n+            reporter.listTags(infos);\n         }\n \n-        void listReporters(IStreamingReporter& reporter, IConfig const& config) {\n+        void listReporters(IStreamingReporter& reporter) {\n             std::vector<ReporterDescription> descriptions;\n \n             IReporterRegistry::FactoryMap const& factories = getRegistryHub().getReporterRegistry().getFactories();\n@@ -58,7 +58,7 @@ namespace Catch {\n                 descriptions.push_back({ fac.first, fac.second->getDescription() });\n             }\n \n-            reporter.listReporters(descriptions, config);\n+            reporter.listReporters(descriptions);\n         }\n \n     } // end anonymous namespace\n@@ -96,7 +96,7 @@ namespace Catch {\n         }\n         if (config.listReporters()) {\n             listed = true;\n-            listReporters(reporter, config);\n+            listReporters(reporter);\n         }\n         return listed;\n     }\ndiff --git a/src/catch2/reporters/catch_reporter_combined_tu.cpp b/src/catch2/reporters/catch_reporter_combined_tu.cpp\n--- a/src/catch2/reporters/catch_reporter_combined_tu.cpp\n+++ b/src/catch2/reporters/catch_reporter_combined_tu.cpp\n@@ -21,13 +21,40 @@\n #include <catch2/interfaces/catch_interfaces_config.hpp>\n #include <catch2/internal/catch_console_width.hpp>\n #include <catch2/internal/catch_errno_guard.hpp>\n-\n+#include <catch2/internal/catch_textflow.hpp>\n+#include <catch2/internal/catch_stream.hpp>\n+#include <catch2/internal/catch_string_manip.hpp>\n+#include <catch2/internal/catch_console_colour.hpp>\n+#include <catch2/catch_tostring.hpp>\n+#include <catch2/catch_test_case_info.hpp>\n+\n+#include <algorithm>\n #include <cfloat>\n #include <cstdio>\n #include <ostream>\n+#include <iomanip>\n \n namespace Catch {\n \n+    namespace {\n+        void listTestNamesOnly(std::ostream& out,\n+                               std::vector<TestCaseHandle> const& tests) {\n+            for (auto const& test : tests) {\n+                auto const& testCaseInfo = test.getTestCaseInfo();\n+\n+                if (startsWith(testCaseInfo.name, '#')) {\n+                    out << '\"' << testCaseInfo.name << '\"';\n+                } else {\n+                    out << testCaseInfo.name;\n+                }\n+\n+                out << '\\n';\n+            }\n+            out << std::flush;\n+        }\n+    } // end unnamed namespace\n+\n+\n     // Because formatting using c++ streams is stateful, drop down to C is\n     // required Alternatively we could use stringstream, but its performance\n     // is... not good.\n@@ -89,6 +116,101 @@ namespace Catch {\n         return out;\n     }\n \n+    void\n+    defaultListReporters( std::ostream& out,\n+                          std::vector<ReporterDescription> const& descriptions,\n+                          Verbosity verbosity ) {\n+        out << \"Available reporters:\\n\";\n+        const auto maxNameLen =\n+            std::max_element( descriptions.begin(),\n+                              descriptions.end(),\n+                              []( ReporterDescription const& lhs,\n+                                  ReporterDescription const& rhs ) {\n+                                  return lhs.name.size() < rhs.name.size();\n+                              } )\n+                ->name.size();\n+\n+        for ( auto const& desc : descriptions ) {\n+            if ( verbosity == Verbosity::Quiet ) {\n+                out << TextFlow::Column( desc.name )\n+                           .indent( 2 )\n+                           .width( 5 + maxNameLen )\n+                    << '\\n';\n+            } else {\n+                out << TextFlow::Column( desc.name + \":\" )\n+                               .indent( 2 )\n+                               .width( 5 + maxNameLen ) +\n+                           TextFlow::Column( desc.description )\n+                               .initialIndent( 0 )\n+                               .indent( 2 )\n+                               .width( CATCH_CONFIG_CONSOLE_WIDTH - maxNameLen - 8 )\n+                    << '\\n';\n+            }\n+        }\n+        out << '\\n' << std::flush;\n+    }\n+\n+    void defaultListTags( std::ostream& out,\n+                          std::vector<TagInfo> const& tags,\n+                          bool isFiltered ) {\n+        if ( isFiltered ) {\n+            out << \"Tags for matching test cases:\\n\";\n+        } else {\n+            out << \"All available tags:\\n\";\n+        }\n+\n+        for ( auto const& tagCount : tags ) {\n+            ReusableStringStream rss;\n+            rss << \"  \" << std::setw( 2 ) << tagCount.count << \"  \";\n+            auto str = rss.str();\n+            auto wrapper = TextFlow::Column( tagCount.all() )\n+                               .initialIndent( 0 )\n+                               .indent( str.size() )\n+                               .width( CATCH_CONFIG_CONSOLE_WIDTH - 10 );\n+            out << str << wrapper << '\\n';\n+        }\n+        out << pluralise( tags.size(), \"tag\" ) << '\\n' << std::endl;\n+    }\n+\n+    void defaultListTests(std::ostream& out, std::vector<TestCaseHandle> const& tests, bool isFiltered, Verbosity verbosity) {\n+        // We special case this to provide the equivalent of old\n+        // `--list-test-names-only`, which could then be used by the\n+        // `--input-file` option.\n+        if (verbosity == Verbosity::Quiet) {\n+            listTestNamesOnly(out, tests);\n+            return;\n+        }\n+\n+        if (isFiltered) {\n+            out << \"Matching test cases:\\n\";\n+        } else {\n+            out << \"All available test cases:\\n\";\n+        }\n+\n+        for (auto const& test : tests) {\n+            auto const& testCaseInfo = test.getTestCaseInfo();\n+            Colour::Code colour = testCaseInfo.isHidden()\n+                ? Colour::SecondaryText\n+                : Colour::None;\n+            Colour colourGuard(colour);\n+\n+            out << TextFlow::Column(testCaseInfo.name).initialIndent(2).indent(4) << '\\n';\n+            if (verbosity >= Verbosity::High) {\n+                out << TextFlow::Column(Catch::Detail::stringify(testCaseInfo.lineInfo)).indent(4) << std::endl;\n+            }\n+            if (!testCaseInfo.tags.empty() &&\n+                verbosity > Verbosity::Quiet) {\n+                out << TextFlow::Column(testCaseInfo.tagsAsString()).indent(6) << '\\n';\n+            }\n+        }\n+\n+        if (isFiltered) {\n+            out << pluralise(tests.size(), \"matching test case\") << '\\n' << std::endl;\n+        } else {\n+            out << pluralise(tests.size(), \"test case\") << '\\n' << std::endl;\n+        }\n+    }\n+\n } // namespace Catch\n \n \n@@ -100,13 +222,10 @@ namespace Catch {\n     bool EventListenerBase::assertionEnded( AssertionStats const& ) {\n         return false;\n     }\n-    void\n-    EventListenerBase::listReporters( std::vector<ReporterDescription> const&,\n-                                      IConfig const& ) {}\n-    void EventListenerBase::listTests( std::vector<TestCaseHandle> const&,\n-                                       IConfig const& ) {}\n-    void EventListenerBase::listTags( std::vector<TagInfo> const&,\n-                                      IConfig const& ) {}\n+    void EventListenerBase::listReporters(\n+        std::vector<ReporterDescription> const& ) {}\n+    void EventListenerBase::listTests( std::vector<TestCaseHandle> const& ) {}\n+    void EventListenerBase::listTags( std::vector<TagInfo> const& ) {}\n     void EventListenerBase::noMatchingTestCases( std::string const& ) {}\n     void EventListenerBase::testRunStarting( TestRunInfo const& ) {}\n     void EventListenerBase::testGroupStarting( GroupInfo const& ) {}\ndiff --git a/src/catch2/reporters/catch_reporter_cumulative_base.cpp b/src/catch2/reporters/catch_reporter_cumulative_base.cpp\n--- a/src/catch2/reporters/catch_reporter_cumulative_base.cpp\n+++ b/src/catch2/reporters/catch_reporter_cumulative_base.cpp\n@@ -6,6 +6,7 @@\n \n // SPDX-License-Identifier: BSL-1.0\n #include <catch2/reporters/catch_reporter_cumulative_base.hpp>\n+#include <catch2/reporters/catch_reporter_helpers.hpp>\n \n #include <algorithm>\n #include <cassert>\n@@ -110,4 +111,19 @@ namespace Catch {\n         testRunEndedCumulative();\n     }\n \n+    void CumulativeReporterBase::listReporters(std::vector<ReporterDescription> const& descriptions) {\n+        defaultListReporters(stream, descriptions, m_config->verbosity());\n+    }\n+\n+    void CumulativeReporterBase::listTests(std::vector<TestCaseHandle> const& tests) {\n+        defaultListTests(stream,\n+                         tests,\n+                         m_config->hasTestFilters(),\n+                         m_config->verbosity());\n+    }\n+\n+    void CumulativeReporterBase::listTags(std::vector<TagInfo> const& tags) {\n+        defaultListTags( stream, tags, m_config->hasTestFilters() );\n+    }\n+\n } // end namespace Catch\ndiff --git a/src/catch2/reporters/catch_reporter_cumulative_base.hpp b/src/catch2/reporters/catch_reporter_cumulative_base.hpp\n--- a/src/catch2/reporters/catch_reporter_cumulative_base.hpp\n+++ b/src/catch2/reporters/catch_reporter_cumulative_base.hpp\n@@ -46,7 +46,8 @@ namespace Catch {\n         using TestRunNode = Node<TestRunStats, TestGroupNode>;\n \n         CumulativeReporterBase( ReporterConfig const& _config ):\n-            m_config( _config.fullConfig() ), stream( _config.stream() ) {}\n+            IStreamingReporter( _config.fullConfig() ),\n+            stream( _config.stream() ) {}\n         ~CumulativeReporterBase() override;\n \n         void testRunStarting( TestRunInfo const& ) override {}\n@@ -68,7 +69,11 @@ namespace Catch {\n \n         void skipTest(TestCaseInfo const&) override {}\n \n-        IConfig const* m_config;\n+        void listReporters( std::vector<ReporterDescription> const& descriptions ) override;\n+        void listTests( std::vector<TestCaseHandle> const& tests ) override;\n+        void listTags( std::vector<TagInfo> const& tags ) override;\n+\n+\n         std::ostream& stream;\n         // Note: We rely on pointer identity being stable, which is why\n         //       which is why we store around pointers rather than values.\ndiff --git a/src/catch2/reporters/catch_reporter_event_listener.hpp b/src/catch2/reporters/catch_reporter_event_listener.hpp\n--- a/src/catch2/reporters/catch_reporter_event_listener.hpp\n+++ b/src/catch2/reporters/catch_reporter_event_listener.hpp\n@@ -20,22 +20,17 @@ namespace Catch {\n      * member functions it actually cares about.\n      */\n     class EventListenerBase : public IStreamingReporter {\n-        IConfig const* m_config;\n-\n     public:\n         EventListenerBase( ReporterConfig const& config ):\n-            m_config( config.fullConfig() ) {}\n+            IStreamingReporter( config.fullConfig() ) {}\n \n         void assertionStarting( AssertionInfo const& assertionInfo ) override;\n         bool assertionEnded( AssertionStats const& assertionStats ) override;\n \n-        void\n-        listReporters( std::vector<ReporterDescription> const& descriptions,\n-                       IConfig const& config ) override;\n-        void listTests( std::vector<TestCaseHandle> const& tests,\n-                        IConfig const& config ) override;\n-        void listTags( std::vector<TagInfo> const& tagInfos,\n-                       IConfig const& config ) override;\n+        void listReporters(\n+            std::vector<ReporterDescription> const& descriptions ) override;\n+        void listTests( std::vector<TestCaseHandle> const& tests ) override;\n+        void listTags( std::vector<TagInfo> const& tagInfos ) override;\n \n         void noMatchingTestCases( std::string const& spec ) override;\n         void testRunStarting( TestRunInfo const& testRunInfo ) override;\ndiff --git a/src/catch2/reporters/catch_reporter_helpers.hpp b/src/catch2/reporters/catch_reporter_helpers.hpp\n--- a/src/catch2/reporters/catch_reporter_helpers.hpp\n+++ b/src/catch2/reporters/catch_reporter_helpers.hpp\n@@ -12,9 +12,13 @@\n #include <string>\n #include <vector>\n \n+#include <catch2/internal/catch_list.hpp>\n+#include <catch2/interfaces/catch_interfaces_config.hpp>\n+\n namespace Catch {\n \n     struct IConfig;\n+    class TestCaseHandle;\n \n     // Returns double formatted as %.3f (format expected on output)\n     std::string getFormattedDuration( double duration );\n@@ -31,6 +35,42 @@ namespace Catch {\n         friend std::ostream& operator<<( std::ostream& out, lineOfChars value );\n     };\n \n+    /**\n+     * Lists reporter descriptions to the provided stream in user-friendly\n+     * format\n+     *\n+     * Used as the default listing implementation by the first party reporter\n+     * bases. The output should be backwards compatible with the output of\n+     * Catch2 v2 binaries.\n+     */\n+    void\n+    defaultListReporters( std::ostream& out,\n+                          std::vector<ReporterDescription> const& descriptions,\n+                          Verbosity verbosity );\n+\n+    /**\n+     * Lists tag information to the provided stream in user-friendly format\n+     *\n+     * Used as the default listing implementation by the first party reporter\n+     * bases. The output should be backwards compatible with the output of\n+     * Catch2 v2 binaries.\n+     */\n+    void defaultListTags( std::ostream& out, std::vector<TagInfo> const& tags, bool isFiltered );\n+\n+    /**\n+     * Lists test case information to the provided stream in user-friendly\n+     * format\n+     *\n+     * Used as the default listing implementation by the first party reporter\n+     * bases. The output is backwards compatible with the output of Catch2\n+     * v2 binaries, and also supports the format specific to the old\n+     * `--list-test-names-only` option, for people who used it in integrations.\n+     */\n+    void defaultListTests( std::ostream& out,\n+                           std::vector<TestCaseHandle> const& tests,\n+                           bool isFiltered,\n+                           Verbosity verbosity );\n+\n } // end namespace Catch\n \n #endif // CATCH_REPORTER_HELPERS_HPP_INCLUDED\ndiff --git a/src/catch2/reporters/catch_reporter_listening.cpp b/src/catch2/reporters/catch_reporter_listening.cpp\n--- a/src/catch2/reporters/catch_reporter_listening.cpp\n+++ b/src/catch2/reporters/catch_reporter_listening.cpp\n@@ -11,11 +11,6 @@\n \n namespace Catch {\n \n-    ListeningReporter::ListeningReporter() {\n-        // We will assume that listeners will always want all assertions\n-        m_preferences.shouldReportAllAssertions = true;\n-    }\n-\n     void ListeningReporter::addListener( IStreamingReporterPtr&& listener ) {\n         m_listeners.push_back( std::move( listener ) );\n     }\n@@ -146,25 +141,25 @@ namespace Catch {\n         m_reporter->skipTest( testInfo );\n     }\n \n-    void ListeningReporter::listReporters(std::vector<ReporterDescription> const& descriptions, IConfig const& config) {\n+    void ListeningReporter::listReporters(std::vector<ReporterDescription> const& descriptions) {\n         for (auto const& listener : m_listeners) {\n-            listener->listReporters(descriptions, config);\n+            listener->listReporters(descriptions);\n         }\n-        m_reporter->listReporters(descriptions, config);\n+        m_reporter->listReporters(descriptions);\n     }\n \n-    void ListeningReporter::listTests(std::vector<TestCaseHandle> const& tests, IConfig const& config) {\n+    void ListeningReporter::listTests(std::vector<TestCaseHandle> const& tests) {\n         for (auto const& listener : m_listeners) {\n-            listener->listTests(tests, config);\n+            listener->listTests(tests);\n         }\n-        m_reporter->listTests(tests, config);\n+        m_reporter->listTests(tests);\n     }\n \n-    void ListeningReporter::listTags(std::vector<TagInfo> const& tags, IConfig const& config) {\n+    void ListeningReporter::listTags(std::vector<TagInfo> const& tags) {\n         for (auto const& listener : m_listeners) {\n-            listener->listTags(tags, config);\n+            listener->listTags(tags);\n         }\n-        m_reporter->listTags(tags, config);\n+        m_reporter->listTags(tags);\n     }\n \n } // end namespace Catch\ndiff --git a/src/catch2/reporters/catch_reporter_listening.hpp b/src/catch2/reporters/catch_reporter_listening.hpp\n--- a/src/catch2/reporters/catch_reporter_listening.hpp\n+++ b/src/catch2/reporters/catch_reporter_listening.hpp\n@@ -18,7 +18,12 @@ namespace Catch {\n         IStreamingReporterPtr m_reporter = nullptr;\n \n     public:\n-        ListeningReporter();\n+        ListeningReporter( IConfig const* config ):\n+            IStreamingReporter( config ) {\n+            // We will assume that listeners will always want all assertions\n+            m_preferences.shouldReportAllAssertions = true;\n+        }\n+\n \n         void addListener( IStreamingReporterPtr&& listener );\n         void addReporter( IStreamingReporterPtr&& reporter );\n@@ -49,9 +54,9 @@ namespace Catch {\n \n         void skipTest( TestCaseInfo const& testInfo ) override;\n \n-        void listReporters(std::vector<ReporterDescription> const& descriptions, IConfig const& config) override;\n-        void listTests(std::vector<TestCaseHandle> const& tests, IConfig const& config) override;\n-        void listTags(std::vector<TagInfo> const& tags, IConfig const& config) override;\n+        void listReporters(std::vector<ReporterDescription> const& descriptions) override;\n+        void listTests(std::vector<TestCaseHandle> const& tests) override;\n+        void listTags(std::vector<TagInfo> const& tags) override;\n \n \n     };\ndiff --git a/src/catch2/reporters/catch_reporter_streaming_base.cpp b/src/catch2/reporters/catch_reporter_streaming_base.cpp\n--- a/src/catch2/reporters/catch_reporter_streaming_base.cpp\n+++ b/src/catch2/reporters/catch_reporter_streaming_base.cpp\n@@ -6,6 +6,7 @@\n \n // SPDX-License-Identifier: BSL-1.0\n #include <catch2/reporters/catch_reporter_streaming_base.hpp>\n+#include <catch2/reporters/catch_reporter_helpers.hpp>\n \n namespace Catch {\n \n@@ -31,4 +32,19 @@ namespace Catch {\n         currentTestRunInfo.reset();\n     }\n \n+    void StreamingReporterBase::listReporters(std::vector<ReporterDescription> const& descriptions) {\n+        defaultListReporters( stream, descriptions, m_config->verbosity() );\n+    }\n+\n+    void StreamingReporterBase::listTests(std::vector<TestCaseHandle> const& tests) {\n+        defaultListTests(stream,\n+                         tests,\n+                         m_config->hasTestFilters(),\n+                         m_config->verbosity());\n+    }\n+\n+    void StreamingReporterBase::listTags(std::vector<TagInfo> const& tags) {\n+        defaultListTags( stream, tags, m_config->hasTestFilters() );\n+    }\n+\n } // end namespace Catch\ndiff --git a/src/catch2/reporters/catch_reporter_streaming_base.hpp b/src/catch2/reporters/catch_reporter_streaming_base.hpp\n--- a/src/catch2/reporters/catch_reporter_streaming_base.hpp\n+++ b/src/catch2/reporters/catch_reporter_streaming_base.hpp\n@@ -36,8 +36,8 @@ namespace Catch {\n     struct StreamingReporterBase : IStreamingReporter {\n \n         StreamingReporterBase( ReporterConfig const& _config ):\n-            m_config( _config.fullConfig() ), stream( _config.stream() ) {\n-        }\n+            IStreamingReporter( _config.fullConfig() ),\n+            stream( _config.stream() ) {}\n \n \n         ~StreamingReporterBase() override;\n@@ -71,7 +71,10 @@ namespace Catch {\n             // It can optionally be overridden in the derived class.\n         }\n \n-        IConfig const* m_config;\n+        void listReporters( std::vector<ReporterDescription> const& descriptions ) override;\n+        void listTests( std::vector<TestCaseHandle> const& tests ) override;\n+        void listTags( std::vector<TagInfo> const& tags ) override;\n+\n         std::ostream& stream;\n \n         LazyStat<TestRunInfo> currentTestRunInfo;\ndiff --git a/src/catch2/reporters/catch_reporter_xml.cpp b/src/catch2/reporters/catch_reporter_xml.cpp\n--- a/src/catch2/reporters/catch_reporter_xml.cpp\n+++ b/src/catch2/reporters/catch_reporter_xml.cpp\n@@ -272,7 +272,7 @@ namespace Catch {\n         m_xml.endElement();\n     }\n \n-    void XmlReporter::listReporters(std::vector<ReporterDescription> const& descriptions, IConfig const&) {\n+    void XmlReporter::listReporters(std::vector<ReporterDescription> const& descriptions) {\n         auto outerTag = m_xml.scopedElement(\"AvailableReporters\");\n         for (auto const& reporter : descriptions) {\n             auto inner = m_xml.scopedElement(\"Reporter\");\n@@ -285,7 +285,7 @@ namespace Catch {\n         }\n     }\n \n-    void XmlReporter::listTests(std::vector<TestCaseHandle> const& tests, IConfig const&) {\n+    void XmlReporter::listTests(std::vector<TestCaseHandle> const& tests) {\n         auto outerTag = m_xml.scopedElement(\"MatchingTests\");\n         for (auto const& test : tests) {\n             auto innerTag = m_xml.scopedElement(\"TestCase\");\n@@ -310,7 +310,7 @@ namespace Catch {\n         }\n     }\n \n-    void XmlReporter::listTags(std::vector<TagInfo> const& tags, IConfig const&) {\n+    void XmlReporter::listTags(std::vector<TagInfo> const& tags) {\n         auto outerTag = m_xml.scopedElement(\"TagsFromMatchingTests\");\n         for (auto const& tag : tags) {\n             auto innerTag = m_xml.scopedElement(\"Tag\");\ndiff --git a/src/catch2/reporters/catch_reporter_xml.hpp b/src/catch2/reporters/catch_reporter_xml.hpp\n--- a/src/catch2/reporters/catch_reporter_xml.hpp\n+++ b/src/catch2/reporters/catch_reporter_xml.hpp\n@@ -56,9 +56,9 @@ namespace Catch {\n         void benchmarkEnded(BenchmarkStats<> const&) override;\n         void benchmarkFailed(std::string const&) override;\n \n-        void listReporters(std::vector<ReporterDescription> const& descriptions, IConfig const& config) override;\n-        void listTests(std::vector<TestCaseHandle> const& tests, IConfig const& config) override;\n-        void listTags(std::vector<TagInfo> const& tags, IConfig const& config) override;\n+        void listReporters(std::vector<ReporterDescription> const& descriptions) override;\n+        void listTests(std::vector<TestCaseHandle> const& tests) override;\n+        void listTags(std::vector<TagInfo> const& tags) override;\n \n     private:\n         Timer m_testCaseTimer;\n",
        "test_patch": "diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt\n--- a/tests/CMakeLists.txt\n+++ b/tests/CMakeLists.txt\n@@ -23,6 +23,7 @@ set(TEST_SOURCES\n         ${SELF_TEST_DIR}/IntrospectiveTests/InternalBenchmark.tests.cpp\n         ${SELF_TEST_DIR}/IntrospectiveTests/PartTracker.tests.cpp\n         ${SELF_TEST_DIR}/IntrospectiveTests/RandomNumberGeneration.tests.cpp\n+        ${SELF_TEST_DIR}/IntrospectiveTests/Reporters.tests.cpp\n         ${SELF_TEST_DIR}/IntrospectiveTests/Tag.tests.cpp\n         ${SELF_TEST_DIR}/IntrospectiveTests/String.tests.cpp\n         ${SELF_TEST_DIR}/IntrospectiveTests/StringManip.tests.cpp\ndiff --git a/tests/SelfTest/IntrospectiveTests/Reporters.tests.cpp b/tests/SelfTest/IntrospectiveTests/Reporters.tests.cpp\nnew file mode 100644\n--- /dev/null\n+++ b/tests/SelfTest/IntrospectiveTests/Reporters.tests.cpp\n@@ -0,0 +1,109 @@\n+\n+//              Copyright Catch2 Authors\n+// Distributed under the Boost Software License, Version 1.0.\n+//   (See accompanying file LICENSE_1_0.txt or copy at\n+//        https://www.boost.org/LICENSE_1_0.txt)\n+\n+// SPDX-License-Identifier: BSL-1.0\n+\n+#include <catch2/catch_test_macros.hpp>\n+\n+#include <catch2/catch_test_case_info.hpp>\n+#include <catch2/catch_config.hpp>\n+#include <catch2/interfaces/catch_interfaces_reporter.hpp>\n+#include <catch2/interfaces/catch_interfaces_reporter_factory.hpp>\n+#include <catch2/interfaces/catch_interfaces_reporter_registry.hpp>\n+#include <catch2/internal/catch_list.hpp>\n+#include <catch2/matchers/catch_matchers_string.hpp>\n+#include <catch2/reporters/catch_reporter_helpers.hpp>\n+\n+#include <sstream>\n+\n+TEST_CASE( \"The default listing implementation write to provided stream\",\n+           \"[reporters][reporter-helpers]\" ) {\n+    using Catch::Matchers::Contains;\n+    using namespace std::string_literals;\n+\n+    std::stringstream sstream;\n+    SECTION( \"Listing tags\" ) {\n+        std::vector<Catch::TagInfo> tags(1);\n+        tags[0].add(\"fakeTag\"_catch_sr);\n+        Catch::defaultListTags(sstream, tags, false);\n+\n+        auto listingString = sstream.str();\n+        REQUIRE_THAT(listingString, Contains(\"[fakeTag]\"s));\n+    }\n+    SECTION( \"Listing reporters\" ) {\n+        std::vector<Catch::ReporterDescription> reporters(\n+            { { \"fake reporter\", \"fake description\" } } );\n+        Catch::defaultListReporters(sstream, reporters, Catch::Verbosity::Normal);\n+\n+        auto listingString = sstream.str();\n+        REQUIRE_THAT(listingString, Contains(\"fake reporter\"s));\n+    }\n+    SECTION( \"Listing tests\" ) {\n+        Catch::TestCaseInfo fakeInfo{\n+            \"\"s,\n+            { \"fake test name\"_catch_sr, \"[fakeTestTag]\"_catch_sr },\n+            { \"fake-file.cpp\", 123456789 } };\n+        std::vector<Catch::TestCaseHandle> tests({ {&fakeInfo, nullptr} });\n+        Catch::defaultListTests(sstream, tests, false, Catch::Verbosity::Normal);\n+\n+        auto listingString = sstream.str();\n+        REQUIRE_THAT( listingString,\n+                      Contains( \"fake test name\"s ) &&\n+                          Contains( \"fakeTestTag\"s ) );\n+    }\n+}\n+\n+TEST_CASE( \"Reporter's write listings to provided stream\", \"[reporters]\" ) {\n+    using Catch::Matchers::Contains;\n+    using namespace std::string_literals;\n+\n+    auto const& factories = Catch::getRegistryHub().getReporterRegistry().getFactories();\n+    // If there are no reporters, the test would pass falsely\n+    // while there is something obviously broken\n+    REQUIRE_FALSE(factories.empty());\n+\n+    for (auto const& factory : factories) {\n+        INFO(\"Tested reporter: \" << factory.first);\n+        std::stringstream sstream;\n+\n+        Catch::ConfigData config_data;\n+        Catch::Config config( config_data );\n+        Catch::ReporterConfig rep_config( &config, sstream );\n+        auto reporter = factory.second->create( rep_config );\n+\n+        DYNAMIC_SECTION( factory.first << \" reporter lists tags\" ) {\n+            std::vector<Catch::TagInfo> tags(1);\n+            tags[0].add(\"fakeTag\"_catch_sr);\n+            reporter->listTags(tags);\n+\n+            auto listingString = sstream.str();\n+            REQUIRE_THAT(listingString, Contains(\"fakeTag\"s));\n+        }\n+\n+        DYNAMIC_SECTION( factory.first << \" reporter lists reporters\" ) {\n+            std::vector<Catch::ReporterDescription> reporters(\n+                { { \"fake reporter\", \"fake description\" } } );\n+            reporter->listReporters(reporters);\n+\n+            auto listingString = sstream.str();\n+            REQUIRE_THAT(listingString, Contains(\"fake reporter\"s));\n+        }\n+\n+        DYNAMIC_SECTION( factory.first << \" reporter lists tests\" ) {\n+            Catch::TestCaseInfo fakeInfo{\n+                \"\"s,\n+                { \"fake test name\"_catch_sr, \"[fakeTestTag]\"_catch_sr },\n+                { \"fake-file.cpp\", 123456789 } };\n+            std::vector<Catch::TestCaseHandle> tests({ {&fakeInfo, nullptr} });\n+            reporter->listTests(tests);\n+\n+            auto listingString = sstream.str();\n+            REQUIRE_THAT( listingString,\n+                          Contains( \"fake test name\"s ) &&\n+                              Contains( \"fakeTestTag\"s ) );\n+        }\n+    }\n+}\n",
        "problem_statement": "The output of --list-* options should obey -o flag\n**Description**\r\nCurrently, the output of `--list-*` options writes to stdout through `Catch::cout()`. It should obey the `-o` flag instead.\r\n\r\n**Additional context**\r\nBecause the default implementation of `--list*` flags is done in the `IStreamingReporter`  interface, we need to extend it to contain the stream it should write to, e.g. by giving it a `ReporterConfig` member and initializing it properly.\n",
        "hints_text": "",
        "created_at": "2021-01-26T17:45:37Z",
        "version": "3.0"
    }
}