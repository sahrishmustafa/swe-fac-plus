{
    "task_id": "catchorg__Catch2-876",
    "setup_info": {
        "repo_path": "testbed/catchorg__Catch2-876_2025-06-29_23-16-37",
        "repo_cache_path": "testbed/catchorg/Catch2_cache"
    },
    "task_info": {
        "repo": "catchorg/Catch2",
        "pull_number": 876,
        "instance_id": "catchorg__Catch2-876",
        "issue_numbers": [
            "748"
        ],
        "base_commit": "3a3f1529794059e1f8947c1d44ed10327b2a35d8",
        "patch": "diff --git a/include/internal/catch_message.hpp b/include/internal/catch_message.hpp\n--- a/include/internal/catch_message.hpp\n+++ b/include/internal/catch_message.hpp\n@@ -38,7 +38,10 @@ namespace Catch {\n     {}\n \n     ScopedMessage::~ScopedMessage() {\n-        getResultCapture().popScopedMessage( m_info );\n+        if (!std::uncaught_exception())\n+        {\n+            getResultCapture().popScopedMessage(m_info);\n+        }\n     }\n \n \ndiff --git a/include/reporters/catch_reporter_console.hpp b/include/reporters/catch_reporter_console.hpp\n--- a/include/reporters/catch_reporter_console.hpp\n+++ b/include/reporters/catch_reporter_console.hpp\n@@ -138,7 +138,11 @@ namespace Catch {\n                     case ResultWas::ThrewException:\n                         colour = Colour::Error;\n                         passOrFail = \"FAILED\";\n-                        messageLabel = \"due to unexpected exception with message\";\n+                        messageLabel = \"due to unexpected exception with \";\n+                        if (_stats.infoMessages.size() == 1)\n+                            messageLabel += \"message\";\n+                        if (_stats.infoMessages.size() > 1)\n+                            messageLabel += \"messages\";\n                         break;\n                     case ResultWas::FatalErrorCondition:\n                         colour = Colour::Error;\n",
        "test_patch": "diff --git a/projects/SelfTest/ExceptionTests.cpp b/projects/SelfTest/ExceptionTests.cpp\n--- a/projects/SelfTest/ExceptionTests.cpp\n+++ b/projects/SelfTest/ExceptionTests.cpp\n@@ -209,3 +209,18 @@ TEST_CASE( \"Mismatching exception messages failing the test\", \"[.][failing][!thr\n     REQUIRE_THROWS_WITH( thisThrows(), \"should fail\" );\n     REQUIRE_THROWS_WITH( thisThrows(), \"expected exception\" );\n }\n+\n+TEST_CASE( \"#748 - captures with unexpected exceptions\", \"[!shouldfail]\" ) {\n+    int answer = 42;\n+    CAPTURE(answer);\n+    // the message should be printed on the first two sections but not on the third\n+    SECTION( \"outside assertions\" ) {\n+        thisThrows();\n+    }\n+    SECTION( \"inside REQUIRE_NOTHROW\" ) {\n+        REQUIRE_NOTHROW(thisThrows());\n+    }\n+    SECTION( \"inside REQUIRE_THROWS\" ) {\n+        REQUIRE_THROWS(thisThrows());\n+    }\n+}\n\\ No newline at end of file\n",
        "problem_statement": "captures with unexpected exceptions\nIs it possible to make CAPTURE print its value when an unexpected exception occurs?\r\nCurrently, for the following code\r\n\r\n```c++\r\n#define CATCH_CONFIG_MAIN\r\n#include <catch.hpp>\r\n#include <stdexcept>\r\n\r\nvoid foo()\r\n{\r\n    throw std::logic_error(\"error\");\r\n}\r\n\r\nTEST_CASE(\"test\")\r\n{\r\n    int i = 2;\r\n    CAPTURE(i);\r\n    foo();\r\n    REQUIRE(false);\r\n}\r\n```\r\n\r\nI get \r\n```cmd\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nTest.exe is a Catch v1.1 b3 host application.\r\nRun with -? for options\r\n\r\n-------------------------------------------------------------------------------\r\ntest\r\n-------------------------------------------------------------------------------\r\n\\giant_nas\\dviry\\my documents\\visual studio 2015\\projects\\test\\test\\source.cpp(1\r\n0)\r\n...............................................................................\r\n\r\n\\giant_nas\\dviry\\my documents\\visual studio 2015\\projects\\test\\test\\source.cpp(1\r\n0): FAILED:\r\ndue to unexpected exception with message:\r\n  error\r\n\r\n===============================================================================\r\ntest cases: 1 | 1 failed\r\nassertions: 1 | 1 failed\r\n\r\nPress any key to continue . . .\r\n```\r\n\r\nWhile without calling `foo()` it's\r\n```cmd\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nTest.exe is a Catch v1.1 b3 host application.\r\nRun with -? for options\r\n\r\n-------------------------------------------------------------------------------\r\ntest\r\n-------------------------------------------------------------------------------\r\n\\giant_nas\\dviry\\my documents\\visual studio 2015\\projects\\test\\test\\source.cpp(1\r\n0)\r\n...............................................................................\r\n\r\n\\giant_nas\\dviry\\my documents\\visual studio 2015\\projects\\test\\test\\source.cpp(1\r\n5): FAILED:\r\n  REQUIRE( false )\r\nwith message:\r\n  i := 2\r\n\r\n===============================================================================\r\ntest cases: 1 | 1 failed\r\nassertions: 1 | 1 failed\r\n\r\nPress any key to continue . . .\r\n```\n",
        "hints_text": "No it's not possible, because captures are local to the scope they appear in. When an unCHECKed exception occurs, that scope is finished (local objects holding CAPTURE destroyed) before entering the handler (the one that prints \"FAILED: due to unexpected exception\").\r\n\nI think it could be possible with the use of C++17's [```std::uncaught_exceptions```](http://en.cppreference.com/w/cpp/error/uncaught_exception) to do something when the local objects (the capture stuff) are destroyed during stack unwinding due to an exception...\r\n\r\nor maybe just logging in globals in the destructor of the local capture stuff",
        "created_at": "2017-03-30T22:09:47Z",
        "version": "1.8"
    }
}