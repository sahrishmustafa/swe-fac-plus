{
    "task_id": "catchorg__Catch2-2554",
    "setup_info": {
        "repo_path": "testbed/catchorg__Catch2-2554_2025-06-29_23-16-37",
        "repo_cache_path": "testbed/catchorg/Catch2_cache"
    },
    "task_info": {
        "repo": "catchorg/Catch2",
        "pull_number": 2554,
        "instance_id": "catchorg__Catch2-2554",
        "issue_numbers": [
            "878"
        ],
        "base_commit": "8ce92d2c7288b6b3261caf1c016f8a779b6a8efc",
        "patch": "diff --git a/src/catch2/reporters/catch_reporter_compact.cpp b/src/catch2/reporters/catch_reporter_compact.cpp\n--- a/src/catch2/reporters/catch_reporter_compact.cpp\n+++ b/src/catch2/reporters/catch_reporter_compact.cpp\n@@ -18,22 +18,6 @@\n \n #include <ostream>\n \n-namespace {\n-\n-    constexpr Catch::StringRef bothOrAll( std::uint64_t count ) {\n-        switch (count) {\n-        case 1:\n-            return Catch::StringRef{};\n-        case 2:\n-            return \"both \"_catch_sr;\n-        default:\n-            return \"all \"_catch_sr;\n-        }\n-    }\n-\n-} // anon namespace\n-\n-\n namespace Catch {\n namespace {\n \n@@ -48,42 +32,6 @@ namespace {\n     static constexpr Catch::StringRef compactPassedString = \"passed\"_sr;\n #endif\n \n-// Colour, message variants:\n-// - white: No tests ran.\n-// -   red: Failed [both/all] N test cases, failed [both/all] M assertions.\n-// - white: Passed [both/all] N test cases (no assertions).\n-// -   red: Failed N tests cases, failed M assertions.\n-// - green: Passed [both/all] N tests cases with M assertions.\n-void printTotals(std::ostream& out, const Totals& totals, ColourImpl* colourImpl) {\n-    if (totals.testCases.total() == 0) {\n-        out << \"No tests ran.\";\n-    } else if (totals.testCases.failed == totals.testCases.total()) {\n-        auto guard = colourImpl->guardColour( Colour::ResultError ).engage( out );\n-        const StringRef qualify_assertions_failed =\n-            totals.assertions.failed == totals.assertions.total() ?\n-            bothOrAll(totals.assertions.failed) : StringRef{};\n-        out <<\n-            \"Failed \" << bothOrAll(totals.testCases.failed)\n-            << pluralise(totals.testCases.failed, \"test case\"_sr) << \", \"\n-            \"failed \" << qualify_assertions_failed <<\n-            pluralise(totals.assertions.failed, \"assertion\"_sr) << '.';\n-    } else if (totals.assertions.total() == 0) {\n-        out <<\n-            \"Passed \" << bothOrAll(totals.testCases.total())\n-            << pluralise(totals.testCases.total(), \"test case\"_sr)\n-            << \" (no assertions).\";\n-    } else if (totals.assertions.failed) {\n-        out << colourImpl->guardColour( Colour::ResultError ) <<\n-            \"Failed \" << pluralise(totals.testCases.failed, \"test case\"_sr) << \", \"\n-            \"failed \" << pluralise(totals.assertions.failed, \"assertion\"_sr) << '.';\n-    } else {\n-        out << colourImpl->guardColour( Colour::ResultSuccess ) <<\n-            \"Passed \" << bothOrAll(totals.testCases.passed)\n-            << pluralise(totals.testCases.passed, \"test case\"_sr) <<\n-            \" with \" << pluralise(totals.assertions.passed, \"assertion\"_sr) << '.';\n-    }\n-}\n-\n // Implementation of CompactReporter formatting\n class AssertionPrinter {\n public:\n@@ -291,7 +239,7 @@ class AssertionPrinter {\n         }\n \n         void CompactReporter::testRunEnded( TestRunStats const& _testRunStats ) {\n-            printTotals( m_stream, _testRunStats.totals, m_colour.get() );\n+            printTestRunTotals( m_stream, *m_colour, _testRunStats.totals );\n             m_stream << \"\\n\\n\" << std::flush;\n             StreamingReporterBase::testRunEnded( _testRunStats );\n         }\ndiff --git a/src/catch2/reporters/catch_reporter_console.cpp b/src/catch2/reporters/catch_reporter_console.cpp\n--- a/src/catch2/reporters/catch_reporter_console.cpp\n+++ b/src/catch2/reporters/catch_reporter_console.cpp\n@@ -491,7 +491,7 @@ void ConsoleReporter::testCaseEnded(TestCaseStats const& _testCaseStats) {\n }\n void ConsoleReporter::testRunEnded(TestRunStats const& _testRunStats) {\n     printTotalsDivider(_testRunStats.totals);\n-    printTotals(_testRunStats.totals);\n+    printTestRunTotals( m_stream, *m_colour, _testRunStats.totals );\n     m_stream << '\\n' << std::flush;\n     StreamingReporterBase::testRunEnded(_testRunStats);\n }\n@@ -598,82 +598,6 @@ void ConsoleReporter::printHeaderString(std::string const& _string, std::size_t\n            << '\\n';\n }\n \n-struct SummaryColumn {\n-\n-    SummaryColumn( std::string _label, Colour::Code _colour )\n-    :   label( CATCH_MOVE( _label ) ),\n-        colour( _colour ) {}\n-    SummaryColumn addRow( std::uint64_t count ) {\n-        ReusableStringStream rss;\n-        rss << count;\n-        std::string row = rss.str();\n-        for (auto& oldRow : rows) {\n-            while (oldRow.size() < row.size())\n-                oldRow = ' ' + oldRow;\n-            while (oldRow.size() > row.size())\n-                row = ' ' + row;\n-        }\n-        rows.push_back(row);\n-        return *this;\n-    }\n-\n-    std::string label;\n-    Colour::Code colour;\n-    std::vector<std::string> rows;\n-\n-};\n-\n-void ConsoleReporter::printTotals( Totals const& totals ) {\n-    if (totals.testCases.total() == 0) {\n-        m_stream << m_colour->guardColour( Colour::Warning )\n-                 << \"No tests ran\\n\";\n-    } else if (totals.assertions.total() > 0 && totals.testCases.allPassed()) {\n-        m_stream << m_colour->guardColour( Colour::ResultSuccess )\n-                 << \"All tests passed\";\n-        m_stream << \" (\"\n-            << pluralise(totals.assertions.passed, \"assertion\"_sr) << \" in \"\n-            << pluralise(totals.testCases.passed, \"test case\"_sr) << ')'\n-            << '\\n';\n-    } else {\n-\n-        std::vector<SummaryColumn> columns;\n-        columns.push_back(SummaryColumn(\"\", Colour::None)\n-                          .addRow(totals.testCases.total())\n-                          .addRow(totals.assertions.total()));\n-        columns.push_back(SummaryColumn(\"passed\", Colour::Success)\n-                          .addRow(totals.testCases.passed)\n-                          .addRow(totals.assertions.passed));\n-        columns.push_back(SummaryColumn(\"failed\", Colour::ResultError)\n-                          .addRow(totals.testCases.failed)\n-                          .addRow(totals.assertions.failed));\n-        columns.push_back(SummaryColumn(\"failed as expected\", Colour::ResultExpectedFailure)\n-                          .addRow(totals.testCases.failedButOk)\n-                          .addRow(totals.assertions.failedButOk));\n-\n-        printSummaryRow(\"test cases\"_sr, columns, 0);\n-        printSummaryRow(\"assertions\"_sr, columns, 1);\n-    }\n-}\n-void ConsoleReporter::printSummaryRow(StringRef label, std::vector<SummaryColumn> const& cols, std::size_t row) {\n-    for (auto col : cols) {\n-        std::string const& value = col.rows[row];\n-        if (col.label.empty()) {\n-            m_stream << label << \": \";\n-            if ( value != \"0\" ) {\n-                m_stream << value;\n-            } else {\n-                m_stream << m_colour->guardColour( Colour::Warning )\n-                         << \"- none -\";\n-            }\n-        } else if (value != \"0\") {\n-            m_stream << m_colour->guardColour( Colour::LightGrey ) << \" | \"\n-                     << m_colour->guardColour( col.colour ) << value << ' '\n-                     << col.label;\n-        }\n-    }\n-    m_stream << '\\n';\n-}\n-\n void ConsoleReporter::printTotalsDivider(Totals const& totals) {\n     if (totals.testCases.total() > 0) {\n         std::size_t failedRatio = makeRatio(totals.testCases.failed, totals.testCases.total());\n@@ -701,9 +625,6 @@ void ConsoleReporter::printTotalsDivider(Totals const& totals) {\n     }\n     m_stream << '\\n';\n }\n-void ConsoleReporter::printSummaryDivider() {\n-    m_stream << lineOfChars('-') << '\\n';\n-}\n \n } // end namespace Catch\n \ndiff --git a/src/catch2/reporters/catch_reporter_console.hpp b/src/catch2/reporters/catch_reporter_console.hpp\n--- a/src/catch2/reporters/catch_reporter_console.hpp\n+++ b/src/catch2/reporters/catch_reporter_console.hpp\n@@ -13,7 +13,6 @@\n \n namespace Catch {\n     // Fwd decls\n-    struct SummaryColumn;\n     class TablePrinter;\n \n     class ConsoleReporter final : public StreamingReporterBase {\n@@ -57,12 +56,7 @@ namespace Catch {\n         // subsequent lines\n         void printHeaderString(std::string const& _string, std::size_t indent = 0);\n \n-\n-        void printTotals(Totals const& totals);\n-        void printSummaryRow(StringRef label, std::vector<SummaryColumn> const& cols, std::size_t row);\n-\n         void printTotalsDivider(Totals const& totals);\n-        void printSummaryDivider();\n \n         bool m_headerPrinted = false;\n         bool m_testRunInfoPrinted = false;\ndiff --git a/src/catch2/reporters/catch_reporter_helpers.cpp b/src/catch2/reporters/catch_reporter_helpers.cpp\n--- a/src/catch2/reporters/catch_reporter_helpers.cpp\n+++ b/src/catch2/reporters/catch_reporter_helpers.cpp\n@@ -235,4 +235,102 @@ namespace Catch {\n         out << \"\\n\\n\" << std::flush;\n     }\n \n+    namespace {\n+        class SummaryColumn {\n+        public:\n+            SummaryColumn( std::string suffix, Colour::Code colour ):\n+                m_suffix( CATCH_MOVE( suffix ) ), m_colour( colour ) {}\n+\n+            SummaryColumn&& addRow( std::uint64_t count ) && {\n+                std::string row = std::to_string(count);\n+                auto const new_width = std::max( m_width, row.size() );\n+                if ( new_width > m_width ) {\n+                    for ( auto& oldRow : m_rows ) {\n+                        oldRow.insert( 0, new_width - m_width, ' ' );\n+                    }\n+                } else {\n+                    row.insert( 0, m_width - row.size(), ' ' );\n+                }\n+                m_width = new_width;\n+                m_rows.push_back( row );\n+                return std::move( *this );\n+            }\n+\n+            std::string const& getSuffix() const { return m_suffix; }\n+            Colour::Code getColour() const { return m_colour; }\n+            std::string const& getRow( std::size_t index ) const {\n+                return m_rows[index];\n+            }\n+\n+        private:\n+            std::string m_suffix;\n+            Colour::Code m_colour;\n+            std::size_t m_width = 0;\n+            std::vector<std::string> m_rows;\n+        };\n+\n+        void printSummaryRow( std::ostream& stream,\n+                              ColourImpl& colour,\n+                              StringRef label,\n+                              std::vector<SummaryColumn> const& cols,\n+                              std::size_t row ) {\n+            for ( auto const& col : cols ) {\n+                auto const& value = col.getRow( row );\n+                auto const& suffix = col.getSuffix();\n+                if ( suffix.empty() ) {\n+                    stream << label << \": \";\n+                    if ( value != \"0\" ) {\n+                        stream << value;\n+                    } else {\n+                        stream << colour.guardColour( Colour::Warning )\n+                               << \"- none -\";\n+                    }\n+                } else if ( value != \"0\" ) {\n+                    stream << colour.guardColour( Colour::LightGrey ) << \" | \"\n+                           << colour.guardColour( col.getColour() ) << value\n+                           << ' ' << suffix;\n+                }\n+            }\n+            stream << '\\n';\n+        }\n+    } // namespace\n+\n+    void printTestRunTotals( std::ostream& stream,\n+                             ColourImpl& streamColour,\n+                             Totals const& totals ) {\n+        if ( totals.testCases.total() == 0 ) {\n+            stream << streamColour.guardColour( Colour::Warning )\n+                   << \"No tests ran\\n\";\n+            return;\n+        }\n+\n+        if ( totals.assertions.total() > 0 && totals.testCases.allPassed() ) {\n+            stream << streamColour.guardColour( Colour::ResultSuccess )\n+                   << \"All tests passed\";\n+            stream << \" (\"\n+                   << pluralise( totals.assertions.passed, \"assertion\"_sr )\n+                   << \" in \"\n+                   << pluralise( totals.testCases.passed, \"test case\"_sr )\n+                   << ')' << '\\n';\n+            return;\n+        }\n+\n+        std::vector<SummaryColumn> columns;\n+        columns.push_back( SummaryColumn( \"\", Colour::None )\n+                               .addRow( totals.testCases.total() )\n+                               .addRow( totals.assertions.total() ) );\n+        columns.push_back( SummaryColumn( \"passed\", Colour::Success )\n+                               .addRow( totals.testCases.passed )\n+                               .addRow( totals.assertions.passed ) );\n+        columns.push_back( SummaryColumn( \"failed\", Colour::ResultError )\n+                               .addRow( totals.testCases.failed )\n+                               .addRow( totals.assertions.failed ) );\n+        columns.push_back(\n+            SummaryColumn( \"failed as expected\", Colour::ResultExpectedFailure )\n+                .addRow( totals.testCases.failedButOk )\n+                .addRow( totals.assertions.failedButOk ) );\n+        printSummaryRow( stream, streamColour, \"test cases\"_sr, columns, 0 );\n+        printSummaryRow( stream, streamColour, \"assertions\"_sr, columns, 1 );\n+    }\n+\n } // namespace Catch\ndiff --git a/src/catch2/reporters/catch_reporter_helpers.hpp b/src/catch2/reporters/catch_reporter_helpers.hpp\n--- a/src/catch2/reporters/catch_reporter_helpers.hpp\n+++ b/src/catch2/reporters/catch_reporter_helpers.hpp\n@@ -14,6 +14,7 @@\n \n #include <catch2/internal/catch_list.hpp>\n #include <catch2/interfaces/catch_interfaces_config.hpp>\n+#include <catch2/catch_totals.hpp>\n \n namespace Catch {\n \n@@ -80,6 +81,15 @@ namespace Catch {\n                            bool isFiltered,\n                            Verbosity verbosity );\n \n+    /**\n+     * Prints test run totals to the provided stream in user-friendly format\n+     *\n+     * Used by the console and compact reporters.\n+     */\n+    void printTestRunTotals( std::ostream& stream,\n+                      ColourImpl& streamColour,\n+                      Totals const& totals );\n+\n } // end namespace Catch\n \n #endif // CATCH_REPORTER_HELPERS_HPP_INCLUDED\n",
        "test_patch": "diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt\n--- a/tests/CMakeLists.txt\n+++ b/tests/CMakeLists.txt\n@@ -336,7 +336,7 @@ set_tests_properties(ApprovalTests\n )\n \n add_test(NAME RegressionCheck-1670 COMMAND $<TARGET_FILE:SelfTest> \"#1670 regression check\" -c A -r compact)\n-set_tests_properties(RegressionCheck-1670 PROPERTIES PASS_REGULAR_EXPRESSION \"Passed 1 test case with 2 assertions.\")\n+set_tests_properties(RegressionCheck-1670 PROPERTIES PASS_REGULAR_EXPRESSION \"All tests passed \\\\(2 assertions in 1 test case\\\\)\")\n \n add_test(NAME VersionCheck COMMAND $<TARGET_FILE:SelfTest> -h)\n set_tests_properties(VersionCheck PROPERTIES PASS_REGULAR_EXPRESSION \"Catch2 v${PROJECT_VERSION}\")\ndiff --git a/tests/ExtraTests/CMakeLists.txt b/tests/ExtraTests/CMakeLists.txt\n--- a/tests/ExtraTests/CMakeLists.txt\n+++ b/tests/ExtraTests/CMakeLists.txt\n@@ -210,7 +210,7 @@ add_test(NAME DeferredStaticChecks COMMAND DeferredStaticChecks -r compact)\n set_tests_properties(\n     DeferredStaticChecks\n   PROPERTIES\n-    PASS_REGULAR_EXPRESSION \"Failed 1 test case, failed all 3 assertions.\"\n+    PASS_REGULAR_EXPRESSION \"test cases: 1 \\\\| 1 failed\\nassertions: 3 \\\\| 3 failed\"\n )\n \n \n",
        "problem_statement": "Compact reporter does not handle [!shouldfail] properly\n## Description\r\nCompact reporter does not handle the `[!shouldfail]` tag properly. Given this code (from #876):\r\n```cpp\r\nbool thisThrows() {\r\n    throw std::runtime_error(\"Boom\");\r\n}\r\n\r\nTEST_CASE(\"#748 - captures with unexpected exceptions\", \"[!shouldfail]\") {\r\n    int answer = 42;\r\n    CAPTURE(answer);\r\n    // the message should be printed on the first two sections but not on the third\r\n    SECTION(\"outside assertions\") {\r\n        thisThrows();\r\n    }\r\n    SECTION(\"inside REQUIRE_NOTHROW\") {\r\n        REQUIRE_NOTHROW(thisThrows());\r\n    }\r\n    SECTION(\"inside REQUIRE_THROWS\") {\r\n        REQUIRE_THROWS(thisThrows());\r\n    }\r\n}\r\n```\r\ncompact reporter's output is\r\n```\r\n<snip>\r\nPassed all 0 test cases with 1 assertion.\r\n```\r\nwhich, while kind-of correct, is surprising. Standard console reporter's output looks like this:\r\n```\r\n<snip>\r\ntest cases: 1 | 1 failed as expected\r\nassertions: 3 | 1 passed | 2 failed as expected\r\n```\r\nwhich is much clearer about what happened and should be in some way replicated by the compact reporter.\r\n\r\n\r\n### Extra information\r\n* Catch version: **v1.8.2**\r\n\n",
        "hints_text": "I thought a bit about how this might look like but any attempts to have all the information on a single line ended up being quite messy (and it will only get worse with #2360). How about we just copy the output format from the console reporter exactly, save for the \"totals divider\"?\nYeah, that seems fine.\nOkay, stylistically, would you prefer (1) a common base class for console and compact reporter, (2) free functions used by both or (3) code duplication?\n2) or 3), depending on how annoying the signature would be. I don't think the console and compact reporters should have a shared base class.",
        "created_at": "2022-10-24T12:27:56Z",
        "version": "3.1"
    }
}