{
    "task_id": "catchorg__Catch2-1815",
    "setup_info": {
        "repo_path": "testbed/catchorg__Catch2-1815_2025-06-29_23-16-37",
        "repo_cache_path": "testbed/catchorg/Catch2_cache"
    },
    "task_info": {
        "repo": "catchorg/Catch2",
        "pull_number": 1815,
        "instance_id": "catchorg__Catch2-1815",
        "issue_numbers": [
            "1809",
            "1809"
        ],
        "base_commit": "9a8963133fb7ce9ce31802160d8e351e0ac5527c",
        "patch": "diff --git a/include/internal/catch_generators.hpp b/include/internal/catch_generators.hpp\n--- a/include/internal/catch_generators.hpp\n+++ b/include/internal/catch_generators.hpp\n@@ -57,7 +57,6 @@ namespace Generators {\n     class SingleValueGenerator final : public IGenerator<T> {\n         T m_value;\n     public:\n-        SingleValueGenerator(T const& value) : m_value( value ) {}\n         SingleValueGenerator(T&& value) : m_value(std::move(value)) {}\n \n         T const& get() const override {\n@@ -120,21 +119,21 @@ namespace Generators {\n             m_generators.emplace_back(std::move(generator));\n         }\n         void populate(T&& val) {\n-            m_generators.emplace_back(value(std::move(val)));\n+            m_generators.emplace_back(value(std::forward<T>(val)));\n         }\n         template<typename U>\n         void populate(U&& val) {\n-            populate(T(std::move(val)));\n+            populate(T(std::forward<U>(val)));\n         }\n         template<typename U, typename... Gs>\n-        void populate(U&& valueOrGenerator, Gs... moreGenerators) {\n+        void populate(U&& valueOrGenerator, Gs &&... moreGenerators) {\n             populate(std::forward<U>(valueOrGenerator));\n             populate(std::forward<Gs>(moreGenerators)...);\n         }\n \n     public:\n         template <typename... Gs>\n-        Generators(Gs... moreGenerators) {\n+        Generators(Gs &&... moreGenerators) {\n             m_generators.reserve(sizeof...(Gs));\n             populate(std::forward<Gs>(moreGenerators)...);\n         }\n@@ -166,7 +165,7 @@ namespace Generators {\n     struct as {};\n \n     template<typename T, typename... Gs>\n-    auto makeGenerators( GeneratorWrapper<T>&& generator, Gs... moreGenerators ) -> Generators<T> {\n+    auto makeGenerators( GeneratorWrapper<T>&& generator, Gs &&... moreGenerators ) -> Generators<T> {\n         return Generators<T>(std::move(generator), std::forward<Gs>(moreGenerators)...);\n     }\n     template<typename T>\n@@ -174,11 +173,11 @@ namespace Generators {\n         return Generators<T>(std::move(generator));\n     }\n     template<typename T, typename... Gs>\n-    auto makeGenerators( T&& val, Gs... moreGenerators ) -> Generators<T> {\n+    auto makeGenerators( T&& val, Gs &&... moreGenerators ) -> Generators<T> {\n         return makeGenerators( value( std::forward<T>( val ) ), std::forward<Gs>( moreGenerators )... );\n     }\n     template<typename T, typename U, typename... Gs>\n-    auto makeGenerators( as<T>, U&& val, Gs... moreGenerators ) -> Generators<T> {\n+    auto makeGenerators( as<T>, U&& val, Gs &&... moreGenerators ) -> Generators<T> {\n         return makeGenerators( value( T( std::forward<U>( val ) ) ), std::forward<Gs>( moreGenerators )... );\n     }\n \n",
        "test_patch": "diff --git a/projects/SelfTest/IntrospectiveTests/GeneratorsImpl.tests.cpp b/projects/SelfTest/IntrospectiveTests/GeneratorsImpl.tests.cpp\n--- a/projects/SelfTest/IntrospectiveTests/GeneratorsImpl.tests.cpp\n+++ b/projects/SelfTest/IntrospectiveTests/GeneratorsImpl.tests.cpp\n@@ -181,7 +181,7 @@ TEST_CASE(\"Generators internals\", \"[generators][internals]\") {\n                     const auto step = .1;\n \n                     auto gen = range(rangeStart, rangeEnd, step);\n-                    auto expected = rangeStart; \n+                    auto expected = rangeStart;\n                     while( (rangeEnd - expected) > step ) {\n                         INFO( \"Current expected value is \" << expected )\n                         REQUIRE(gen.get() == Approx(expected));\n@@ -198,7 +198,7 @@ TEST_CASE(\"Generators internals\", \"[generators][internals]\") {\n                     const auto step = .3;\n \n                     auto gen = range(rangeStart, rangeEnd, step);\n-                    auto expected = rangeStart; \n+                    auto expected = rangeStart;\n                     while( (rangeEnd - expected) > step ) {\n                        INFO( \"Current expected value is \" << expected )\n                        REQUIRE(gen.get() == Approx(expected));\n@@ -214,7 +214,7 @@ TEST_CASE(\"Generators internals\", \"[generators][internals]\") {\n                     const auto step = .3;\n \n                     auto gen = range(rangeStart, rangeEnd, step);\n-                    auto expected = rangeStart; \n+                    auto expected = rangeStart;\n                     while( (rangeEnd - expected) > step ) {\n                        INFO( \"Current expected value is \" << expected )\n                        REQUIRE(gen.get() == Approx(expected));\n@@ -223,7 +223,7 @@ TEST_CASE(\"Generators internals\", \"[generators][internals]\") {\n                        expected += step;\n                     }\n                     REQUIRE_FALSE(gen.next());\n-                }                \n+                }\n             }\n         }\n         SECTION(\"Negative manual step\") {\n@@ -311,6 +311,21 @@ TEST_CASE(\"GENERATE capture macros\", \"[generators][internals][approvals]\") {\n     REQUIRE(value == value2);\n }\n \n+TEST_CASE(\"#1809 - GENERATE_COPY and SingleValueGenerator does not compile\", \"[generators][compilation][approvals]\") {\n+    // Verify Issue #1809 fix, only needs to compile.\n+    auto a = GENERATE_COPY(1, 2);\n+    (void)a;\n+    auto b = GENERATE_COPY(as<long>{}, 1, 2);\n+    (void)b;\n+    int i = 1;\n+    int j = 2;\n+    auto c = GENERATE_COPY(i, j);\n+    (void)c;\n+    auto d = GENERATE_COPY(as<long>{}, i, j);\n+    (void)d;\n+    SUCCEED();\n+}\n+\n TEST_CASE(\"Multiple random generators in one test case output different values\", \"[generators][internals][approvals]\") {\n     SECTION(\"Integer\") {\n         auto random1 = Catch::Generators::random(0, 1000);\n",
        "problem_statement": "Can't compile SingleValueGenerator inside GENERATE_COPY\n**Describe the bug**\r\nAttempting to invoke the `SingleValueGenerator` (using external variables) inside `GENERATE_COPY` like so...\r\n```C++\r\nint a = 1;\r\nint b = 2;\r\nint c = GENERATE_COPY( a,b );\r\n```\r\nresults in a compilation error:\r\n```C++\r\nerror: no matching function for call to 'Catch::Generators::GeneratorWrapper<const int&>::GeneratorWrapper(Catch::Generators::GeneratorWrapper<const int>)'\r\n  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\r\n```\r\n\r\n**Expected behavior**\r\nThe above example code should compile fine, since `GENERATE_COPY` should allow the use of external variables (`a` and `b`) in any generator. For example, the following code compiles totally fine (using `RangeGenerator`):\r\n```C++\r\nint a = 1;\r\nint b = 2;\r\nint c = GENERATE_COPY( range(a,b) );\r\n```\r\n\r\n**Reproduction steps**\r\nself-contained code **`bugdemo.cpp`:**\r\n```C++\r\n#include \"catch.hpp\"\r\n\r\nTEST_CASE( \"bug \" ) {\r\n    \r\n    int a = 1;\r\n    int b = 2;\r\n    int c = GENERATE_COPY(a, b);\r\n    REQUIRE( true );\r\n}\r\n```\r\nand compiled simply with\r\n```\r\ng++ -std=c++14 -c bugdemo.cpp\r\n```\r\n\r\n**Platform information:**\r\n<!-- Fill in any extra information that might be important for your issue. -->\r\n - OS: **MacOS 10.14** and **Ubuntu 18.04**\r\n - Compiler+version: **GCC v8.2.0** and **GCC v7.4.0** and **clang v10.0.0** (and all other versions on system)\r\n - Catch version: **v2.10.0**\r\n\nCan't compile SingleValueGenerator inside GENERATE_COPY\n**Describe the bug**\r\nAttempting to invoke the `SingleValueGenerator` (using external variables) inside `GENERATE_COPY` like so...\r\n```C++\r\nint a = 1;\r\nint b = 2;\r\nint c = GENERATE_COPY( a,b );\r\n```\r\nresults in a compilation error:\r\n```C++\r\nerror: no matching function for call to 'Catch::Generators::GeneratorWrapper<const int&>::GeneratorWrapper(Catch::Generators::GeneratorWrapper<const int>)'\r\n  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\r\n```\r\n\r\n**Expected behavior**\r\nThe above example code should compile fine, since `GENERATE_COPY` should allow the use of external variables (`a` and `b`) in any generator. For example, the following code compiles totally fine (using `RangeGenerator`):\r\n```C++\r\nint a = 1;\r\nint b = 2;\r\nint c = GENERATE_COPY( range(a,b) );\r\n```\r\n\r\n**Reproduction steps**\r\nself-contained code **`bugdemo.cpp`:**\r\n```C++\r\n#include \"catch.hpp\"\r\n\r\nTEST_CASE( \"bug \" ) {\r\n    \r\n    int a = 1;\r\n    int b = 2;\r\n    int c = GENERATE_COPY(a, b);\r\n    REQUIRE( true );\r\n}\r\n```\r\nand compiled simply with\r\n```\r\ng++ -std=c++14 -c bugdemo.cpp\r\n```\r\n\r\n**Platform information:**\r\n<!-- Fill in any extra information that might be important for your issue. -->\r\n - OS: **MacOS 10.14** and **Ubuntu 18.04**\r\n - Compiler+version: **GCC v8.2.0** and **GCC v7.4.0** and **clang v10.0.0** (and all other versions on system)\r\n - Catch version: **v2.10.0**\r\n\n",
        "hints_text": "\n",
        "created_at": "2019-12-15T06:22:30Z",
        "version": "2.11"
    }
}