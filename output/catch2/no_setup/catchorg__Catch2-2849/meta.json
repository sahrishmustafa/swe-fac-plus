{
    "task_id": "catchorg__Catch2-2849",
    "setup_info": {
        "repo_path": "testbed/catchorg__Catch2-2849_2025-06-29_23-16-37",
        "repo_cache_path": "testbed/catchorg/Catch2_cache"
    },
    "task_info": {
        "repo": "catchorg/Catch2",
        "pull_number": 2849,
        "instance_id": "catchorg__Catch2-2849",
        "issue_numbers": [
            "2833"
        ],
        "base_commit": "7ce35799767de7b9c6ba836c72e479c5f70219a3",
        "patch": "diff --git a/src/catch2/internal/catch_textflow.cpp b/src/catch2/internal/catch_textflow.cpp\n--- a/src/catch2/internal/catch_textflow.cpp\n+++ b/src/catch2/internal/catch_textflow.cpp\n@@ -26,117 +26,228 @@ namespace {\n         return std::memchr( chars, c, sizeof( chars ) - 1 ) != nullptr;\n     }\n \n-    bool isBoundary( std::string const& line, size_t at ) {\n-        assert( at > 0 );\n-        assert( at <= line.size() );\n-\n-        return at == line.size() ||\n-               ( isWhitespace( line[at] ) && !isWhitespace( line[at - 1] ) ) ||\n-               isBreakableBefore( line[at] ) ||\n-               isBreakableAfter( line[at - 1] );\n-    }\n-\n } // namespace\n \n namespace Catch {\n     namespace TextFlow {\n+        void AnsiSkippingString::preprocessString() {\n+            for ( auto it = m_string.begin(); it != m_string.end(); ) {\n+                // try to read through an ansi sequence\n+                while ( it != m_string.end() && *it == '\\033' &&\n+                        it + 1 != m_string.end() && *( it + 1 ) == '[' ) {\n+                    auto cursor = it + 2;\n+                    while ( cursor != m_string.end() &&\n+                            ( isdigit( *cursor ) || *cursor == ';' ) ) {\n+                        ++cursor;\n+                    }\n+                    if ( cursor == m_string.end() || *cursor != 'm' ) {\n+                        break;\n+                    }\n+                    // 'm' -> 0xff\n+                    *cursor = AnsiSkippingString::sentinel;\n+                    // if we've read an ansi sequence, set the iterator and\n+                    // return to the top of the loop\n+                    it = cursor + 1;\n+                }\n+                if ( it != m_string.end() ) {\n+                    ++m_size;\n+                    ++it;\n+                }\n+            }\n+        }\n+\n+        AnsiSkippingString::AnsiSkippingString( std::string const& text ):\n+            m_string( text ) {\n+            preprocessString();\n+        }\n+\n+        AnsiSkippingString::AnsiSkippingString( std::string&& text ):\n+            m_string( CATCH_MOVE( text ) ) {\n+            preprocessString();\n+        }\n+\n+        AnsiSkippingString::const_iterator AnsiSkippingString::begin() const {\n+            return const_iterator( m_string );\n+        }\n+\n+        AnsiSkippingString::const_iterator AnsiSkippingString::end() const {\n+            return const_iterator( m_string, const_iterator::EndTag{} );\n+        }\n+\n+        std::string AnsiSkippingString::substring( const_iterator begin,\n+                                                   const_iterator end ) const {\n+            // There's one caveat here to an otherwise simple substring: when\n+            // making a begin iterator we might have skipped ansi sequences at\n+            // the start. If `begin` here is a begin iterator, skipped over\n+            // initial ansi sequences, we'll use the true beginning of the\n+            // string. Lastly: We need to transform any chars we replaced with\n+            // 0xff back to 'm'\n+            auto str = std::string( begin == this->begin() ? m_string.begin()\n+                                                           : begin.m_it,\n+                                    end.m_it );\n+            std::transform( str.begin(), str.end(), str.begin(), []( char c ) {\n+                return c == AnsiSkippingString::sentinel ? 'm' : c;\n+            } );\n+            return str;\n+        }\n+\n+        void AnsiSkippingString::const_iterator::tryParseAnsiEscapes() {\n+            // check if we've landed on an ansi sequence, and if so read through\n+            // it\n+            while ( m_it != m_string->end() && *m_it == '\\033' &&\n+                    m_it + 1 != m_string->end() &&  *( m_it + 1 ) == '[' ) {\n+                auto cursor = m_it + 2;\n+                while ( cursor != m_string->end() &&\n+                        ( isdigit( *cursor ) || *cursor == ';' ) ) {\n+                    ++cursor;\n+                }\n+                if ( cursor == m_string->end() ||\n+                     *cursor != AnsiSkippingString::sentinel ) {\n+                    break;\n+                }\n+                // if we've read an ansi sequence, set the iterator and\n+                // return to the top of the loop\n+                m_it = cursor + 1;\n+            }\n+        }\n+\n+        void AnsiSkippingString::const_iterator::advance() {\n+            assert( m_it != m_string->end() );\n+            m_it++;\n+            tryParseAnsiEscapes();\n+        }\n+\n+        void AnsiSkippingString::const_iterator::unadvance() {\n+            assert( m_it != m_string->begin() );\n+            m_it--;\n+            // if *m_it is 0xff, scan back to the \\033 and then m_it-- once more\n+            // (and repeat check)\n+            while ( *m_it == AnsiSkippingString::sentinel ) {\n+                while ( *m_it != '\\033' ) {\n+                    assert( m_it != m_string->begin() );\n+                    m_it--;\n+                }\n+                // if this happens, we must have been a begin iterator that had\n+                // skipped over ansi sequences at the start of a string\n+                assert( m_it != m_string->begin() );\n+                assert( *m_it == '\\033' );\n+                m_it--;\n+            }\n+        }\n+\n+        static bool isBoundary( AnsiSkippingString const& line,\n+                                AnsiSkippingString::const_iterator it ) {\n+            return it == line.end() ||\n+                   ( isWhitespace( *it ) &&\n+                     !isWhitespace( *it.oneBefore() ) ) ||\n+                   isBreakableBefore( *it ) ||\n+                   isBreakableAfter( *it.oneBefore() );\n+        }\n \n         void Column::const_iterator::calcLength() {\n             m_addHyphen = false;\n             m_parsedTo = m_lineStart;\n+            AnsiSkippingString const& current_line = m_column.m_string;\n \n-            std::string const& current_line = m_column.m_string;\n-            if ( current_line[m_lineStart] == '\\n' ) {\n-                ++m_parsedTo;\n+            if ( m_parsedTo == current_line.end() ) {\n+                m_lineEnd = m_parsedTo;\n+                return;\n             }\n \n+            assert( m_lineStart != current_line.end() );\n+            if ( *m_lineStart == '\\n' ) { ++m_parsedTo; }\n+\n             const auto maxLineLength = m_column.m_width - indentSize();\n-            const auto maxParseTo = std::min(current_line.size(), m_lineStart + maxLineLength);\n-            while ( m_parsedTo < maxParseTo &&\n-                    current_line[m_parsedTo] != '\\n' ) {\n+            std::size_t lineLength = 0;\n+            while ( m_parsedTo != current_line.end() &&\n+                    lineLength < maxLineLength && *m_parsedTo != '\\n' ) {\n                 ++m_parsedTo;\n+                ++lineLength;\n             }\n \n             // If we encountered a newline before the column is filled,\n             // then we linebreak at the newline and consider this line\n             // finished.\n-            if ( m_parsedTo < m_lineStart + maxLineLength ) {\n-                m_lineLength = m_parsedTo - m_lineStart;\n+            if ( lineLength < maxLineLength ) {\n+                m_lineEnd = m_parsedTo;\n             } else {\n                 // Look for a natural linebreak boundary in the column\n                 // (We look from the end, so that the first found boundary is\n                 // the right one)\n-                size_t newLineLength = maxLineLength;\n-                while ( newLineLength > 0 && !isBoundary( current_line, m_lineStart + newLineLength ) ) {\n-                    --newLineLength;\n+                m_lineEnd = m_parsedTo;\n+                while ( lineLength > 0 &&\n+                        !isBoundary( current_line, m_lineEnd ) ) {\n+                    --lineLength;\n+                    --m_lineEnd;\n                 }\n-                while ( newLineLength > 0 &&\n-                        isWhitespace( current_line[m_lineStart + newLineLength - 1] ) ) {\n-                    --newLineLength;\n+                while ( lineLength > 0 &&\n+                        isWhitespace( *m_lineEnd.oneBefore() ) ) {\n+                    --lineLength;\n+                    --m_lineEnd;\n                 }\n \n-                // If we found one, then that is where we linebreak\n-                if ( newLineLength > 0 ) {\n-                    m_lineLength = newLineLength;\n-                } else {\n-                    // Otherwise we have to split text with a hyphen\n+                // If we found one, then that is where we linebreak, otherwise\n+                // we have to split text with a hyphen\n+                if ( lineLength == 0 ) {\n                     m_addHyphen = true;\n-                    m_lineLength = maxLineLength - 1;\n+                    m_lineEnd = m_parsedTo.oneBefore();\n                 }\n             }\n         }\n \n         size_t Column::const_iterator::indentSize() const {\n-            auto initial =\n-                m_lineStart == 0 ? m_column.m_initialIndent : std::string::npos;\n+            auto initial = m_lineStart == m_column.m_string.begin()\n+                               ? m_column.m_initialIndent\n+                               : std::string::npos;\n             return initial == std::string::npos ? m_column.m_indent : initial;\n         }\n \n-        std::string\n-        Column::const_iterator::addIndentAndSuffix( size_t position,\n-                                              size_t length ) const {\n+        std::string Column::const_iterator::addIndentAndSuffix(\n+            AnsiSkippingString::const_iterator start,\n+            AnsiSkippingString::const_iterator end ) const {\n             std::string ret;\n             const auto desired_indent = indentSize();\n-            ret.reserve( desired_indent + length + m_addHyphen );\n+            // ret.reserve( desired_indent + (end - start) + m_addHyphen );\n             ret.append( desired_indent, ' ' );\n-            ret.append( m_column.m_string, position, length );\n-            if ( m_addHyphen ) {\n-                ret.push_back( '-' );\n-            }\n+            // ret.append( start, end );\n+            ret += m_column.m_string.substring( start, end );\n+            if ( m_addHyphen ) { ret.push_back( '-' ); }\n \n             return ret;\n         }\n \n-        Column::const_iterator::const_iterator( Column const& column ): m_column( column ) {\n+        Column::const_iterator::const_iterator( Column const& column ):\n+            m_column( column ),\n+            m_lineStart( column.m_string.begin() ),\n+            m_lineEnd( column.m_string.begin() ),\n+            m_parsedTo( column.m_string.begin() ) {\n             assert( m_column.m_width > m_column.m_indent );\n             assert( m_column.m_initialIndent == std::string::npos ||\n                     m_column.m_width > m_column.m_initialIndent );\n             calcLength();\n-            if ( m_lineLength == 0 ) {\n-                m_lineStart = m_column.m_string.size();\n+            if ( m_lineStart == m_lineEnd ) {\n+                m_lineStart = m_column.m_string.end();\n             }\n         }\n \n         std::string Column::const_iterator::operator*() const {\n             assert( m_lineStart <= m_parsedTo );\n-            return addIndentAndSuffix( m_lineStart, m_lineLength );\n+            return addIndentAndSuffix( m_lineStart, m_lineEnd );\n         }\n \n         Column::const_iterator& Column::const_iterator::operator++() {\n-            m_lineStart += m_lineLength;\n-            std::string const& current_line = m_column.m_string;\n-            if ( m_lineStart < current_line.size() && current_line[m_lineStart] == '\\n' ) {\n-                m_lineStart += 1;\n+            m_lineStart = m_lineEnd;\n+            AnsiSkippingString const& current_line = m_column.m_string;\n+            if ( m_lineStart != current_line.end() && *m_lineStart == '\\n' ) {\n+                m_lineStart++;\n             } else {\n-                while ( m_lineStart < current_line.size() &&\n-                        isWhitespace( current_line[m_lineStart] ) ) {\n+                while ( m_lineStart != current_line.end() &&\n+                        isWhitespace( *m_lineStart ) ) {\n                     ++m_lineStart;\n                 }\n             }\n \n-            if ( m_lineStart != current_line.size() ) {\n-                calcLength();\n-            }\n+            if ( m_lineStart != current_line.end() ) { calcLength(); }\n             return *this;\n         }\n \n@@ -233,25 +344,25 @@ namespace Catch {\n             return os;\n         }\n \n-        Columns operator+(Column const& lhs, Column const& rhs) {\n+        Columns operator+( Column const& lhs, Column const& rhs ) {\n             Columns cols;\n             cols += lhs;\n             cols += rhs;\n             return cols;\n         }\n-        Columns operator+(Column&& lhs, Column&& rhs) {\n+        Columns operator+( Column&& lhs, Column&& rhs ) {\n             Columns cols;\n             cols += CATCH_MOVE( lhs );\n             cols += CATCH_MOVE( rhs );\n             return cols;\n         }\n \n-        Columns& operator+=(Columns& lhs, Column const& rhs) {\n+        Columns& operator+=( Columns& lhs, Column const& rhs ) {\n             lhs.m_columns.push_back( rhs );\n             return lhs;\n         }\n-        Columns& operator+=(Columns& lhs, Column&& rhs) {\n-            lhs.m_columns.push_back( CATCH_MOVE(rhs) );\n+        Columns& operator+=( Columns& lhs, Column&& rhs ) {\n+            lhs.m_columns.push_back( CATCH_MOVE( rhs ) );\n             return lhs;\n         }\n         Columns operator+( Columns const& lhs, Column const& rhs ) {\ndiff --git a/src/catch2/internal/catch_textflow.hpp b/src/catch2/internal/catch_textflow.hpp\n--- a/src/catch2/internal/catch_textflow.hpp\n+++ b/src/catch2/internal/catch_textflow.hpp\n@@ -20,6 +20,107 @@ namespace Catch {\n \n         class Columns;\n \n+        /**\n+         * Abstraction for a string with ansi escape sequences that\n+         * automatically skips over escapes when iterating. Only graphical\n+         * escape sequences are considered.\n+         *\n+         * Internal representation:\n+         * An escape sequence looks like \\033[39;49m\n+         * We need bidirectional iteration and the unbound length of escape\n+         * sequences poses a problem for operator-- To make this work we'll\n+         * replace the last `m` with a 0xff (this is a codepoint that won't have\n+         * any utf-8 meaning).\n+         */\n+        class AnsiSkippingString {\n+            std::string m_string;\n+            std::size_t m_size = 0;\n+\n+            // perform 0xff replacement and calculate m_size\n+            void preprocessString();\n+\n+        public:\n+            class const_iterator;\n+            using iterator = const_iterator;\n+            // note: must be u-suffixed or this will cause a \"truncation of\n+            // constant value\" warning on MSVC\n+            static constexpr char sentinel = static_cast<char>( 0xffu );\n+\n+            explicit AnsiSkippingString( std::string const& text );\n+            explicit AnsiSkippingString( std::string&& text );\n+\n+            const_iterator begin() const;\n+            const_iterator end() const;\n+\n+            size_t size() const { return m_size; }\n+\n+            std::string substring( const_iterator begin,\n+                                   const_iterator end ) const;\n+        };\n+\n+        class AnsiSkippingString::const_iterator {\n+            friend AnsiSkippingString;\n+            struct EndTag {};\n+\n+            const std::string* m_string;\n+            std::string::const_iterator m_it;\n+\n+            explicit const_iterator( const std::string& string, EndTag ):\n+                m_string( &string ), m_it( string.end() ) {}\n+\n+            void tryParseAnsiEscapes();\n+            void advance();\n+            void unadvance();\n+\n+        public:\n+            using difference_type = std::ptrdiff_t;\n+            using value_type = char;\n+            using pointer = value_type*;\n+            using reference = value_type&;\n+            using iterator_category = std::bidirectional_iterator_tag;\n+\n+            explicit const_iterator( const std::string& string ):\n+                m_string( &string ), m_it( string.begin() ) {\n+                tryParseAnsiEscapes();\n+            }\n+\n+            char operator*() const { return *m_it; }\n+\n+            const_iterator& operator++() {\n+                advance();\n+                return *this;\n+            }\n+            const_iterator operator++( int ) {\n+                iterator prev( *this );\n+                operator++();\n+                return prev;\n+            }\n+            const_iterator& operator--() {\n+                unadvance();\n+                return *this;\n+            }\n+            const_iterator operator--( int ) {\n+                iterator prev( *this );\n+                operator--();\n+                return prev;\n+            }\n+\n+            bool operator==( const_iterator const& other ) const {\n+                return m_it == other.m_it;\n+            }\n+            bool operator!=( const_iterator const& other ) const {\n+                return !operator==( other );\n+            }\n+            bool operator<=( const_iterator const& other ) const {\n+                return m_it <= other.m_it;\n+            }\n+\n+            const_iterator oneBefore() const {\n+                auto it = *this;\n+                return --it;\n+            }\n+        };\n+\n         /**\n          * Represents a column of text with specific width and indentation\n          *\n@@ -29,10 +130,11 @@ namespace Catch {\n          */\n         class Column {\n             // String to be written out\n-            std::string m_string;\n+            AnsiSkippingString m_string;\n             // Width of the column for linebreaking\n             size_t m_width = CATCH_CONFIG_CONSOLE_WIDTH - 1;\n-            // Indentation of other lines (including first if initial indent is unset)\n+            // Indentation of other lines (including first if initial indent is\n+            // unset)\n             size_t m_indent = 0;\n             // Indentation of the first line\n             size_t m_initialIndent = std::string::npos;\n@@ -47,16 +149,19 @@ namespace Catch {\n \n                 Column const& m_column;\n                 // Where does the current line start?\n-                size_t m_lineStart = 0;\n+                AnsiSkippingString::const_iterator m_lineStart;\n                 // How long should the current line be?\n-                size_t m_lineLength = 0;\n+                AnsiSkippingString::const_iterator m_lineEnd;\n                 // How far have we checked the string to iterate?\n-                size_t m_parsedTo = 0;\n+                AnsiSkippingString::const_iterator m_parsedTo;\n                 // Should a '-' be appended to the line?\n                 bool m_addHyphen = false;\n \n                 const_iterator( Column const& column, EndTag ):\n-                    m_column( column ), m_lineStart( m_column.m_string.size() ) {}\n+                    m_column( column ),\n+                    m_lineStart( m_column.m_string.end() ),\n+                    m_lineEnd( column.m_string.end() ),\n+                    m_parsedTo( column.m_string.end() ) {}\n \n                 // Calculates the length of the current line\n                 void calcLength();\n@@ -66,8 +171,9 @@ namespace Catch {\n \n                 // Creates an indented and (optionally) suffixed string from\n                 // current iterator position, indentation and length.\n-                std::string addIndentAndSuffix( size_t position,\n-                                                size_t length ) const;\n+                std::string addIndentAndSuffix(\n+                    AnsiSkippingString::const_iterator start,\n+                    AnsiSkippingString::const_iterator end ) const;\n \n             public:\n                 using difference_type = std::ptrdiff_t;\n@@ -84,7 +190,8 @@ namespace Catch {\n                 const_iterator operator++( int );\n \n                 bool operator==( const_iterator const& other ) const {\n-                    return m_lineStart == other.m_lineStart && &m_column == &other.m_column;\n+                    return m_lineStart == other.m_lineStart &&\n+                           &m_column == &other.m_column;\n                 }\n                 bool operator!=( const_iterator const& other ) const {\n                     return !operator==( other );\n@@ -94,7 +201,7 @@ namespace Catch {\n \n             explicit Column( std::string const& text ): m_string( text ) {}\n             explicit Column( std::string&& text ):\n-                m_string( CATCH_MOVE(text)) {}\n+                m_string( CATCH_MOVE( text ) ) {}\n \n             Column& width( size_t newWidth ) & {\n                 assert( newWidth > 0 );\n@@ -125,7 +232,9 @@ namespace Catch {\n \n             size_t width() const { return m_width; }\n             const_iterator begin() const { return const_iterator( *this ); }\n-            const_iterator end() const { return { *this, const_iterator::EndTag{} }; }\n+            const_iterator end() const {\n+                return { *this, const_iterator::EndTag{} };\n+            }\n \n             friend std::ostream& operator<<( std::ostream& os,\n                                              Column const& col );\n",
        "test_patch": "diff --git a/tests/SelfTest/IntrospectiveTests/TextFlow.tests.cpp b/tests/SelfTest/IntrospectiveTests/TextFlow.tests.cpp\n--- a/tests/SelfTest/IntrospectiveTests/TextFlow.tests.cpp\n+++ b/tests/SelfTest/IntrospectiveTests/TextFlow.tests.cpp\n@@ -12,6 +12,7 @@\n #include <sstream>\n \n using Catch::TextFlow::Column;\n+using Catch::TextFlow::AnsiSkippingString;\n \n namespace {\n     static std::string as_written(Column const& c) {\n@@ -198,3 +199,202 @@ TEST_CASE( \"#1400 - TextFlow::Column wrapping would sometimes duplicate words\",\n             \"  in \\n\"\n             \"  convallis posuere, libero nisi ultricies orci, nec lobortis.\");\n }\n+\n+TEST_CASE( \"TextFlow::AnsiSkippingString skips ansi sequences\",\n+           \"[TextFlow][ansiskippingstring][approvals]\" ) {\n+\n+    SECTION(\"basic string\") {\n+        std::string text = \"a\\033[38;2;98;174;239mb\\033[38mc\\033[0md\\033[me\";\n+        AnsiSkippingString str(text);\n+\n+        SECTION( \"iterates forward\" ) {\n+            auto it = str.begin();\n+            CHECK(*it == 'a');\n+            ++it;\n+            CHECK(*it == 'b');\n+            ++it;\n+            CHECK(*it == 'c');\n+            ++it;\n+            CHECK(*it == 'd');\n+            ++it;\n+            CHECK(*it == 'e');\n+            ++it;\n+            CHECK(it == str.end());\n+        }\n+        SECTION( \"iterates backwards\" ) {\n+            auto it = str.end();\n+            --it;\n+            CHECK(*it == 'e');\n+            --it;\n+            CHECK(*it == 'd');\n+            --it;\n+            CHECK(*it == 'c');\n+            --it;\n+            CHECK(*it == 'b');\n+            --it;\n+            CHECK(*it == 'a');\n+            CHECK(it == str.begin());\n+        }\n+    }\n+\n+    SECTION( \"ansi escape sequences at the start\" ) {\n+        std::string text = \"\\033[38;2;98;174;239ma\\033[38;2;98;174;239mb\\033[38mc\\033[0md\\033[me\";\n+        AnsiSkippingString str(text);\n+        auto it = str.begin();\n+        CHECK(*it == 'a');\n+        ++it;\n+        CHECK(*it == 'b');\n+        ++it;\n+        CHECK(*it == 'c');\n+        ++it;\n+        CHECK(*it == 'd');\n+        ++it;\n+        CHECK(*it == 'e');\n+        ++it;\n+        CHECK(it == str.end());\n+        --it;\n+        CHECK(*it == 'e');\n+        --it;\n+        CHECK(*it == 'd');\n+        --it;\n+        CHECK(*it == 'c');\n+        --it;\n+        CHECK(*it == 'b');\n+        --it;\n+        CHECK(*it == 'a');\n+        CHECK(it == str.begin());\n+    }\n+\n+    SECTION( \"ansi escape sequences at the end\" ) {\n+        std::string text = \"a\\033[38;2;98;174;239mb\\033[38mc\\033[0md\\033[me\\033[38;2;98;174;239m\";\n+        AnsiSkippingString str(text);\n+        auto it = str.begin();\n+        CHECK(*it == 'a');\n+        ++it;\n+        CHECK(*it == 'b');\n+        ++it;\n+        CHECK(*it == 'c');\n+        ++it;\n+        CHECK(*it == 'd');\n+        ++it;\n+        CHECK(*it == 'e');\n+        ++it;\n+        CHECK(it == str.end());\n+        --it;\n+        CHECK(*it == 'e');\n+        --it;\n+        CHECK(*it == 'd');\n+        --it;\n+        CHECK(*it == 'c');\n+        --it;\n+        CHECK(*it == 'b');\n+        --it;\n+        CHECK(*it == 'a');\n+        CHECK(it == str.begin());\n+    }\n+\n+    SECTION( \"skips consecutive escapes\" ) {\n+        std::string text = \"\\033[38;2;98;174;239m\\033[38;2;98;174;239ma\\033[38;2;98;174;239mb\\033[38m\\033[38m\\033[38mc\\033[0md\\033[me\";\n+        AnsiSkippingString str(text);\n+        auto it = str.begin();\n+        CHECK(*it == 'a');\n+        ++it;\n+        CHECK(*it == 'b');\n+        ++it;\n+        CHECK(*it == 'c');\n+        ++it;\n+        CHECK(*it == 'd');\n+        ++it;\n+        CHECK(*it == 'e');\n+        ++it;\n+        CHECK(it == str.end());\n+        --it;\n+        CHECK(*it == 'e');\n+        --it;\n+        CHECK(*it == 'd');\n+        --it;\n+        CHECK(*it == 'c');\n+        --it;\n+        CHECK(*it == 'b');\n+        --it;\n+        CHECK(*it == 'a');\n+        CHECK(it == str.begin());\n+    }\n+\n+    SECTION( \"handles incomplete ansi sequences\" ) {\n+        std::string text = \"a\\033[b\\033[30c\\033[30;d\\033[30;2e\";\n+        AnsiSkippingString str(text);\n+        CHECK(std::string(str.begin(), str.end()) == text);\n+    }\n+}\n+\n+TEST_CASE( \"TextFlow::AnsiSkippingString computes the size properly\",\n+           \"[TextFlow][ansiskippingstring][approvals]\" ) {\n+    std::string text = \"\\033[38;2;98;174;239m\\033[38;2;98;174;239ma\\033[38;2;98;174;239mb\\033[38m\\033[38m\\033[38mc\\033[0md\\033[me\";\n+    AnsiSkippingString str(text);\n+    CHECK(str.size() == 5);\n+}\n+\n+TEST_CASE( \"TextFlow::AnsiSkippingString substrings properly\",\n+           \"[TextFlow][ansiskippingstring][approvals]\" ) {\n+    SECTION(\"basic test\") {\n+        std::string text = \"a\\033[38;2;98;174;239mb\\033[38mc\\033[0md\\033[me\";\n+        AnsiSkippingString str(text);\n+        auto a = str.begin();\n+        auto b = str.begin();\n+        ++b;\n+        ++b;\n+        CHECK(str.substring(a, b) == \"a\\033[38;2;98;174;239mb\\033[38m\");\n+        ++a;\n+        ++b;\n+        CHECK(str.substring(a, b) == \"b\\033[38mc\\033[0m\");\n+        CHECK(str.substring(a, str.end()) == \"b\\033[38mc\\033[0md\\033[me\");\n+        CHECK(str.substring(str.begin(), str.end()) == text);\n+    }\n+    SECTION(\"escapes at the start\") {\n+        std::string text = \"\\033[38;2;98;174;239m\\033[38;2;98;174;239ma\\033[38;2;98;174;239mb\\033[38m\\033[38m\\033[38mc\\033[0md\\033[me\";\n+        AnsiSkippingString str(text);\n+        auto a = str.begin();\n+        auto b = str.begin();\n+        ++b;\n+        ++b;\n+        CHECK(str.substring(a, b) == \"\\033[38;2;98;174;239m\\033[38;2;98;174;239ma\\033[38;2;98;174;239mb\\033[38m\\033[38m\\033[38m\");\n+        ++a;\n+        ++b;\n+        CHECK(str.substring(a, b) == \"b\\033[38m\\033[38m\\033[38mc\\033[0m\");\n+        CHECK(str.substring(a, str.end()) == \"b\\033[38m\\033[38m\\033[38mc\\033[0md\\033[me\");\n+        CHECK(str.substring(str.begin(), str.end()) == text);\n+    }\n+    SECTION(\"escapes at the end\") {\n+        std::string text = \"a\\033[38;2;98;174;239mb\\033[38mc\\033[0md\\033[me\\033[38m\";\n+        AnsiSkippingString str(text);\n+        auto a = str.begin();\n+        auto b = str.begin();\n+        ++b;\n+        ++b;\n+        CHECK(str.substring(a, b) == \"a\\033[38;2;98;174;239mb\\033[38m\");\n+        ++a;\n+        ++b;\n+        CHECK(str.substring(a, b) == \"b\\033[38mc\\033[0m\");\n+        CHECK(str.substring(a, str.end()) == \"b\\033[38mc\\033[0md\\033[me\\033[38m\");\n+        CHECK(str.substring(str.begin(), str.end()) == text);\n+    }\n+}\n+\n+TEST_CASE( \"TextFlow::Column skips ansi escape sequences\",\n+           \"[TextFlow][column][approvals]\" ) {\n+    std::string text = \"\\033[38;2;98;174;239m\\033[38;2;198;120;221mThe quick brown \\033[38;2;198;120;221mfox jumped over the lazy dog\\033[0m\";\n+    Column col(text);\n+\n+    SECTION( \"width=20\" ) {\n+        col.width( 20 );\n+        REQUIRE( as_written( col ) == \"\\033[38;2;98;174;239m\\033[38;2;198;120;221mThe quick brown \\033[38;2;198;120;221mfox\\n\"\n+                                      \"jumped over the lazy\\n\"\n+                                      \"dog\\033[0m\" );\n+    }\n+\n+    SECTION( \"width=80\" ) {\n+        col.width( 80 );\n+        REQUIRE( as_written( col ) == text );\n+    }\n+}\n",
        "problem_statement": "Handle ANSI escape sequences during text wrapping\n**Description**\r\n\r\nI'd like to provide diagnostic messages from a `Catch::Matchers::MatcherBase::describe` function that are colored with ANSI sequences, however Catch2's line wrapping interferes with this.\r\n\r\nWould a PR to update the line wrapping logic be welcomed?\r\n\r\n**Additional context**\r\n\r\nI have an assertion library that I'd like to provide a catch2 integration for. Without color codes, with my current attempt to make it work in Catch2, it looks like this:\r\n\r\n![image](https://github.com/catchorg/Catch2/assets/51220084/4f410b0c-a0c4-472d-935a-37e0068770ba)\r\n\r\nHowever with color codes the lines are messed up and escape sequences are split in the middle:\r\n\r\n![image](https://github.com/catchorg/Catch2/assets/51220084/a600caf7-f047-4c66-90cf-dd41f9eef258)\n",
        "hints_text": "",
        "created_at": "2024-03-29T20:16:51Z",
        "version": "3.5"
    }
}