{
    "task_id": "catchorg__Catch2-2986",
    "setup_info": {
        "repo_path": "testbed/catchorg__Catch2-2986_2025-06-29_23-16-37",
        "repo_cache_path": "testbed/catchorg/Catch2_cache"
    },
    "task_info": {
        "repo": "catchorg/Catch2",
        "pull_number": 2986,
        "instance_id": "catchorg__Catch2-2986",
        "issue_numbers": [
            "2755"
        ],
        "base_commit": "1de7d0ed7be47080f0f436bc88cac73d0af53006",
        "patch": "diff --git a/CMakeLists.txt b/CMakeLists.txt\n--- a/CMakeLists.txt\n+++ b/CMakeLists.txt\n@@ -79,8 +79,8 @@ add_subdirectory(src)\n \n # Build tests only if requested\n if(BUILD_TESTING AND CATCH_BUILD_TESTING AND NOT_SUBPROJECT)\n-  find_package(PythonInterp 3 REQUIRED)\n-  if(NOT PYTHONINTERP_FOUND)\n+  find_package(Python3 REQUIRED COMPONENTS Interpreter)\n+  if(NOT TARGET Python3::Interpreter)\n     message(FATAL_ERROR \"Python not found, but required for tests\")\n   endif()\n   set(CMAKE_FOLDER \"tests\")\n",
        "test_patch": "diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt\n--- a/tests/CMakeLists.txt\n+++ b/tests/CMakeLists.txt\n@@ -342,10 +342,9 @@ set_tests_properties(FilteredSection::GeneratorsDontCauseInfiniteLoop-2\n     PASS_REGULAR_EXPRESSION \"All tests passed \\\\(4 assertions in 1 test case\\\\)\"\n )\n \n-# AppVeyor has a Python 2.7 in path, but doesn't have .py files as autorunnable\n add_test(NAME ApprovalTests\n   COMMAND\n-    ${PYTHON_EXECUTABLE}\n+    Python3::Interpreter\n     ${CATCH_DIR}/tools/scripts/approvalTests.py\n     $<TARGET_FILE:SelfTest>\n     \"${CMAKE_CURRENT_BINARY_DIR}\"\n@@ -408,7 +407,7 @@ set_tests_properties(TagAlias PROPERTIES\n   FAIL_REGULAR_EXPRESSION \"0 matching test cases\"\n )\n \n-add_test(NAME RandomTestOrdering COMMAND ${PYTHON_EXECUTABLE}\n+add_test(NAME RandomTestOrdering COMMAND Python3::Interpreter\n   ${CATCH_DIR}/tests/TestScripts/testRandomOrder.py $<TARGET_FILE:SelfTest>)\n set_tests_properties(RandomTestOrdering\n   PROPERTIES\n@@ -417,7 +416,7 @@ set_tests_properties(RandomTestOrdering\n \n add_test(NAME CheckConvenienceHeaders\n   COMMAND\n-    ${PYTHON_EXECUTABLE} ${CATCH_DIR}/tools/scripts/checkConvenienceHeaders.py\n+    Python3::Interpreter ${CATCH_DIR}/tools/scripts/checkConvenienceHeaders.py\n )\n set_tests_properties(CheckConvenienceHeaders\n   PROPERTIES\n@@ -602,7 +601,7 @@ if(CATCH_ENABLE_CONFIGURE_TESTS)\n                     \"ExperimentalRedirect\")\n     add_test(NAME \"CMakeConfig::${testName}\"\n       COMMAND\n-        \"${PYTHON_EXECUTABLE}\" \"${CMAKE_CURRENT_LIST_DIR}/TestScripts/testConfigure${testName}.py\" \"${CATCH_DIR}\" \"${CMAKE_CURRENT_BINARY_DIR}\"\n+        Python3::Interpreter \"${CMAKE_CURRENT_LIST_DIR}/TestScripts/testConfigure${testName}.py\" \"${CATCH_DIR}\" \"${CMAKE_CURRENT_BINARY_DIR}\"\n     )\n     set_tests_properties(\"CMakeConfig::${testName}\"\n       PROPERTIES\n@@ -615,7 +614,7 @@ endif()\n if(CATCH_ENABLE_CMAKE_HELPER_TESTS)\n   add_test(NAME \"CMakeHelper::DiscoverTests\"\n     COMMAND\n-      \"${PYTHON_EXECUTABLE}\" \"${CMAKE_CURRENT_LIST_DIR}/TestScripts/DiscoverTests/VerifyRegistration.py\" \"${CATCH_DIR}\" \"${CMAKE_CURRENT_BINARY_DIR}\"\n+      Python3::Interpreter \"${CMAKE_CURRENT_LIST_DIR}/TestScripts/DiscoverTests/VerifyRegistration.py\" \"${CATCH_DIR}\" \"${CMAKE_CURRENT_BINARY_DIR}\"\n   )\n   set_tests_properties(\"CMakeHelper::DiscoverTests\"\n     PROPERTIES\ndiff --git a/tests/ExtraTests/CMakeLists.txt b/tests/ExtraTests/CMakeLists.txt\n--- a/tests/ExtraTests/CMakeLists.txt\n+++ b/tests/ExtraTests/CMakeLists.txt\n@@ -5,7 +5,7 @@ message(STATUS \"Extra tests included\")\n \n add_test(\n   NAME TestShardingIntegration\n-  COMMAND ${PYTHON_EXECUTABLE} ${CATCH_DIR}/tests/TestScripts/testSharding.py $<TARGET_FILE:SelfTest>\n+  COMMAND Python3::Interpreter ${CATCH_DIR}/tests/TestScripts/testSharding.py $<TARGET_FILE:SelfTest>\n )\n set_tests_properties(TestShardingIntegration\n   PROPERTIES\n@@ -114,7 +114,7 @@ target_compile_definitions(BazelReporter PRIVATE CATCH_CONFIG_BAZEL_SUPPORT)\n target_link_libraries(BazelReporter Catch2_buildall_interface)\n add_test(NAME CATCH_CONFIG_BAZEL_REPORTER-1\n   COMMAND\n-  \"${PYTHON_EXECUTABLE}\" \"${CATCH_DIR}/tests/TestScripts/testBazelReporter.py\" $<TARGET_FILE:BazelReporter> \"${CMAKE_CURRENT_BINARY_DIR}\"\n+  Python3::Interpreter \"${CATCH_DIR}/tests/TestScripts/testBazelReporter.py\" $<TARGET_FILE:BazelReporter> \"${CMAKE_CURRENT_BINARY_DIR}\"\n )\n set_tests_properties(CATCH_CONFIG_BAZEL_REPORTER-1\n   PROPERTIES\n@@ -126,7 +126,7 @@ add_executable(BazelReporterNoCatchConfig ${TESTS_DIR}/X30-BazelReporter.cpp)\n target_link_libraries(BazelReporterNoCatchConfig Catch2WithMain)\n add_test(NAME NO_CATCH_CONFIG_BAZEL_REPORTER-1\n   COMMAND\n-  \"${PYTHON_EXECUTABLE}\" \"${CATCH_DIR}/tests/TestScripts/testBazelReporter.py\" $<TARGET_FILE:BazelReporterNoCatchConfig> \"${CMAKE_CURRENT_BINARY_DIR}\"\n+  Python3::Interpreter \"${CATCH_DIR}/tests/TestScripts/testBazelReporter.py\" $<TARGET_FILE:BazelReporterNoCatchConfig> \"${CMAKE_CURRENT_BINARY_DIR}\"\n )\n set_tests_properties(NO_CATCH_CONFIG_BAZEL_REPORTER-1\n   PROPERTIES\n@@ -146,7 +146,7 @@ set_tests_properties(BazelEnv::TESTBRIDGE_TEST_ONLY\n \n add_test(NAME BazelEnv::Sharding\n   COMMAND\n-    \"${PYTHON_EXECUTABLE}\" \"${CATCH_DIR}/tests/TestScripts/testBazelSharding.py\"\n+    Python3::Interpreter \"${CATCH_DIR}/tests/TestScripts/testBazelSharding.py\"\n       $<TARGET_FILE:BazelReporterNoCatchConfig>\n       \"${CMAKE_CURRENT_BINARY_DIR}\"\n )\n@@ -222,7 +222,7 @@ add_executable(PartialTestCaseEvents ${TESTS_DIR}/X21-PartialTestCaseEvents.cpp)\n target_link_libraries(PartialTestCaseEvents PRIVATE Catch2WithMain)\n add_test(\n   NAME PartialTestCaseEvents\n-  COMMAND ${PYTHON_EXECUTABLE} ${CATCH_DIR}/tests/TestScripts/testPartialTestCaseEvent.py $<TARGET_FILE:PartialTestCaseEvents>\n+  COMMAND Python3::Interpreter ${CATCH_DIR}/tests/TestScripts/testPartialTestCaseEvent.py $<TARGET_FILE:PartialTestCaseEvents>\n )\n set_tests_properties(PartialTestCaseEvents\n   PROPERTIES\n",
        "problem_statement": "Stop using deprecated FindPythonInterp module\n**Describe the bug**\r\nCMake 3.27 warns about the FindPythonInterp being deprecated and removed in newer releases. \r\n\r\n```\r\nCMake Warning (dev) at CMakeLists.txt:86 (find_package):\r\n  Policy CMP0148 is not set: The FindPythonInterp and FindPythonLibs modules\r\n  are removed.  Run \"cmake --help-policy CMP0148\" for policy details.  Use\r\n  the cmake_policy command to set the policy and suppress this warning.\r\n\r\nThis warning is for project developers.  Use -Wno-dev to suppress it.\r\n```\r\n\r\nhttps://github.com/catchorg/Catch2/actions/runs/6679314592/job/18151308282#step:3:26\r\n\r\nCI shows this warning as well.\r\n\r\n**Expected behavior**\r\nFor there to be no `(dev)` warnings when configuring.\r\n\r\n**Additional context**\r\nI believe the fix is to use the `FindPython` module which has a particular component for the Python interpreter. This was added in CMake 3.12 yet the trunk branch currently only requires CMake 3.10. Raising the minimum CMake version would be reasonable and is unlikely to affect any users other than those still on Ubuntu 18 which by default ships 3.10.\r\n\n",
        "hints_text": "I don't want to push up the minimum cmake version just yet, instead there should be a version check to pick the right module.",
        "created_at": "2025-06-09T01:06:18Z",
        "version": "3.8"
    }
}