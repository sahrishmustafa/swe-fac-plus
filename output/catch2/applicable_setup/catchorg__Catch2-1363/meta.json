{
    "task_id": "catchorg__Catch2-1363",
    "setup_info": {
        "repo_path": "testbed/catchorg__Catch2-1363_2025-06-26_16-39-37",
        "repo_cache_path": "testbed/catchorg/Catch2_cache"
    },
    "task_info": {
        "repo": "catchorg/Catch2",
        "pull_number": 1363,
        "instance_id": "catchorg__Catch2-1363",
        "issue_numbers": [
            "1360"
        ],
        "base_commit": "c9de7dd12d2971c63f9d32ce5459eb98f2fec13d",
        "patch": "diff --git a/include/catch.hpp b/include/catch.hpp\n--- a/include/catch.hpp\n+++ b/include/catch.hpp\n@@ -147,11 +147,12 @@\n // \"BDD-style\" convenience wrappers\n #define CATCH_SCENARIO( ... ) CATCH_TEST_CASE( \"Scenario: \" __VA_ARGS__ )\n #define CATCH_SCENARIO_METHOD( className, ... ) INTERNAL_CATCH_TEST_CASE_METHOD( className, \"Scenario: \" __VA_ARGS__ )\n-#define CATCH_GIVEN( desc )    INTERNAL_CATCH_DYNAMIC_SECTION( \"   Given: \" << desc )\n-#define CATCH_WHEN( desc )     INTERNAL_CATCH_DYNAMIC_SECTION( \"    When: \" << desc )\n-#define CATCH_AND_WHEN( desc ) INTERNAL_CATCH_DYNAMIC_SECTION( \"And when: \" << desc )\n-#define CATCH_THEN( desc )     INTERNAL_CATCH_DYNAMIC_SECTION( \"    Then: \" << desc )\n-#define CATCH_AND_THEN( desc ) INTERNAL_CATCH_DYNAMIC_SECTION( \"     And: \" << desc )\n+#define CATCH_GIVEN( desc )     INTERNAL_CATCH_DYNAMIC_SECTION( \"    Given: \" << desc )\n+#define CATCH_AND_GIVEN( desc ) INTERNAL_CATCH_DYNAMIC_SECTION( \"And given: \" << desc )\n+#define CATCH_WHEN( desc )      INTERNAL_CATCH_DYNAMIC_SECTION( \"     When: \" << desc )\n+#define CATCH_AND_WHEN( desc )  INTERNAL_CATCH_DYNAMIC_SECTION( \" And when: \" << desc )\n+#define CATCH_THEN( desc )      INTERNAL_CATCH_DYNAMIC_SECTION( \"     Then: \" << desc )\n+#define CATCH_AND_THEN( desc )  INTERNAL_CATCH_DYNAMIC_SECTION( \"      And: \" << desc )\n \n // If CATCH_CONFIG_PREFIX_ALL is not defined then the CATCH_ prefix is not required\n #else\n@@ -211,11 +212,12 @@\n #define SCENARIO( ... ) TEST_CASE( \"Scenario: \" __VA_ARGS__ )\n #define SCENARIO_METHOD( className, ... ) INTERNAL_CATCH_TEST_CASE_METHOD( className, \"Scenario: \" __VA_ARGS__ )\n \n-#define GIVEN( desc )    INTERNAL_CATCH_DYNAMIC_SECTION( \"   Given: \" << desc )\n-#define WHEN( desc )     INTERNAL_CATCH_DYNAMIC_SECTION( \"    When: \" << desc )\n-#define AND_WHEN( desc ) INTERNAL_CATCH_DYNAMIC_SECTION( \"And when: \" << desc )\n-#define THEN( desc )     INTERNAL_CATCH_DYNAMIC_SECTION( \"    Then: \" << desc )\n-#define AND_THEN( desc ) INTERNAL_CATCH_DYNAMIC_SECTION( \"     And: \" << desc )\n+#define GIVEN( desc )     INTERNAL_CATCH_DYNAMIC_SECTION( \"    Given: \" << desc )\n+#define AND_GIVEN( desc ) INTERNAL_CATCH_DYNAMIC_SECTION( \"And given: \" << desc )\n+#define WHEN( desc )      INTERNAL_CATCH_DYNAMIC_SECTION( \"     When: \" << desc )\n+#define AND_WHEN( desc )  INTERNAL_CATCH_DYNAMIC_SECTION( \" And when: \" << desc )\n+#define THEN( desc )      INTERNAL_CATCH_DYNAMIC_SECTION( \"     Then: \" << desc )\n+#define AND_THEN( desc )  INTERNAL_CATCH_DYNAMIC_SECTION( \"      And: \" << desc )\n \n using Catch::Detail::Approx;\n \n@@ -276,6 +278,7 @@ using Catch::Detail::Approx;\n #define CATCH_SCENARIO( ... ) INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ))\n #define CATCH_SCENARIO_METHOD( className, ... ) INTERNAL_CATCH_TESTCASE_METHOD_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ), className )\n #define CATCH_GIVEN( desc )\n+#define CATCH_AND_GIVEN( desc )\n #define CATCH_WHEN( desc )\n #define CATCH_AND_WHEN( desc )\n #define CATCH_THEN( desc )\n@@ -340,6 +343,7 @@ using Catch::Detail::Approx;\n #define SCENARIO_METHOD( className, ... ) INTERNAL_CATCH_TESTCASE_METHOD_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ), className )\n \n #define GIVEN( desc )\n+#define AND_GIVEN( desc )\n #define WHEN( desc )\n #define AND_WHEN( desc )\n #define THEN( desc )\n",
        "test_patch": "diff --git a/projects/SelfTest/UsageTests/BDD.tests.cpp b/projects/SelfTest/UsageTests/BDD.tests.cpp\n--- a/projects/SelfTest/UsageTests/BDD.tests.cpp\n+++ b/projects/SelfTest/UsageTests/BDD.tests.cpp\n@@ -38,11 +38,14 @@ namespace { namespace BDDTests {\n     SCENARIO(\"Do that thing with the thing\", \"[Tags]\") {\n         GIVEN(\"This stuff exists\") {\n             // make stuff exist\n-            WHEN(\"I do this\") {\n-                // do this\n-                THEN(\"it should do this\") {\n-                    REQUIRE(itDoesThis());\n-                    AND_THEN(\"do that\")REQUIRE(itDoesThat());\n+            AND_GIVEN(\"And some assumption\") {\n+                // Validate assumption\n+                WHEN(\"I do this\") {\n+                    // do this\n+                    THEN(\"it should do this\") {\n+                        REQUIRE(itDoesThis());\n+                        AND_THEN(\"do that\")REQUIRE(itDoesThat());\n+                    }\n                 }\n             }\n         }\n",
        "problem_statement": "Feature Request: AND_GIVEN\n\r\nTo be consistent with the `AND_WHEN` and `AND_THEN`; \r\n\r\nWith BDD:\r\n\r\nthere are times when you require to expand the context, if you feel a need to type *'and'* in the context of a `GIVEN`, `WHEN`, and/or `THEN`, you should use `AND`.\r\n\r\nwe don't have an `AND`, because that just doesn't work in this abstraction; thus we have `AND_WHEN` and `AND_THEN`; thus we should also have `AND_GIVEN`.\n",
        "hints_text": "",
        "created_at": "2018-08-14T10:25:40Z",
        "version": "2.3"
    }
}