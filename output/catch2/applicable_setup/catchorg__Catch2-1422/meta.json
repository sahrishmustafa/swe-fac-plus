{
    "task_id": "catchorg__Catch2-1422",
    "setup_info": {
        "repo_path": "testbed/catchorg__Catch2-1422_2025-06-26_16-39-37",
        "repo_cache_path": "testbed/catchorg/Catch2_cache"
    },
    "task_info": {
        "repo": "catchorg/Catch2",
        "pull_number": 1422,
        "instance_id": "catchorg__Catch2-1422",
        "issue_numbers": [
            "1351"
        ],
        "base_commit": "1faccd601d904a951142d8fba82914a8325b764e",
        "patch": "diff --git a/include/internal/catch_commandline.cpp b/include/internal/catch_commandline.cpp\n--- a/include/internal/catch_commandline.cpp\n+++ b/include/internal/catch_commandline.cpp\n@@ -10,6 +10,9 @@\n \n #include \"catch_string_manip.h\"\n \n+#include \"catch_interfaces_registry_hub.h\"\n+#include \"catch_interfaces_reporter.h\"\n+\n #include <fstream>\n #include <ctime>\n \n@@ -105,6 +108,18 @@ namespace Catch {\n                 return ParserResult::runtimeError( \"Unrecognised verbosity, '\" + verbosity + \"'\" );\n             return ParserResult::ok( ParseResultType::Matched );\n         };\n+        auto const setReporter = [&]( std::string const& reporter ) {\n+            IReporterRegistry::FactoryMap const& factories = getRegistryHub().getReporterRegistry().getFactories();\n+\n+            auto lcReporter = toLower( reporter );\n+            auto result = factories.find( lcReporter );\n+\n+            if( factories.end() != result )\n+                config.reporterName = lcReporter;\n+            else\n+                return ParserResult::runtimeError( \"Unrecognized reporter, '\" + reporter + \"'. Check available with --list-reporters\" );\n+            return ParserResult::ok( ParseResultType::Matched );\n+        };\n \n         auto cli\n             = ExeName( config.processName )\n@@ -130,7 +145,7 @@ namespace Catch {\n             | Opt( config.outputFilename, \"filename\" )\n                 [\"-o\"][\"--out\"]\n                 ( \"output filename\" )\n-            | Opt( config.reporterName, \"name\" )\n+            | Opt( setReporter, \"name\" )\n                 [\"-r\"][\"--reporter\"]\n                 ( \"reporter to use (defaults to console)\" )\n             | Opt( config.name, \"name\" )\ndiff --git a/include/internal/catch_list.cpp b/include/internal/catch_list.cpp\n--- a/include/internal/catch_list.cpp\n+++ b/include/internal/catch_list.cpp\n@@ -124,7 +124,7 @@ namespace Catch {\n         return tagCounts.size();\n     }\n \n-    std::size_t listReporters( Config const& /*config*/ ) {\n+    std::size_t listReporters() {\n         Catch::cout() << \"Available reporters:\\n\";\n         IReporterRegistry::FactoryMap const& factories = getRegistryHub().getReporterRegistry().getFactories();\n         std::size_t maxNameLen = 0;\n@@ -155,7 +155,7 @@ namespace Catch {\n         if( config.listTags() )\n             listedCount = listedCount.valueOr(0) + listTags( config );\n         if( config.listReporters() )\n-            listedCount = listedCount.valueOr(0) + listReporters( config );\n+            listedCount = listedCount.valueOr(0) + listReporters();\n         return listedCount;\n     }\n \ndiff --git a/include/internal/catch_list.h b/include/internal/catch_list.h\n--- a/include/internal/catch_list.h\n+++ b/include/internal/catch_list.h\n@@ -29,7 +29,7 @@ namespace Catch {\n \n     std::size_t listTags( Config const& config );\n \n-    std::size_t listReporters( Config const& /*config*/ );\n+    std::size_t listReporters();\n     \n     Option<std::size_t> list( Config const& config );\n \n",
        "test_patch": "diff --git a/projects/SelfTest/IntrospectiveTests/CmdLine.tests.cpp b/projects/SelfTest/IntrospectiveTests/CmdLine.tests.cpp\n--- a/projects/SelfTest/IntrospectiveTests/CmdLine.tests.cpp\n+++ b/projects/SelfTest/IntrospectiveTests/CmdLine.tests.cpp\n@@ -280,7 +280,6 @@ TEST_CASE( \"Process can be configured on command line\", \"[config][command-line]\"\n         CHECK(config.processName == \"\");\n     }\n \n-\n     SECTION(\"default - no arguments\") {\n         auto result = cli.parse({\"test\"});\n         CHECK(result);\n@@ -345,8 +344,15 @@ TEST_CASE( \"Process can be configured on command line\", \"[config][command-line]\"\n         SECTION(\"Only one reporter is accepted\") {\n             REQUIRE_FALSE(cli.parse({ \"test\", \"-r\", \"xml\", \"-r\", \"junit\" }));\n         }\n-    }\n+        SECTION(\"must match one of the available ones\") {\n+            auto result = cli.parse({\"test\", \"--reporter\", \"unsupported\"});\n+            CHECK(!result);\n \n+#ifndef CATCH_CONFIG_DISABLE_MATCHERS\n+            REQUIRE_THAT(result.errorMessage(), Contains(\"Unrecognized reporter\"));\n+#endif\n+        }\n+    }\n \n     SECTION(\"debugger\") {\n         SECTION(\"-b\") {\n",
        "problem_statement": "unregistered reporter is not considered a command line error\n## Description\r\nwhen `session.applyCommandLine()` is called with an unregistered reporter, the function simply returns 0 and the later call to `session.run()` just outputs a text: `No reporter registered with name: 'foo'`\r\n\r\n### Steps to reproduce\r\n    int main()\r\n    {\r\n      const char* argv[] = { \"runner\", \"-r foo\" };\r\n\r\n      Catch::Session session;\r\n\r\n      const int command_line_errors = session.applyCommandLine( std::size( argv ), const_cast< char** >( argv ) );\r\n\r\n      if ( command_line_errors == 0 )\r\n      {\r\n        session.run();\r\n      }\r\n      else\r\n      {\r\n        Catch::cerr() << \"Error parsing following command line: \" << *std::prev( std::end( argv ) ) << std::endl;\r\n      }\r\n    }\r\n\r\nI would expect the parser to recognize this as command line argument error.\r\n\r\n* Catch version: v2.3\r\n* Operating System: No Operation System; bare metal\r\n* Compiler+version: gcc version 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] (GNU Tools for Arm Embedded Processors 7-2018-q2-update) \n",
        "hints_text": "",
        "created_at": "2018-10-22T14:08:24Z",
        "version": "2.4"
    }
}