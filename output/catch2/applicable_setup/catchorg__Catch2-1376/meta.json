{
    "task_id": "catchorg__Catch2-1376",
    "setup_info": {
        "repo_path": "testbed/catchorg__Catch2-1376_2025-06-26_16-39-37",
        "repo_cache_path": "testbed/catchorg/Catch2_cache"
    },
    "task_info": {
        "repo": "catchorg/Catch2",
        "pull_number": 1376,
        "instance_id": "catchorg__Catch2-1376",
        "issue_numbers": [
            "1375"
        ],
        "base_commit": "1eb42eed974f944401091325bbe8e61b38fd0678",
        "patch": "diff --git a/include/internal/catch_compiler_capabilities.h b/include/internal/catch_compiler_capabilities.h\n--- a/include/internal/catch_compiler_capabilities.h\n+++ b/include/internal/catch_compiler_capabilities.h\n@@ -29,11 +29,11 @@\n \n #ifdef __cplusplus\n \n-#  if __cplusplus >= 201402L\n+#  if (__cplusplus >= 201402L) || (defined(_MSVC_LANG) && _MSVC_LANG >= 201402L)\n #    define CATCH_CPP14_OR_GREATER\n #  endif\n \n-#  if __cplusplus >= 201703L\n+#  if (__cplusplus >= 201703L) || (defined(_MSVC_LANG) && _MSVC_LANG >= 201703L)\n #    define CATCH_CPP17_OR_GREATER\n #  endif\n \n@@ -154,6 +154,16 @@\n     #define CATCH_INTERNAL_CONFIG_COUNTER\n #endif\n \n+////////////////////////////////////////////////////////////////////////////////\n+// Check if string_view is available and usable\n+// The check is split apart to work around v140 (VS2015) preprocessor issue...\n+#if defined(__has_include)\n+#if __has_include(<string_view>) && defined(CATCH_CPP17_OR_GREATER)\n+#    define CATCH_INTERNAL_CONFIG_CPP17_STRING_VIEW\n+#endif\n+#endif\n+\n+\n #if defined(CATCH_INTERNAL_CONFIG_COUNTER) && !defined(CATCH_CONFIG_NO_COUNTER) && !defined(CATCH_CONFIG_COUNTER)\n #   define CATCH_CONFIG_COUNTER\n #endif\n@@ -177,6 +187,10 @@\n #  define CATCH_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS\n #endif\n \n+#if defined(CATCH_INTERNAL_CONFIG_CPP17_STRING_VIEW) && !defined(CATCH_CONFIG_NO_CPP17_STRING_VIEW) && !defined(CATCH_CONFIG_CPP17_STRING_VIEW)\n+#  define CATCH_CONFIG_CPP17_STRING_VIEW\n+#endif\n+\n #if defined(CATCH_CONFIG_EXPERIMENTAL_REDIRECT)\n #  define CATCH_INTERNAL_CONFIG_NEW_CAPTURE\n #endif\ndiff --git a/include/internal/catch_tostring.cpp b/include/internal/catch_tostring.cpp\n--- a/include/internal/catch_tostring.cpp\n+++ b/include/internal/catch_tostring.cpp\n@@ -116,14 +116,9 @@ std::string StringMaker<std::string>::convert(const std::string& str) {\n     return s;\n }\n \n-#ifdef CATCH_CONFIG_WCHAR\n-std::string StringMaker<std::wstring>::convert(const std::wstring& wstr) {\n-    std::string s;\n-    s.reserve(wstr.size());\n-    for (auto c : wstr) {\n-        s += (c <= 0xff) ? static_cast<char>(c) : '?';\n-    }\n-    return ::Catch::Detail::stringify(s);\n+#ifdef CATCH_CONFIG_CPP17_STRING_VIEW\n+std::string StringMaker<std::string_view>::convert(std::string_view str) {\n+    return ::Catch::Detail::stringify(std::string{ str });\n }\n #endif\n \n@@ -141,7 +136,23 @@ std::string StringMaker<char*>::convert(char* str) {\n         return{ \"{null string}\" };\n     }\n }\n+\n #ifdef CATCH_CONFIG_WCHAR\n+std::string StringMaker<std::wstring>::convert(const std::wstring& wstr) {\n+    std::string s;\n+    s.reserve(wstr.size());\n+    for (auto c : wstr) {\n+        s += (c <= 0xff) ? static_cast<char>(c) : '?';\n+    }\n+    return ::Catch::Detail::stringify(s);\n+}\n+\n+# ifdef CATCH_CONFIG_CPP17_STRING_VIEW\n+std::string StringMaker<std::wstring_view>::convert(std::wstring_view str) {\n+    return StringMaker<std::wstring>::convert(std::wstring(str));\n+}\n+# endif\n+\n std::string StringMaker<wchar_t const*>::convert(wchar_t const * str) {\n     if (str) {\n         return ::Catch::Detail::stringify(std::wstring{ str });\ndiff --git a/include/internal/catch_tostring.h b/include/internal/catch_tostring.h\n--- a/include/internal/catch_tostring.h\n+++ b/include/internal/catch_tostring.h\n@@ -16,6 +16,10 @@\n #include \"catch_compiler_capabilities.h\"\n #include \"catch_stream.h\"\n \n+#ifdef CATCH_CONFIG_CPP17_STRING_VIEW\n+#include <string_view>\n+#endif\n+\n #ifdef __OBJC__\n #include \"catch_objc_arc.hpp\"\n #endif\n@@ -152,10 +156,11 @@ namespace Catch {\n     struct StringMaker<std::string> {\n         static std::string convert(const std::string& str);\n     };\n-#ifdef CATCH_CONFIG_WCHAR\n+\n+#ifdef CATCH_CONFIG_CPP17_STRING_VIEW\n     template<>\n-    struct StringMaker<std::wstring> {\n-        static std::string convert(const std::wstring& wstr);\n+    struct StringMaker<std::string_view> {\n+        static std::string convert(std::string_view str);\n     };\n #endif\n \n@@ -169,6 +174,18 @@ namespace Catch {\n     };\n \n #ifdef CATCH_CONFIG_WCHAR\n+    template<>\n+    struct StringMaker<std::wstring> {\n+        static std::string convert(const std::wstring& wstr);\n+    };\n+\n+# ifdef CATCH_CONFIG_CPP17_STRING_VIEW\n+    template<>\n+    struct StringMaker<std::wstring_view> {\n+        static std::string convert(std::wstring_view str);\n+    };\n+# endif\n+\n     template<>\n     struct StringMaker<wchar_t const *> {\n         static std::string convert(wchar_t const * str);\n",
        "test_patch": "diff --git a/projects/SelfTest/UsageTests/ToStringGeneral.tests.cpp b/projects/SelfTest/UsageTests/ToStringGeneral.tests.cpp\n--- a/projects/SelfTest/UsageTests/ToStringGeneral.tests.cpp\n+++ b/projects/SelfTest/UsageTests/ToStringGeneral.tests.cpp\n@@ -116,6 +116,18 @@ TEST_CASE(\"Static arrays are convertible to string\", \"[toString]\") {\n     }\n }\n \n+#ifdef CATCH_CONFIG_CPP17_STRING_VIEW\n+\n+TEST_CASE(\"String views are stringified like other strings\", \"[toString][approvals]\") {\n+    std::string_view view{\"abc\"};\n+    CHECK(Catch::Detail::stringify(view) == R\"(\"abc\")\");\n+\n+    std::string_view arr[] { view };\n+    CHECK(Catch::Detail::stringify(arr) == R\"({ \"abc\" })\");\n+}\n+\n+#endif\n+\n namespace {\n \n struct WhatException : std::exception {\n",
        "problem_statement": "std::string_view is stringified without quotes\n## Description\r\n`std::string_view` probably uses some fallback stringification, and is expanded without quotes (and also bypasses pretty printing of invisibles).\r\n\r\n\r\n### Steps to reproduce\r\n```cpp\r\n#define CATCH_CONFIG_MAIN\r\n#include <catch2/catch.hpp>\r\n\r\n#include <string>\r\n#include <string_view>\r\n\r\nTEST_CASE(\"string_view == string\") {\r\n    std::string s = \"foo\";\r\n    std::string_view v = s;\r\n\r\n    CHECK(s == v);\r\n}\r\n```\r\nrun with `-s`:\r\n```\r\nPASSED:\r\n  CHECK( s == v )\r\nwith expansion:\r\n  \"foo\" == foo\r\n```\r\n\r\n\r\n### Extra information\r\nCatch version: **v2.4.0**\r\n\n",
        "hints_text": "",
        "created_at": "2018-09-04T18:46:47Z",
        "version": "2.4"
    }
}